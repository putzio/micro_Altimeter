
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI\build/Altimetr_SPI.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
../../../../crt1/gcrt1.S:61
       0:	7d c0       	rjmp	.+250    	; 0xfc <__ctors_end>
       2:	00 00       	nop
../../../../crt1/gcrt1.S:67
       4:	a3 c0       	rjmp	.+326    	; 0x14c <__bad_interrupt>
       6:	00 00       	nop
../../../../crt1/gcrt1.S:68
       8:	a1 c0       	rjmp	.+322    	; 0x14c <__bad_interrupt>
       a:	00 00       	nop
../../../../crt1/gcrt1.S:69
       c:	9f c0       	rjmp	.+318    	; 0x14c <__bad_interrupt>
       e:	00 00       	nop
../../../../crt1/gcrt1.S:70
      10:	9d c0       	rjmp	.+314    	; 0x14c <__bad_interrupt>
      12:	00 00       	nop
../../../../crt1/gcrt1.S:71
      14:	9b c0       	rjmp	.+310    	; 0x14c <__bad_interrupt>
      16:	00 00       	nop
../../../../crt1/gcrt1.S:72
      18:	99 c0       	rjmp	.+306    	; 0x14c <__bad_interrupt>
      1a:	00 00       	nop
../../../../crt1/gcrt1.S:73
      1c:	97 c0       	rjmp	.+302    	; 0x14c <__bad_interrupt>
      1e:	00 00       	nop
../../../../crt1/gcrt1.S:74
      20:	95 c0       	rjmp	.+298    	; 0x14c <__bad_interrupt>
      22:	00 00       	nop
../../../../crt1/gcrt1.S:75
      24:	93 c0       	rjmp	.+294    	; 0x14c <__bad_interrupt>
      26:	00 00       	nop
../../../../crt1/gcrt1.S:76
      28:	91 c0       	rjmp	.+290    	; 0x14c <__bad_interrupt>
      2a:	00 00       	nop
../../../../crt1/gcrt1.S:77
      2c:	8f c0       	rjmp	.+286    	; 0x14c <__bad_interrupt>
      2e:	00 00       	nop
../../../../crt1/gcrt1.S:78
      30:	8d c0       	rjmp	.+282    	; 0x14c <__bad_interrupt>
      32:	00 00       	nop
../../../../crt1/gcrt1.S:79
      34:	8b c0       	rjmp	.+278    	; 0x14c <__bad_interrupt>
      36:	00 00       	nop
../../../../crt1/gcrt1.S:80
      38:	89 c0       	rjmp	.+274    	; 0x14c <__bad_interrupt>
      3a:	00 00       	nop
../../../../crt1/gcrt1.S:81
      3c:	87 c0       	rjmp	.+270    	; 0x14c <__bad_interrupt>
      3e:	00 00       	nop
../../../../crt1/gcrt1.S:82
      40:	85 c0       	rjmp	.+266    	; 0x14c <__bad_interrupt>
      42:	00 00       	nop
../../../../crt1/gcrt1.S:83
      44:	f7 c6       	rjmp	.+3566   	; 0xe34 <__vector_17>
      46:	00 00       	nop
../../../../crt1/gcrt1.S:84
      48:	f0 c6       	rjmp	.+3552   	; 0xe2a <__vector_18>
      4a:	00 00       	nop
../../../../crt1/gcrt1.S:85
      4c:	f8 c6       	rjmp	.+3568   	; 0xe3e <__vector_19>
      4e:	00 00       	nop
../../../../crt1/gcrt1.S:86
      50:	7d c0       	rjmp	.+250    	; 0x14c <__bad_interrupt>
      52:	00 00       	nop
../../../../crt1/gcrt1.S:87
      54:	7b c0       	rjmp	.+246    	; 0x14c <__bad_interrupt>
      56:	00 00       	nop
../../../../crt1/gcrt1.S:88
      58:	79 c0       	rjmp	.+242    	; 0x14c <__bad_interrupt>
      5a:	00 00       	nop
../../../../crt1/gcrt1.S:89
      5c:	77 c0       	rjmp	.+238    	; 0x14c <__bad_interrupt>
      5e:	00 00       	nop
../../../../crt1/gcrt1.S:90
      60:	75 c0       	rjmp	.+234    	; 0x14c <__bad_interrupt>
      62:	00 00       	nop
../../../../crt1/gcrt1.S:91
      64:	54 c7       	rjmp	.+3752   	; 0xf0e <__vector_25>
      66:	00 00       	nop
../../../../crt1/gcrt1.S:92
      68:	71 c0       	rjmp	.+226    	; 0x14c <__bad_interrupt>
      6a:	00 00       	nop
../../../../crt1/gcrt1.S:93
      6c:	6f c0       	rjmp	.+222    	; 0x14c <__bad_interrupt>
      6e:	00 00       	nop
../../../../crt1/gcrt1.S:94
      70:	6d c0       	rjmp	.+218    	; 0x14c <__bad_interrupt>
      72:	00 00       	nop
../../../../crt1/gcrt1.S:95
      74:	6b c0       	rjmp	.+214    	; 0x14c <__bad_interrupt>
      76:	00 00       	nop
      78:	07 63       	ori	r16, 0x37	; 55
      7a:	42 36       	cpi	r20, 0x62	; 98
      7c:	b7 9b       	sbis	0x16, 7	; 22
      7e:	d8 a7       	std	Y+40, r29	; 0x28
      80:	1a 39       	cpi	r17, 0x9A	; 154
      82:	68 56       	subi	r22, 0x68	; 104
      84:	18 ae       	std	Y+56, r1	; 0x38
      86:	ba ab       	std	Y+50, r27	; 0x32
      88:	55 8c       	ldd	r5, Z+29	; 0x1d
      8a:	1d 3c       	cpi	r17, 0xCD	; 205
      8c:	b7 cc       	rjmp	.-1682   	; 0xfffff9fc <__eeprom_end+0xff7ef9f8>
      8e:	57 63       	ori	r21, 0x37	; 55
      90:	bd 6d       	ori	r27, 0xDD	; 221
      92:	ed fd       	.word	0xfded	; ????
      94:	75 3e       	cpi	r23, 0xE5	; 229
      96:	f6 17       	cp	r31, r22
      98:	72 31       	cpi	r23, 0x12	; 18
      9a:	bf 00       	.word	0x00bf	; ????
      9c:	00 00       	nop
      9e:	80 3f       	cpi	r24, 0xF0	; 240
      a0:	08 00       	.word	0x0008	; ????
      a2:	00 00       	nop
      a4:	be 92       	st	-X, r11
      a6:	24 49       	sbci	r18, 0x94	; 148
      a8:	12 3e       	cpi	r17, 0xE2	; 226
      aa:	ab aa       	std	Y+51, r10	; 0x33
      ac:	aa 2a       	or	r10, r26
      ae:	be cd       	rjmp	.-1156   	; 0xfffffc2c <__eeprom_end+0xff7efc28>
      b0:	cc cc       	rjmp	.-1640   	; 0xfffffa4a <__eeprom_end+0xff7efa46>
      b2:	4c 3e       	cpi	r20, 0xEC	; 236
      b4:	00 00       	nop
      b6:	00 80       	ld	r0, Z
      b8:	be ab       	std	Y+54, r27	; 0x36
      ba:	aa aa       	std	Y+50, r10	; 0x32
      bc:	aa 3e       	cpi	r26, 0xEA	; 234
      be:	00 00       	nop
      c0:	00 00       	nop
      c2:	bf 00       	.word	0x00bf	; ????
      c4:	00 00       	nop
      c6:	80 3f       	cpi	r24, 0xF0	; 240
      c8:	00 00       	nop
      ca:	00 00       	nop
      cc:	00 08       	sbc	r0, r0
      ce:	41 78       	andi	r20, 0x81	; 129
      d0:	d3 bb       	out	0x13, r29	; 19
      d2:	43 87       	std	Z+11, r20	; 0x0b
      d4:	d1 13       	cpse	r29, r17
      d6:	3d 19       	sub	r19, r13
      d8:	0e 3c       	cpi	r16, 0xCE	; 206
      da:	c3 bd       	out	0x23, r28	; 35
      dc:	42 82       	std	Z+2, r4	; 0x02
      de:	ad 2b       	or	r26, r29
      e0:	3e 68       	ori	r19, 0x8E	; 142
      e2:	ec 82       	std	Y+4, r14	; 0x04
      e4:	76 be       	out	0x36, r7	; 54
      e6:	d9 8f       	std	Y+25, r29	; 0x19
      e8:	e1 a9       	ldd	r30, Z+49	; 0x31
      ea:	3e 4c       	sbci	r19, 0xCE	; 206
      ec:	80 ef       	ldi	r24, 0xF0	; 240
      ee:	ff be       	out	0x3f, r15	; 63
      f0:	01 c4       	rjmp	.+2050   	; 0x8f4 <GetHight(float) [clone .constprop.6]+0x2c>
      f2:	ff 7f       	andi	r31, 0xFF	; 255
      f4:	3f 00       	.word	0x003f	; ????
      f6:	00 00       	nop
	...

000000fa <__ctors_start>:
__trampolines_start():
      fa:	af 07       	cpc	r26, r31

000000fc <__ctors_end>:
__dtors_end():
../../../../crt1/gcrt1.S:230
      fc:	11 24       	eor	r1, r1
../../../../crt1/gcrt1.S:231
      fe:	1f be       	out	0x3f, r1	; 63
../../../../crt1/gcrt1.S:232
     100:	cf ef       	ldi	r28, 0xFF	; 255
../../../../crt1/gcrt1.S:234
     102:	cd bf       	out	0x3d, r28	; 61
../../../../crt1/gcrt1.S:236
     104:	df e3       	ldi	r29, 0x3F	; 63
../../../../crt1/gcrt1.S:237
     106:	de bf       	out	0x3e, r29	; 62

00000108 <_initThreeStuff()>:
_Z15_initThreeStuffv():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/main.cpp:95
 * (many are available reasonably cheaply on aliexpress et al.) end up being very useful        *
 * for this sort of thing.                                                                      */

  void __attribute__((weak)) init_reset_flags();
  void __attribute__((weak)) init_reset_flags() {
    uint8_t flags = RSTCTRL.RSTFR;
     108:	80 91 40 00 	lds	r24, 0x0040	; 0x800040 <vtable for UartClass+0x7f613c>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/main.cpp:96
    RSTCTRL.RSTFR = flags;
     10c:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <vtable for UartClass+0x7f613c>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/main.cpp:97
    if (flags == 0) {
     110:	81 11       	cpse	r24, r1
     112:	05 c0       	rjmp	.+10     	; 0x11e <_initThreeStuff()+0x16>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/main.cpp:98
      _PROTECTED_WRITE(RSTCTRL.SWRR, 1);
     114:	98 ed       	ldi	r25, 0xD8	; 216
     116:	21 e0       	ldi	r18, 0x01	; 1
     118:	94 bf       	out	0x34, r25	; 52
     11a:	20 93 41 00 	sts	0x0041, r18	; 0x800041 <vtable for UartClass+0x7f613d>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/main.cpp:100
    }
    GPIOR0 = flags;
     11e:	8c bb       	out	0x1c, r24	; 28

00000120 <__do_clear_bss>:
__do_clear_bss():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     120:	28 e3       	ldi	r18, 0x38	; 56
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     122:	a0 e0       	ldi	r26, 0x00	; 0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     124:	b8 e3       	ldi	r27, 0x38	; 56
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     126:	01 c0       	rjmp	.+2      	; 0x12a <.do_clear_bss_start>

00000128 <.do_clear_bss_loop>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     128:	1d 92       	st	X+, r1

0000012a <.do_clear_bss_start>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     12a:	af 3d       	cpi	r26, 0xDF	; 223
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     12c:	b2 07       	cpc	r27, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     12e:	e1 f7       	brne	.-8      	; 0x128 <.do_clear_bss_loop>

00000130 <__do_global_ctors>:
__do_global_ctors():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     130:	10 e0       	ldi	r17, 0x00	; 0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     132:	ce e7       	ldi	r28, 0x7E	; 126
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     134:	d0 e0       	ldi	r29, 0x00	; 0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     136:	04 c0       	rjmp	.+8      	; 0x140 <__do_global_ctors+0x10>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     138:	21 97       	sbiw	r28, 0x01	; 1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     13a:	fe 01       	movw	r30, r28
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     13c:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__tablejump2__>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     140:	cd 37       	cpi	r28, 0x7D	; 125
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     142:	d1 07       	cpc	r29, r17
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     144:	c9 f7       	brne	.-14     	; 0x138 <__do_global_ctors+0x8>
../../../../crt1/gcrt1.S:314
     146:	54 d7       	rcall	.+3752   	; 0xff0 <main>
../../../../crt1/gcrt1.S:315
     148:	0c 94 6a 0f 	jmp	0x1ed4	; 0x1ed4 <_exit>

0000014c <__bad_interrupt>:
__vector_22():
../../../../crt1/gcrt1.S:209
     14c:	59 cf       	rjmp	.-334    	; 0x0 <__vectors>

0000014e <SPIClass::transfer(unsigned char) [clone .constprop.17]>:
_ZN8SPIClass8transferEh.constprop.17():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\libraries\SPI\src/SPI.cpp:310
    The following NOP introduces a small delay that can prevent the wait
    loop from iterating when running at the maximum speed. This gives
    about 10% more speed, even if it seems counter-intuitive. At lower
    speeds it is unnoticed.
  */
  asm volatile("nop");
     14e:	00 00       	nop
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\libraries\SPI\src/SPI.cpp:312

  SPI0.DATA = data;
     150:	80 93 c4 08 	sts	0x08C4, r24	; 0x8008c4 <vtable for UartClass+0x7f69c0>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\libraries\SPI\src/SPI.cpp:313
  while ((SPI0.INTFLAGS & SPI_RXCIF_bm) == 0);  // wait for complete send
     154:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <vtable for UartClass+0x7f69bf>
     158:	87 ff       	sbrs	r24, 7
     15a:	fc cf       	rjmp	.-8      	; 0x154 <SPIClass::transfer(unsigned char) [clone .constprop.17]+0x6>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\libraries\SPI\src/SPI.cpp:314
  return SPI0.DATA;                             // read data back
     15c:	80 91 c4 08 	lds	r24, 0x08C4	; 0x8008c4 <vtable for UartClass+0x7f69c0>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\libraries\SPI\src/SPI.cpp:315
}
     160:	08 95       	ret

00000162 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:29
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size) {
     162:	af 92       	push	r10
     164:	bf 92       	push	r11
     166:	cf 92       	push	r12
     168:	df 92       	push	r13
     16a:	ef 92       	push	r14
     16c:	ff 92       	push	r15
     16e:	0f 93       	push	r16
     170:	1f 93       	push	r17
     172:	cf 93       	push	r28
     174:	df 93       	push	r29
     176:	6c 01       	movw	r12, r24
     178:	7b 01       	movw	r14, r22
     17a:	8b 01       	movw	r16, r22
     17c:	04 0f       	add	r16, r20
     17e:	15 1f       	adc	r17, r21
     180:	eb 01       	movw	r28, r22
     182:	5e 01       	movw	r10, r28
     184:	ae 18       	sub	r10, r14
     186:	bf 08       	sbc	r11, r15
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:31
  size_t n = 0;
  while (size--) {
     188:	c0 17       	cp	r28, r16
     18a:	d1 07       	cpc	r29, r17
     18c:	59 f0       	breq	.+22     	; 0x1a4 <Print::write(unsigned char const*, unsigned int)+0x42>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:32
    if (write(*buffer++)) {
     18e:	69 91       	ld	r22, Y+
     190:	d6 01       	movw	r26, r12
     192:	ed 91       	ld	r30, X+
     194:	fc 91       	ld	r31, X
     196:	01 90       	ld	r0, Z+
     198:	f0 81       	ld	r31, Z
     19a:	e0 2d       	mov	r30, r0
     19c:	c6 01       	movw	r24, r12
     19e:	09 95       	icall
     1a0:	89 2b       	or	r24, r25
     1a2:	79 f7       	brne	.-34     	; 0x182 <Print::write(unsigned char const*, unsigned int)+0x20>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:39
    } else {
      break;
    }
  }
  return n;
}
     1a4:	c5 01       	movw	r24, r10
     1a6:	df 91       	pop	r29
     1a8:	cf 91       	pop	r28
     1aa:	1f 91       	pop	r17
     1ac:	0f 91       	pop	r16
     1ae:	ff 90       	pop	r15
     1b0:	ef 90       	pop	r14
     1b2:	df 90       	pop	r13
     1b4:	cf 90       	pop	r12
     1b6:	bf 90       	pop	r11
     1b8:	af 90       	pop	r10
     1ba:	08 95       	ret

000001bc <UartClass::availableForWrite()>:
_ZN9UartClass17availableForWriteEv():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:642
  int UartClass::availableForWrite(void) {
    tx_buffer_index_t head;
    tx_buffer_index_t tail;

    TX_BUFFER_ATOMIC {
      head = _tx_buffer_head;
     1bc:	fc 01       	movw	r30, r24
     1be:	53 89       	ldd	r21, Z+19	; 0x13
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:643
      tail = _tx_buffer_tail;
     1c0:	44 89       	ldd	r20, Z+20	; 0x14
     1c2:	25 2f       	mov	r18, r21
     1c4:	30 e0       	ldi	r19, 0x00	; 0
     1c6:	84 2f       	mov	r24, r20
     1c8:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:646
    }
    if (head >= tail) {
      return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     1ca:	82 1b       	sub	r24, r18
     1cc:	93 0b       	sbc	r25, r19
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:645

    TX_BUFFER_ATOMIC {
      head = _tx_buffer_head;
      tail = _tx_buffer_tail;
    }
    if (head >= tail) {
     1ce:	54 17       	cp	r21, r20
     1d0:	10 f0       	brcs	.+4      	; 0x1d6 <UartClass::availableForWrite()+0x1a>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:646
      return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     1d2:	cf 96       	adiw	r24, 0x3f	; 63
     1d4:	08 95       	ret
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:648
    }
    return tail - head - 1;
     1d6:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:649
  }
     1d8:	08 95       	ret

000001da <UartClass::read()>:
_ZN9UartClass4readEv():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:626
    } else {
      return _rx_buffer[_rx_buffer_tail];
    }
  }

  int UartClass::read(void) {
     1da:	fc 01       	movw	r30, r24
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:628
    // if the head isn't ahead of the tail, we don't have any characters
    if (_rx_buffer_head == _rx_buffer_tail) {
     1dc:	91 89       	ldd	r25, Z+17	; 0x11
     1de:	82 89       	ldd	r24, Z+18	; 0x12
     1e0:	98 17       	cp	r25, r24
     1e2:	61 f0       	breq	.+24     	; 0x1fc <UartClass::read()+0x22>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:631
      return -1;
    } else {
      unsigned char c = _rx_buffer[_rx_buffer_tail];
     1e4:	a2 89       	ldd	r26, Z+18	; 0x12
     1e6:	ae 0f       	add	r26, r30
     1e8:	bf 2f       	mov	r27, r31
     1ea:	b1 1d       	adc	r27, r1
     1ec:	55 96       	adiw	r26, 0x15	; 21
     1ee:	8c 91       	ld	r24, X
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:632
      _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) & (SERIAL_RX_BUFFER_SIZE - 1); // % SERIAL_RX_BUFFER_SIZE;
     1f0:	92 89       	ldd	r25, Z+18	; 0x12
     1f2:	9f 5f       	subi	r25, 0xFF	; 255
     1f4:	9f 73       	andi	r25, 0x3F	; 63
     1f6:	92 8b       	std	Z+18, r25	; 0x12
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:633
      return c;
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	08 95       	ret
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:629
  }

  int UartClass::read(void) {
    // if the head isn't ahead of the tail, we don't have any characters
    if (_rx_buffer_head == _rx_buffer_tail) {
      return -1;
     1fc:	8f ef       	ldi	r24, 0xFF	; 255
     1fe:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:635
    } else {
      unsigned char c = _rx_buffer[_rx_buffer_tail];
      _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) & (SERIAL_RX_BUFFER_SIZE - 1); // % SERIAL_RX_BUFFER_SIZE;
      return c;
    }
  }
     200:	08 95       	ret

00000202 <UartClass::peek()>:
_ZN9UartClass4peekEv():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:618
}
  int UartClass::available(void) {
    return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) & (SERIAL_RX_BUFFER_SIZE - 1); //% SERIAL_RX_BUFFER_SIZE;
  }

  int UartClass::peek(void) {
     202:	fc 01       	movw	r30, r24
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:619
    if (_rx_buffer_head == _rx_buffer_tail) {
     204:	91 89       	ldd	r25, Z+17	; 0x11
     206:	82 89       	ldd	r24, Z+18	; 0x12
     208:	98 17       	cp	r25, r24
     20a:	31 f0       	breq	.+12     	; 0x218 <UartClass::peek()+0x16>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:622
      return -1;
    } else {
      return _rx_buffer[_rx_buffer_tail];
     20c:	82 89       	ldd	r24, Z+18	; 0x12
     20e:	e8 0f       	add	r30, r24
     210:	f1 1d       	adc	r31, r1
     212:	85 89       	ldd	r24, Z+21	; 0x15
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	08 95       	ret
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:620
    return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) & (SERIAL_RX_BUFFER_SIZE - 1); //% SERIAL_RX_BUFFER_SIZE;
  }

  int UartClass::peek(void) {
    if (_rx_buffer_head == _rx_buffer_tail) {
      return -1;
     218:	8f ef       	ldi	r24, 0xFF	; 255
     21a:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:624
    } else {
      return _rx_buffer[_rx_buffer_tail];
    }
  }
     21c:	08 95       	ret

0000021e <UartClass::available()>:
_ZN9UartClass9availableEv():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:614

  // Note: Does not change output pins
  // though the datasheetsays turning the TX module sets it to input.
  _state = 0;
}
  int UartClass::available(void) {
     21e:	fc 01       	movw	r30, r24
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:615
    return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) & (SERIAL_RX_BUFFER_SIZE - 1); //% SERIAL_RX_BUFFER_SIZE;
     220:	91 89       	ldd	r25, Z+17	; 0x11
     222:	22 89       	ldd	r18, Z+18	; 0x12
     224:	89 2f       	mov	r24, r25
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	80 5c       	subi	r24, 0xC0	; 192
     22a:	9f 4f       	sbci	r25, 0xFF	; 255
     22c:	82 1b       	sub	r24, r18
     22e:	91 09       	sbc	r25, r1
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:616
  }
     230:	8f 73       	andi	r24, 0x3F	; 63
     232:	99 27       	eor	r25, r25
     234:	08 95       	ret

00000236 <UartClass::end()>:
_ZN9UartClass3endEv():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:598
    pinMode(_usart_pins[muxrow][3], OUTPUT); // make XDIR output.
  }
  */
}

void UartClass::end() {
     236:	cf 93       	push	r28
     238:	df 93       	push	r29
     23a:	ec 01       	movw	r28, r24
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:600
  // wait for transmission of outgoing data
  flush();
     23c:	e8 81       	ld	r30, Y
     23e:	f9 81       	ldd	r31, Y+1	; 0x01
     240:	06 80       	ldd	r0, Z+6	; 0x06
     242:	f7 81       	ldd	r31, Z+7	; 0x07
     244:	e0 2d       	mov	r30, r0
     246:	09 95       	icall
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:603
  // Disable receiver and transmitter as well as the RX complete and the data register empty interrupts.
  // TXCIE only used in half duplex - we can just turn the damned thing off yo!
  volatile USART_t * temp = _hwserial_module; /* compiler does a slightly better job with this. */
     248:	ec 85       	ldd	r30, Y+12	; 0x0c
     24a:	fd 85       	ldd	r31, Y+13	; 0x0d
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:604
  temp -> CTRLB &= 0; //~(USART_RXEN_bm | USART_TXEN_bm);
     24c:	86 81       	ldd	r24, Z+6	; 0x06
     24e:	16 82       	std	Z+6, r1	; 0x06
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:605
  temp -> CTRLA &= 0; //~(USART_RXCIE_bm | USART_DREIE_bm | USART_TXCIE_bm);
     250:	85 81       	ldd	r24, Z+5	; 0x05
     252:	15 82       	std	Z+5, r1	; 0x05
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:606
  temp -> STATUS =  USART_TXCIF_bm; // want to make sure no chanceofthat firing in error.
     254:	80 e4       	ldi	r24, 0x40	; 64
     256:	84 83       	std	Z+4, r24	; 0x04
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:608
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
     258:	8a 89       	ldd	r24, Y+18	; 0x12
     25a:	89 8b       	std	Y+17, r24	; 0x11
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:612

  // Note: Does not change output pins
  // though the datasheetsays turning the TX module sets it to input.
  _state = 0;
     25c:	18 8a       	std	Y+16, r1	; 0x10
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:613
}
     25e:	df 91       	pop	r29
     260:	cf 91       	pop	r28
     262:	08 95       	ret

00000264 <UartClass::_poll_tx_data_empty()>:
_ZN9UartClass19_poll_tx_data_emptyEv():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:352
    uartClass._tx_buffer_tail = txTail;
  }
#endif

// To invoke data empty "interrupt" via a call, use this method
void UartClass::_poll_tx_data_empty(void) {
     264:	fc 01       	movw	r30, r24
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:353
  if ((!(SREG & CPU_I_bm)) ||  CPUINT.STATUS) {
     266:	0f b6       	in	r0, 0x3f	; 63
     268:	07 fe       	sbrs	r0, 7
     26a:	04 c0       	rjmp	.+8      	; 0x274 <UartClass::_poll_tx_data_empty()+0x10>
     26c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <vtable for UartClass+0x7f620d>
     270:	88 23       	and	r24, r24
     272:	a1 f0       	breq	.+40     	; 0x29c <_poll_dre_done>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:370
    // so we'll have to poll the "data register empty" flag ourselves.
    // If it is set, pretend an interrupt has happened and call the handler
    // to free up space for us.
    // -Spence 10/23/20
    // Invoke interrupt handler only if conditions data register is empty
    if ((*_hwserial_module).STATUS & USART_DREIF_bm) {
     274:	a4 85       	ldd	r26, Z+12	; 0x0c
     276:	b5 85       	ldd	r27, Z+13	; 0x0d
     278:	14 96       	adiw	r26, 0x04	; 4
     27a:	8c 91       	ld	r24, X
     27c:	14 97       	sbiw	r26, 0x04	; 4
     27e:	85 ff       	sbrs	r24, 5
     280:	0d c0       	rjmp	.+26     	; 0x29c <_poll_dre_done>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:371
      if (_tx_buffer_head != _tx_buffer_tail) {
     282:	93 89       	ldd	r25, Z+19	; 0x13
     284:	84 89       	ldd	r24, Z+20	; 0x14
     286:	98 17       	cp	r25, r24
     288:	39 f0       	breq	.+14     	; 0x298 <UartClass::_poll_tx_data_empty()+0x34>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:373
        // Buffer empty, so disable "data register empty" interrupt
        (*_hwserial_module).CTRLA &= (~USART_DREIE_bm);
     28a:	15 96       	adiw	r26, 0x05	; 5
     28c:	8c 91       	ld	r24, X
     28e:	15 97       	sbiw	r26, 0x05	; 5
     290:	8f 7d       	andi	r24, 0xDF	; 223
     292:	15 96       	adiw	r26, 0x05	; 5
     294:	8c 93       	st	X, r24
     296:	08 95       	ret
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:397
#ifdef USART1
                ::"z"((uint16_t)thisSerial)
#else
                ::"z"(&Serial)
#endif
                : "r18","r19","r24","r25","r26","r27");
     298:	e8 94       	clt
     29a:	dc c5       	rjmp	.+3000   	; 0xe54 <_poll_dre>

0000029c <_poll_dre_done>:
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:404
    }
  }
  // In case interrupts are enabled, the interrupt routine will be invoked by itself
  // Note that this currently does not handle cases where the DRE interruopt becomes
  // disabled, yet you are actually attempting to send. I don't think it can happen.
}
     29c:	08 95       	ret

0000029e <UartClass::write(unsigned char)>:
_ZN9UartClass5writeEh():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:682
    // When we get here, nothing is queued anymore (DREIE is disabled) and
    // the hardware finished transmission (TXCIF is set).
  }


  size_t UartClass::write(uint8_t c) {
     29e:	0f 93       	push	r16
     2a0:	1f 93       	push	r17
     2a2:	cf 93       	push	r28
     2a4:	df 93       	push	r29
     2a6:	ec 01       	movw	r28, r24
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:683
    _state |= 1; // Record that we have written to serial since it was begun.
     2a8:	88 89       	ldd	r24, Y+16	; 0x10
     2aa:	98 2f       	mov	r25, r24
     2ac:	91 60       	ori	r25, 0x01	; 1
     2ae:	98 8b       	std	Y+16, r25	; 0x10
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:688
    // If the buffer and the data register is empty, just write the byte
    // to the data register and be done. This shortcut helps
    // significantly improve the effective data rate at high (>
    // 500kbit/s) bit rates, where interrupt overhead becomes a slowdown.
    if ((_tx_buffer_head == _tx_buffer_tail) && ((*_hwserial_module).STATUS & USART_DREIF_bm)) {
     2b0:	2b 89       	ldd	r18, Y+19	; 0x13
     2b2:	9c 89       	ldd	r25, Y+20	; 0x14
     2b4:	29 13       	cpse	r18, r25
     2b6:	0a c0       	rjmp	.+20     	; 0x2cc <UartClass::write(unsigned char)+0x2e>
     2b8:	ec 85       	ldd	r30, Y+12	; 0x0c
     2ba:	fd 85       	ldd	r31, Y+13	; 0x0d
     2bc:	94 81       	ldd	r25, Z+4	; 0x04
     2be:	95 ff       	sbrs	r25, 5
     2c0:	05 c0       	rjmp	.+10     	; 0x2cc <UartClass::write(unsigned char)+0x2e>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:689
      if (_state & 2) { // in half duplex mode, we turn off RXC interrupt
     2c2:	81 fd       	sbrc	r24, 1
     2c4:	0d c0       	rjmp	.+26     	; 0x2e0 <UartClass::write(unsigned char)+0x42>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:696
        ctrla &= ~USART_RXCIE_bm;
        ctrla |=  USART_TXCIE_bm;
        (*_hwserial_module).STATUS = USART_TXCIF_bm;
        (*_hwserial_module).CTRLA = ctrla;
      } else {
        (*_hwserial_module).STATUS = USART_TXCIF_bm;
     2c6:	80 e4       	ldi	r24, 0x40	; 64
     2c8:	84 83       	std	Z+4, r24	; 0x04
     2ca:	12 c0       	rjmp	.+36     	; 0x2f0 <UartClass::write(unsigned char)+0x52>
     2cc:	06 2f       	mov	r16, r22
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:714
       * // that the interrupt handler is called in this situation
       * (*_hwserial_module).CTRLA &= (~USART_DREIE_bm);
       */
      return 1;
    }
    tx_buffer_index_t i = (_tx_buffer_head + 1) & (SERIAL_TX_BUFFER_SIZE - 1);  // % SERIAL_TX_BUFFER_SIZE;
     2ce:	1b 89       	ldd	r17, Y+19	; 0x13
     2d0:	1f 5f       	subi	r17, 0xFF	; 255
     2d2:	1f 73       	andi	r17, 0x3F	; 63
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:718

    // If the output buffer is full, there's nothing we can do other than to
    // wait for the interrupt handler to empty it a bit (or emulate interrupts)
    while (i == _tx_buffer_tail) {
     2d4:	8c 89       	ldd	r24, Y+20	; 0x14
     2d6:	81 13       	cpse	r24, r17
     2d8:	15 c0       	rjmp	.+42     	; 0x304 <UartClass::write(unsigned char)+0x66>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:719
      _poll_tx_data_empty();
     2da:	ce 01       	movw	r24, r28
     2dc:	c3 df       	rcall	.-122    	; 0x264 <UartClass::_poll_tx_data_empty()>
     2de:	fa cf       	rjmp	.-12     	; 0x2d4 <UartClass::write(unsigned char)+0x36>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:690
    // to the data register and be done. This shortcut helps
    // significantly improve the effective data rate at high (>
    // 500kbit/s) bit rates, where interrupt overhead becomes a slowdown.
    if ((_tx_buffer_head == _tx_buffer_tail) && ((*_hwserial_module).STATUS & USART_DREIF_bm)) {
      if (_state & 2) { // in half duplex mode, we turn off RXC interrupt
        uint8_t ctrla = (*_hwserial_module).CTRLA;
     2e0:	85 81       	ldd	r24, Z+5	; 0x05
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:691
        ctrla &= ~USART_RXCIE_bm;
     2e2:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:692
        ctrla |=  USART_TXCIE_bm;
     2e4:	80 64       	ori	r24, 0x40	; 64
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:693
        (*_hwserial_module).STATUS = USART_TXCIF_bm;
     2e6:	90 e4       	ldi	r25, 0x40	; 64
     2e8:	94 83       	std	Z+4, r25	; 0x04
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:694
        (*_hwserial_module).CTRLA = ctrla;
     2ea:	ec 85       	ldd	r30, Y+12	; 0x0c
     2ec:	fd 85       	ldd	r31, Y+13	; 0x0d
     2ee:	85 83       	std	Z+5, r24	; 0x05
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:699
      } else {
        (*_hwserial_module).STATUS = USART_TXCIF_bm;
      }
      // MUST clear TXCIF **before** writing new char, otherwise ill-timed interrupt can cause it to erase the flag after the new charchter has been sent!
      (*_hwserial_module).TXDATAL = c;
     2f0:	ec 85       	ldd	r30, Y+12	; 0x0c
     2f2:	fd 85       	ldd	r31, Y+13	; 0x0d
     2f4:	62 83       	std	Z+2, r22	; 0x02
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:734
    } else {
      // Enable "data register empty interrupt"
      (*_hwserial_module).CTRLA |= USART_DREIE_bm;
    }
    return 1;
  }
     2f6:	81 e0       	ldi	r24, 0x01	; 1
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	df 91       	pop	r29
     2fc:	cf 91       	pop	r28
     2fe:	1f 91       	pop	r17
     300:	0f 91       	pop	r16
     302:	08 95       	ret
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:721
    // If the output buffer is full, there's nothing we can do other than to
    // wait for the interrupt handler to empty it a bit (or emulate interrupts)
    while (i == _tx_buffer_tail) {
      _poll_tx_data_empty();
    }
    _tx_buffer[_tx_buffer_head] = c;
     304:	eb 89       	ldd	r30, Y+19	; 0x13
     306:	ec 0f       	add	r30, r28
     308:	fd 2f       	mov	r31, r29
     30a:	f1 1d       	adc	r31, r1
     30c:	eb 5a       	subi	r30, 0xAB	; 171
     30e:	ff 4f       	sbci	r31, 0xFF	; 255
     310:	00 83       	st	Z, r16
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:722
    _tx_buffer_head = i;
     312:	1b 8b       	std	Y+19, r17	; 0x13
     314:	ec 85       	ldd	r30, Y+12	; 0x0c
     316:	fd 85       	ldd	r31, Y+13	; 0x0d
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:723
    if (_state & 2) { // in half duplex mode, we turn off RXC interrupt
     318:	88 89       	ldd	r24, Y+16	; 0x10
     31a:	81 ff       	sbrs	r24, 1
     31c:	09 c0       	rjmp	.+18     	; 0x330 <UartClass::write(unsigned char)+0x92>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:724
      uint8_t ctrla = (*_hwserial_module).CTRLA;
     31e:	85 81       	ldd	r24, Z+5	; 0x05
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:725
      ctrla &= ~USART_RXCIE_bm;
     320:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:726
      ctrla |= USART_TXCIE_bm | USART_DREIE_bm;
     322:	80 66       	ori	r24, 0x60	; 96
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:727
      (*_hwserial_module).STATUS = USART_TXCIF_bm;
     324:	90 e4       	ldi	r25, 0x40	; 64
     326:	94 83       	std	Z+4, r25	; 0x04
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:728
      (*_hwserial_module).CTRLA = ctrla;
     328:	ec 85       	ldd	r30, Y+12	; 0x0c
     32a:	fd 85       	ldd	r31, Y+13	; 0x0d
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:731
    } else {
      // Enable "data register empty interrupt"
      (*_hwserial_module).CTRLA |= USART_DREIE_bm;
     32c:	85 83       	std	Z+5, r24	; 0x05
     32e:	e3 cf       	rjmp	.-58     	; 0x2f6 <UartClass::write(unsigned char)+0x58>
     330:	85 81       	ldd	r24, Z+5	; 0x05
     332:	80 62       	ori	r24, 0x20	; 32
     334:	fb cf       	rjmp	.-10     	; 0x32c <UartClass::write(unsigned char)+0x8e>

00000336 <UartClass::flush()>:
_ZN9UartClass5flushEv():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:651
      return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    }
    return tail - head - 1;
  }

  void UartClass::flush() {
     336:	cf 93       	push	r28
     338:	df 93       	push	r29
     33a:	ec 01       	movw	r28, r24
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:655
    // If we have never written a byte, no need to flush. This special
    // case is needed since there is no way to force the TXCIF (transmit
    // complete) bit to 1 during initialization
    if (!_state & 1) {
     33c:	88 89       	ldd	r24, Y+16	; 0x10
     33e:	88 23       	and	r24, r24
     340:	59 f0       	breq	.+22     	; 0x358 <UartClass::flush()+0x22>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:670
    // it's appropriate to use for applications where it has only very small benefits, and significant risk of surprising the user and causing
    // breakage of code that would otherwise work. Finally, the previous implementation didn't check if it was called from the current lvl1 ISR
    // and in that case flush(), and write() with full buffer would just straight up hang...

    // Spin until the data-register-empty-interrupt is disabled and TX complete interrupt flag is raised
    while (((*_hwserial_module).CTRLA & USART_DREIE_bm) || (!((*_hwserial_module).STATUS & USART_TXCIF_bm))) {
     342:	ec 85       	ldd	r30, Y+12	; 0x0c
     344:	fd 85       	ldd	r31, Y+13	; 0x0d
     346:	85 81       	ldd	r24, Z+5	; 0x05
     348:	85 fd       	sbrc	r24, 5
     34a:	03 c0       	rjmp	.+6      	; 0x352 <UartClass::flush()+0x1c>
     34c:	84 81       	ldd	r24, Z+4	; 0x04
     34e:	86 fd       	sbrc	r24, 6
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:675

      // If interrupts are globally disabled or the and DR empty interrupt is disabled,
      // poll the "data register empty" interrupt flag to prevent deadlock

      _poll_tx_data_empty();
     350:	03 c0       	rjmp	.+6      	; 0x358 <UartClass::flush()+0x22>
     352:	ce 01       	movw	r24, r28
     354:	87 df       	rcall	.-242    	; 0x264 <UartClass::_poll_tx_data_empty()>
     356:	f5 cf       	rjmp	.-22     	; 0x342 <UartClass::flush()+0xc>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:679
    }
    // When we get here, nothing is queued anymore (DREIE is disabled) and
    // the hardware finished transmission (TXCIF is set).
  }
     358:	df 91       	pop	r29
     35a:	cf 91       	pop	r28
     35c:	08 95       	ret

0000035e <UartClass::operator bool()>:
_ZN9UartClasscvbEv():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.h:293
    inline   size_t write(unsigned int n)   {return write((uint8_t)n);}
    inline   size_t write(int n)            {return write((uint8_t)n);}
    using Print::write; // pull in write(str) and write(buf, size) from Print
    explicit operator bool() {
      return true;
    }
     35e:	81 e0       	ldi	r24, 0x01	; 1
     360:	08 95       	ret

00000362 <micros>:
micros():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:271
    #else
      uint8_t ticks;
    #endif
    uint8_t flags;
    /* Save current state and disable interrupts */
    uint8_t oldSREG = SREG;
     362:	9f b7       	in	r25, 0x3f	; 63
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:272
    cli(); /* INTERRUPTS OFF */
     364:	f8 94       	cli
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:282
      TCD0.CTRLE = TCD_SCAPTUREA_bm;
      while (!(TCD0.STATUS & TCD_CMDRDY_bm)); // wait for sync - should be only one iteration of this loop
      flags = TCD0.INTFLAGS;
      ticks = TCD0.CAPTUREA;
    #else
      ticks = _timer->CNT;
     366:	e0 91 9a 0a 	lds	r30, 0x0A9A	; 0x800a9a <vtable for UartClass+0x7f6b96>
     36a:	f0 91 9b 0a 	lds	r31, 0x0A9B	; 0x800a9b <vtable for UartClass+0x7f6b97>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:283
      flags = _timer->INTFLAGS;
     36e:	80 91 96 0a 	lds	r24, 0x0A96	; 0x800a96 <vtable for UartClass+0x7f6b92>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:293
     * doesn't matter.
     * Get current number of overflows and timer count */
    #if !(defined(MILLIS_USE_TIMERB0) || defined(MILLIS_USE_TIMERB1))
      overflows = timer_overflow_count;
    #else
      overflows = timer_millis;
     372:	20 91 04 38 	lds	r18, 0x3804	; 0x803804 <timer_millis>
     376:	30 91 05 38 	lds	r19, 0x3805	; 0x803805 <timer_millis+0x1>
     37a:	40 91 06 38 	lds	r20, 0x3806	; 0x803806 <timer_millis+0x2>
     37e:	50 91 07 38 	lds	r21, 0x3807	; 0x803807 <timer_millis+0x3>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:296
    #endif
    /* Turn interrupts back on, assuming they were on when micros was called. */
    SREG = oldSREG; /* INTERRUPTS ON */
     382:	9f bf       	out	0x3f, r25	; 63
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:303
      if ((flags & TCD_OVF_bm) && (ticks < 0x07)) {
    #elif defined(MILLIS_USE_TIMERA0)
      ticks = (TIME_TRACKING_TIMER_PERIOD) - ticks;
      if ((flags & TCA_SPLIT_HUNF_bm) && (ticks < 0x4)) {
    #else // timerb
      if ((flags & TCB_CAPT_bm) && !(ticks & 0xFF00)) {
     384:	80 ff       	sbrs	r24, 0
     386:	08 c0       	rjmp	.+16     	; 0x398 <micros+0x36>
     388:	cf 01       	movw	r24, r30
     38a:	88 27       	eor	r24, r24
     38c:	89 2b       	or	r24, r25
     38e:	21 f4       	brne	.+8      	; 0x398 <micros+0x36>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:308
    #endif
      #if ((defined(MILLIS_USE_TIMERB0) || defined(MILLIS_USE_TIMERB1)) && (F_CPU <= 1000000))
        overflows += 2;
      #else
        overflows++;
     390:	2f 5f       	subi	r18, 0xFF	; 255
     392:	3f 4f       	sbci	r19, 0xFF	; 255
     394:	4f 4f       	sbci	r20, 0xFF	; 255
     396:	5f 4f       	sbci	r21, 0xFF	; 255
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:530
       * 46 replaced with 25 save 21 clocks @ 10 = 2.5 us saved
       * 56 replaced with 27 save 29 clocks @ 20 = 1.5 us saved
       * 66 replaced with 29 save 37 clocks @ 40 = 1 us saved
       */
      #elif (F_CPU == 40000000UL || F_CPU == 20000000UL || F_CPU == 10000000UL || F_CPU == 5000000UL)
        __asm__ __volatile__(
     398:	0f 01       	movw	r0, r30
     39a:	16 94       	lsr	r1
     39c:	07 94       	ror	r0
     39e:	16 94       	lsr	r1
     3a0:	07 94       	ror	r0
     3a2:	16 94       	lsr	r1
     3a4:	07 94       	ror	r0
     3a6:	f0 01       	movw	r30, r0
     3a8:	16 94       	lsr	r1
     3aa:	07 94       	ror	r0
     3ac:	16 94       	lsr	r1
     3ae:	07 94       	ror	r0
     3b0:	e0 19       	sub	r30, r0
     3b2:	f1 09       	sbc	r31, r1
     3b4:	16 94       	lsr	r1
     3b6:	07 94       	ror	r0
     3b8:	06 94       	lsr	r0
     3ba:	10 2c       	mov	r1, r0
     3bc:	16 94       	lsr	r1
     3be:	16 94       	lsr	r1
     3c0:	01 18       	sub	r0, r1
     3c2:	16 94       	lsr	r1
     3c4:	16 94       	lsr	r1
     3c6:	01 0c       	add	r0, r1
     3c8:	11 24       	eor	r1, r1
     3ca:	e0 0d       	add	r30, r0
     3cc:	f1 1d       	adc	r31, r1
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:567
          "add r0,r1"     "\n\t"  // + ticks >> 8
          "eor r1,r1"     "\n\t"  // restore zero_reg
          "add %A0,r0"    "\n\t"  // add to the shifted ticks
          "adc %B0,r1"    "\n"    // carry
          : "+r" (ticks));        // Do the rest in C
        microseconds = overflows * 1000 + ticks;
     3ce:	a8 ee       	ldi	r26, 0xE8	; 232
     3d0:	b3 e0       	ldi	r27, 0x03	; 3
     3d2:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <__muluhisi3>
     3d6:	6e 0f       	add	r22, r30
     3d8:	7f 1f       	adc	r23, r31
     3da:	81 1d       	adc	r24, r1
     3dc:	91 1d       	adc	r25, r1
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:656
        microseconds = ((overflows * millisClockCyclesToMicroseconds(TIME_TRACKING_CYCLES_PER_OVF))
                      + (ticks * (millisClockCyclesToMicroseconds(TIME_TRACKING_CYCLES_PER_OVF) / TIME_TRACKING_TIMER_PERIOD)));
      #endif
    #endif // end of timer-specific part of micros calculations
    return microseconds;
  }
     3de:	08 95       	ret

000003e0 <delay>:
delay():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:724
        _delay_ms(1);
      }
    }
  }
#elif (PROGMEM_SIZE >= 16384 && !defined(MILLIS_USE_TIMERRTC))
  void delay(uint32_t ms) { /* Interrupts will not prolong this less flash-efficient delay */
     3e0:	cf 92       	push	r12
     3e2:	df 92       	push	r13
     3e4:	ef 92       	push	r14
     3e6:	ff 92       	push	r15
     3e8:	cf 93       	push	r28
     3ea:	df 93       	push	r29
     3ec:	6b 01       	movw	r12, r22
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:725
    uint16_t start = (uint16_t) micros();
     3ee:	7c 01       	movw	r14, r24
     3f0:	b8 df       	rcall	.-144    	; 0x362 <micros>
     3f2:	eb 01       	movw	r28, r22
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:727
    while (ms > 0) {
      while (((uint16_t) micros() - start) >= 1000 && ms) {
     3f4:	b6 df       	rcall	.-148    	; 0x362 <micros>
     3f6:	6c 1b       	sub	r22, r28
     3f8:	7d 0b       	sbc	r23, r29
     3fa:	68 3e       	cpi	r22, 0xE8	; 232
     3fc:	73 40       	sbci	r23, 0x03	; 3
     3fe:	a0 f0       	brcs	.+40     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     400:	c1 14       	cp	r12, r1
     402:	d1 04       	cpc	r13, r1
     404:	e1 04       	cpc	r14, r1
     406:	f1 04       	cpc	r15, r1
     408:	39 f4       	brne	.+14     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     40a:	df 91       	pop	r29
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:732
        ms-- ;
        start += 1000;
      }
    }
  }
     40c:	cf 91       	pop	r28
     40e:	ff 90       	pop	r15
     410:	ef 90       	pop	r14
     412:	df 90       	pop	r13
     414:	cf 90       	pop	r12
     416:	08 95       	ret
     418:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:728
#elif (PROGMEM_SIZE >= 16384 && !defined(MILLIS_USE_TIMERRTC))
  void delay(uint32_t ms) { /* Interrupts will not prolong this less flash-efficient delay */
    uint16_t start = (uint16_t) micros();
    while (ms > 0) {
      while (((uint16_t) micros() - start) >= 1000 && ms) {
        ms-- ;
     41a:	c8 1a       	sub	r12, r24
     41c:	d1 08       	sbc	r13, r1
     41e:	e1 08       	sbc	r14, r1
     420:	f1 08       	sbc	r15, r1
     422:	c8 51       	subi	r28, 0x18	; 24
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:729
        start += 1000;
     424:	dc 4f       	sbci	r29, 0xFC	; 252
     426:	e6 cf       	rjmp	.-52     	; 0x3f4 <delay+0x14>
     428:	c1 14       	cp	r12, r1
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:726
    }
  }
#elif (PROGMEM_SIZE >= 16384 && !defined(MILLIS_USE_TIMERRTC))
  void delay(uint32_t ms) { /* Interrupts will not prolong this less flash-efficient delay */
    uint16_t start = (uint16_t) micros();
    while (ms > 0) {
     42a:	d1 04       	cpc	r13, r1
     42c:	e1 04       	cpc	r14, r1
     42e:	f1 04       	cpc	r15, r1
     430:	09 f7       	brne	.-62     	; 0x3f4 <delay+0x14>
     432:	eb cf       	rjmp	.-42     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>

00000434 <UartClass::begin(unsigned long)>:
_ZN9UartClass5beginEm():
     434:	dc 01       	movw	r26, r24
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.h:257

  public:
    inline             UartClass(volatile USART_t *hwserial_module, uint8_t module_number, uint8_t default_pinset);
    bool                    pins(uint8_t tx, uint8_t rx);
    bool                    swap(uint8_t mux_level = 1);
    void                   begin(uint32_t baud) {begin(baud, SERIAL_8N1);}
     436:	ed 91       	ld	r30, X+
     438:	fc 91       	ld	r31, X
     43a:	00 88       	ldd	r0, Z+16	; 0x10
     43c:	f1 89       	ldd	r31, Z+17	; 0x11
     43e:	e0 2d       	mov	r30, r0
     440:	23 e0       	ldi	r18, 0x03	; 3
     442:	30 e0       	ldi	r19, 0x00	; 0
     444:	09 94       	ijmp

00000446 <Print::write(char const*) [clone .part.2] [clone .constprop.31]>:
_ZN5Print5writeEPKc.part.2.constprop.31():
     446:	fc 01       	movw	r30, r24
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.h:56
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) {
        return 0;
      }
      return write((const uint8_t *)str, strlen(str));
     448:	01 90       	ld	r0, Z+
     44a:	00 20       	and	r0, r0
     44c:	e9 f7       	brne	.-6      	; 0x448 <Print::write(char const*) [clone .part.2] [clone .constprop.31]+0x2>
     44e:	31 97       	sbiw	r30, 0x01	; 1
     450:	af 01       	movw	r20, r30
     452:	48 1b       	sub	r20, r24
     454:	59 0b       	sbc	r21, r25
     456:	bc 01       	movw	r22, r24
     458:	8c e2       	ldi	r24, 0x2C	; 44
     45a:	98 e3       	ldi	r25, 0x38	; 56
     45c:	82 ce       	rjmp	.-764    	; 0x162 <Print::write(unsigned char const*, unsigned int)>

0000045e <Print::printNumber(unsigned long, unsigned char) [clone .constprop.26]>:
_ZN5Print11printNumberEmh.constprop.26():
     45e:	8f 92       	push	r8
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:215
  return vfprintf_P(&f, (const char *)format, ap);
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
     460:	9f 92       	push	r9
     462:	af 92       	push	r10
     464:	bf 92       	push	r11
     466:	0f 93       	push	r16
     468:	1f 93       	push	r17
     46a:	cf 93       	push	r28
     46c:	df 93       	push	r29
     46e:	cd b7       	in	r28, 0x3d	; 61
     470:	de b7       	in	r29, 0x3e	; 62
     472:	a1 97       	sbiw	r28, 0x21	; 33
     474:	cd bf       	out	0x3d, r28	; 61
     476:	de bf       	out	0x3e, r29	; 62
     478:	19 a2       	std	Y+33, r1	; 0x21
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:219
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     47a:	42 30       	cpi	r20, 0x02	; 2
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:222

  // prevent crash if called with base == 1
  if (base < 2) {
     47c:	08 f4       	brcc	.+2      	; 0x480 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.26]+0x22>
     47e:	4a e0       	ldi	r20, 0x0A	; 10
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:223
    base = 10;
     480:	8e 01       	movw	r16, r28
     482:	0f 5d       	subi	r16, 0xDF	; 223
     484:	1f 4f       	sbci	r17, 0xFF	; 255
     486:	84 2e       	mov	r8, r20
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:227
  }

  do {
    char c = n % base;
     488:	91 2c       	mov	r9, r1
     48a:	b1 2c       	mov	r11, r1
     48c:	a1 2c       	mov	r10, r1
     48e:	a5 01       	movw	r20, r10
     490:	94 01       	movw	r18, r8
     492:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <__udivmodsi4>
     496:	e6 2f       	mov	r30, r22
     498:	b9 01       	movw	r22, r18
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:228
    n /= base;
     49a:	ca 01       	movw	r24, r20
     49c:	ea 30       	cpi	r30, 0x0A	; 10
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:230

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     49e:	d4 f4       	brge	.+52     	; 0x4d4 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.26]+0x76>
     4a0:	e0 5d       	subi	r30, 0xD0	; 208
     4a2:	d8 01       	movw	r26, r16
     4a4:	ee 93       	st	-X, r30
     4a6:	8d 01       	movw	r16, r26
     4a8:	23 2b       	or	r18, r19
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:231
  } while (n);
     4aa:	24 2b       	or	r18, r20
     4ac:	25 2b       	or	r18, r21
     4ae:	79 f7       	brne	.-34     	; 0x48e <Print::printNumber(unsigned long, unsigned char) [clone .constprop.26]+0x30>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.h:54
    }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) {
        return 0;
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	80 e0       	ldi	r24, 0x00	; 0
write():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.h:53
      setWriteError(0);
    }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) {
     4b4:	10 97       	sbiw	r26, 0x00	; 0
     4b6:	11 f0       	breq	.+4      	; 0x4bc <Print::printNumber(unsigned long, unsigned char) [clone .constprop.26]+0x5e>
     4b8:	cd 01       	movw	r24, r26
     4ba:	c5 df       	rcall	.-118    	; 0x446 <Print::write(char const*) [clone .part.2] [clone .constprop.31]>
_ZN5Print11printNumberEmh.constprop.26():
     4bc:	a1 96       	adiw	r28, 0x21	; 33
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:234

  return write(str);
}
     4be:	cd bf       	out	0x3d, r28	; 61
     4c0:	de bf       	out	0x3e, r29	; 62
     4c2:	df 91       	pop	r29
     4c4:	cf 91       	pop	r28
     4c6:	1f 91       	pop	r17
     4c8:	0f 91       	pop	r16
     4ca:	bf 90       	pop	r11
     4cc:	af 90       	pop	r10
     4ce:	9f 90       	pop	r9
     4d0:	8f 90       	pop	r8
     4d2:	08 95       	ret
     4d4:	e9 5c       	subi	r30, 0xC9	; 201
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:230

  do {
    char c = n % base;
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     4d6:	e5 cf       	rjmp	.-54     	; 0x4a2 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.26]+0x44>

000004d8 <Print::print(long, int) [clone .part.3] [clone .constprop.10]>:
_ZN5Print5printEli.part.3.constprop.10():
     4d8:	cf 92       	push	r12
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:86

size_t Print::print(unsigned int n, int base) {
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base) {
     4da:	df 92       	push	r13
     4dc:	ef 92       	push	r14
     4de:	ff 92       	push	r15
     4e0:	cf 93       	push	r28
     4e2:	df 93       	push	r29
     4e4:	6b 01       	movw	r12, r22
     4e6:	7c 01       	movw	r14, r24
print():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:71
size_t Print::print(const char str[]) {
  return write(str);
}

size_t Print::print(char c) {
  return write(c);
     4e8:	6d e2       	ldi	r22, 0x2D	; 45
     4ea:	8c e2       	ldi	r24, 0x2C	; 44
     4ec:	98 e3       	ldi	r25, 0x38	; 56
     4ee:	d7 de       	rcall	.-594    	; 0x29e <UartClass::write(unsigned char)>
     4f0:	ec 01       	movw	r28, r24
_ZN5Print5printEli.part.3.constprop.10():
     4f2:	66 27       	eor	r22, r22
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:92
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
     4f4:	77 27       	eor	r23, r23
     4f6:	cb 01       	movw	r24, r22
     4f8:	6c 19       	sub	r22, r12
     4fa:	7d 09       	sbc	r23, r13
     4fc:	8e 09       	sbc	r24, r14
     4fe:	9f 09       	sbc	r25, r15
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:93
      return printNumber(n, 10) + t;
     500:	4a e0       	ldi	r20, 0x0A	; 10
     502:	ad df       	rcall	.-166    	; 0x45e <Print::printNumber(unsigned long, unsigned char) [clone .constprop.26]>
     504:	8c 0f       	add	r24, r28
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:99
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     506:	9d 1f       	adc	r25, r29
     508:	df 91       	pop	r29
     50a:	cf 91       	pop	r28
     50c:	ff 90       	pop	r15
     50e:	ef 90       	pop	r14
     510:	df 90       	pop	r13
     512:	cf 90       	pop	r12
     514:	08 95       	ret

00000516 <Print::print(char const*) [clone .constprop.29]>:
_ZN5Print5printEPKc.constprop.29():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:66

size_t Print::print(const String &s) {
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[]) {
     516:	97 cf       	rjmp	.-210    	; 0x446 <Print::write(char const*) [clone .part.2] [clone .constprop.31]>

00000518 <Print::println(double, int) [clone .constprop.20]>:
_ZN5Print7printlnEdi.constprop.20():
     518:	4f 92       	push	r4
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:175
  size_t n = print(num, base);
  n += println();
  return n;
}

size_t Print::println(double num, int digits) {
     51a:	5f 92       	push	r5
     51c:	6f 92       	push	r6
     51e:	7f 92       	push	r7
     520:	8f 92       	push	r8
     522:	9f 92       	push	r9
     524:	af 92       	push	r10
     526:	bf 92       	push	r11
     528:	cf 92       	push	r12
     52a:	df 92       	push	r13
     52c:	ef 92       	push	r14
     52e:	ff 92       	push	r15
     530:	6b 01       	movw	r12, r22
     532:	7c 01       	movw	r14, r24
printFloat():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:239
}

size_t Print::printFloat(double number, uint8_t digits) {
  size_t n = 0;

  if (isnan(number)) {
     534:	ac 01       	movw	r20, r24
     536:	9b 01       	movw	r18, r22
     538:	0e 94 ba 0c 	call	0x1974	; 0x1974 <__unordsf2>
     53c:	88 23       	and	r24, r24
     53e:	b1 f0       	breq	.+44     	; 0x56c <Print::println(double, int) [clone .constprop.20]+0x54>
write():
     540:	8e e1       	ldi	r24, 0x1E	; 30
     542:	9f e9       	ldi	r25, 0x9F	; 159
     544:	80 df       	rcall	.-256    	; 0x446 <Print::write(char const*) [clone .part.2] [clone .constprop.31]>
     546:	7c 01       	movw	r14, r24
     548:	8c e2       	ldi	r24, 0x2C	; 44
     54a:	9f e9       	ldi	r25, 0x9F	; 159
     54c:	7c df       	rcall	.-264    	; 0x446 <Print::write(char const*) [clone .part.2] [clone .constprop.31]>
_ZN5Print7printlnEdi.constprop.20():
     54e:	8e 0d       	add	r24, r14
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:179

size_t Print::println(double num, int digits) {
  size_t n = print(num, digits);
  n += println();
  return n;
}
     550:	9f 1d       	adc	r25, r15
     552:	ff 90       	pop	r15
     554:	ef 90       	pop	r14
     556:	df 90       	pop	r13
     558:	cf 90       	pop	r12
     55a:	bf 90       	pop	r11
     55c:	af 90       	pop	r10
     55e:	9f 90       	pop	r9
     560:	8f 90       	pop	r8
     562:	7f 90       	pop	r7
     564:	6f 90       	pop	r6
     566:	5f 90       	pop	r5
     568:	4f 90       	pop	r4
     56a:	08 95       	ret
printFloat():
     56c:	46 01       	movw	r8, r12
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:242
  size_t n = 0;

  if (isnan(number)) {
    return print("nan");
  }
  if (isinf(number)) {
     56e:	57 01       	movw	r10, r14
     570:	e8 94       	clt
     572:	b7 f8       	bld	r11, 7
     574:	2f ef       	ldi	r18, 0xFF	; 255
     576:	3f ef       	ldi	r19, 0xFF	; 255
     578:	4f e7       	ldi	r20, 0x7F	; 127
     57a:	5f e7       	ldi	r21, 0x7F	; 127
     57c:	c5 01       	movw	r24, r10
     57e:	b4 01       	movw	r22, r8
     580:	0e 94 ba 0c 	call	0x1974	; 0x1974 <__unordsf2>
     584:	81 11       	cpse	r24, r1
     586:	0c c0       	rjmp	.+24     	; 0x5a0 <Print::println(double, int) [clone .constprop.20]+0x88>
     588:	2f ef       	ldi	r18, 0xFF	; 255
     58a:	3f ef       	ldi	r19, 0xFF	; 255
     58c:	4f e7       	ldi	r20, 0x7F	; 127
     58e:	5f e7       	ldi	r21, 0x7F	; 127
     590:	c5 01       	movw	r24, r10
     592:	b4 01       	movw	r22, r8
     594:	f2 d7       	rcall	.+4068   	; 0x157a <__cmpsf2>
     596:	18 16       	cp	r1, r24
     598:	1c f4       	brge	.+6      	; 0x5a0 <Print::println(double, int) [clone .constprop.20]+0x88>
write():
     59a:	82 e2       	ldi	r24, 0x22	; 34
     59c:	9f e9       	ldi	r25, 0x9F	; 159
     59e:	d2 cf       	rjmp	.-92     	; 0x544 <Print::println(double, int) [clone .constprop.20]+0x2c>
printFloat():
     5a0:	2f ef       	ldi	r18, 0xFF	; 255
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:245
    return print("inf");
  }
  if (number > 4294967040.0) {
     5a2:	3f ef       	ldi	r19, 0xFF	; 255
     5a4:	4f e7       	ldi	r20, 0x7F	; 127
     5a6:	5f e4       	ldi	r21, 0x4F	; 79
     5a8:	c7 01       	movw	r24, r14
     5aa:	b6 01       	movw	r22, r12
     5ac:	0e 94 07 0c 	call	0x180e	; 0x180e <__gesf2>
     5b0:	18 16       	cp	r1, r24
     5b2:	1c f4       	brge	.+6      	; 0x5ba <Print::println(double, int) [clone .constprop.20]+0xa2>
write():
     5b4:	86 e2       	ldi	r24, 0x26	; 38
     5b6:	9f e9       	ldi	r25, 0x9F	; 159
     5b8:	c5 cf       	rjmp	.-118    	; 0x544 <Print::println(double, int) [clone .constprop.20]+0x2c>
printFloat():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:248
    return print("ovf");  // constant determined empirically
  }
  if (number < -4294967040.0) {
     5ba:	2f ef       	ldi	r18, 0xFF	; 255
     5bc:	3f ef       	ldi	r19, 0xFF	; 255
     5be:	4f e7       	ldi	r20, 0x7F	; 127
     5c0:	5f ec       	ldi	r21, 0xCF	; 207
     5c2:	c7 01       	movw	r24, r14
     5c4:	b6 01       	movw	r22, r12
     5c6:	d9 d7       	rcall	.+4018   	; 0x157a <__cmpsf2>
     5c8:	87 fd       	sbrc	r24, 7
     5ca:	f4 cf       	rjmp	.-24     	; 0x5b4 <Print::println(double, int) [clone .constprop.20]+0x9c>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:253
    return print("ovf");  // constant determined empirically
  }

  // Handle negative numbers
  if (number < 0.0) {
     5cc:	20 e0       	ldi	r18, 0x00	; 0
     5ce:	30 e0       	ldi	r19, 0x00	; 0
     5d0:	a9 01       	movw	r20, r18
     5d2:	c7 01       	movw	r24, r14
     5d4:	b6 01       	movw	r22, r12
     5d6:	d1 d7       	rcall	.+4002   	; 0x157a <__cmpsf2>
_ZN5Print7printlnEdi.constprop.20():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:237

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) {
  size_t n = 0;
     5d8:	b1 2c       	mov	r11, r1
     5da:	a1 2c       	mov	r10, r1
printFloat():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:253
  if (number < -4294967040.0) {
    return print("ovf");  // constant determined empirically
  }

  // Handle negative numbers
  if (number < 0.0) {
     5dc:	87 ff       	sbrs	r24, 7
     5de:	09 c0       	rjmp	.+18     	; 0x5f2 <Print::println(double, int) [clone .constprop.20]+0xda>
print():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:71
size_t Print::print(const char str[]) {
  return write(str);
}

size_t Print::print(char c) {
  return write(c);
     5e0:	6d e2       	ldi	r22, 0x2D	; 45
     5e2:	8c e2       	ldi	r24, 0x2C	; 44
     5e4:	98 e3       	ldi	r25, 0x38	; 56
     5e6:	5b de       	rcall	.-842    	; 0x29e <UartClass::write(unsigned char)>
     5e8:	5c 01       	movw	r10, r24
printFloat():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:255
  }

  // Handle negative numbers
  if (number < 0.0) {
    n += print('-');
    number = -number;
     5ea:	f7 fa       	bst	r15, 7
     5ec:	f0 94       	com	r15
     5ee:	f7 f8       	bld	r15, 7
     5f0:	f0 94       	com	r15
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:264
  double rounding = 0.5;
  for (uint8_t i = 0; i < digits; ++i) {
    rounding /= 10.0;
  }

  number += rounding;
     5f2:	2a e0       	ldi	r18, 0x0A	; 10
     5f4:	37 ed       	ldi	r19, 0xD7	; 215
     5f6:	43 ea       	ldi	r20, 0xA3	; 163
     5f8:	5b e3       	ldi	r21, 0x3B	; 59
     5fa:	c7 01       	movw	r24, r14
     5fc:	b6 01       	movw	r22, r12
     5fe:	59 d7       	rcall	.+3762   	; 0x14b2 <__addsf3>
     600:	2b 01       	movw	r4, r22
     602:	3c 01       	movw	r6, r24
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:267

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
     604:	0e 94 29 0b 	call	0x1652	; 0x1652 <__fixunssfsi>
     608:	6b 01       	movw	r12, r22
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:268
  double remainder = number - (double)int_part;
     60a:	7c 01       	movw	r14, r24
     60c:	0e 94 55 0b 	call	0x16aa	; 0x16aa <__floatunsisf>
     610:	9b 01       	movw	r18, r22
     612:	ac 01       	movw	r20, r24
     614:	c3 01       	movw	r24, r6
     616:	b2 01       	movw	r22, r4
     618:	4b d7       	rcall	.+3734   	; 0x14b0 <__subsf3>
     61a:	2b 01       	movw	r4, r22
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:105

size_t Print::print(unsigned long n, int base) {
  if (base == 0) {
    return write(n);
  } else {
    return printNumber(n, base);
     61c:	3c 01       	movw	r6, r24
print():
     61e:	4a e0       	ldi	r20, 0x0A	; 10
     620:	c7 01       	movw	r24, r14
     622:	b6 01       	movw	r22, r12
     624:	1c df       	rcall	.-456    	; 0x45e <Print::printNumber(unsigned long, unsigned char) [clone .constprop.26]>
printFloat():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:269
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
     626:	7c 01       	movw	r14, r24
     628:	ea 0c       	add	r14, r10
     62a:	fb 1c       	adc	r15, r11
write():
     62c:	8a e2       	ldi	r24, 0x2A	; 42
     62e:	9f e9       	ldi	r25, 0x9F	; 159
     630:	0a df       	rcall	.-492    	; 0x446 <Print::write(char const*) [clone .part.2] [clone .constprop.31]>
printFloat():
     632:	e8 0e       	add	r14, r24
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:273

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
     634:	f9 1e       	adc	r15, r25
     636:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:278
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0) {
    remainder *= 10.0;
     638:	30 e0       	ldi	r19, 0x00	; 0
     63a:	40 e2       	ldi	r20, 0x20	; 32
     63c:	51 e4       	ldi	r21, 0x41	; 65
     63e:	c3 01       	movw	r24, r6
     640:	b2 01       	movw	r22, r4
     642:	0e 94 0b 0c 	call	0x1816	; 0x1816 <__mulsf3>
     646:	2b 01       	movw	r4, r22
     648:	3c 01       	movw	r6, r24
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:279
    unsigned int toPrint = (unsigned int)remainder;
     64a:	0e 94 29 0b 	call	0x1652	; 0x1652 <__fixunssfsi>
print():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:83
size_t Print::print(int n, int base) {
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base) {
  return print((unsigned long) n, base);
     64e:	4b 01       	movw	r8, r22
     650:	b1 2c       	mov	r11, r1
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:105

size_t Print::print(unsigned long n, int base) {
  if (base == 0) {
    return write(n);
  } else {
    return printNumber(n, base);
     652:	a1 2c       	mov	r10, r1
     654:	4a e0       	ldi	r20, 0x0A	; 10
     656:	c5 01       	movw	r24, r10
     658:	b4 01       	movw	r22, r8
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:280

  // Extract digits from the remainder one at a time
  while (digits-- > 0) {
    remainder *= 10.0;
    unsigned int toPrint = (unsigned int)remainder;
    n += print(toPrint);
     65a:	01 df       	rcall	.-510    	; 0x45e <Print::printNumber(unsigned long, unsigned char) [clone .constprop.26]>
printFloat():
     65c:	e8 0e       	add	r14, r24
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:281
    remainder -= toPrint;
     65e:	f9 1e       	adc	r15, r25
     660:	c5 01       	movw	r24, r10
     662:	b4 01       	movw	r22, r8
     664:	0e 94 55 0b 	call	0x16aa	; 0x16aa <__floatunsisf>
     668:	9b 01       	movw	r18, r22
     66a:	ac 01       	movw	r20, r24
     66c:	c3 01       	movw	r24, r6
     66e:	b2 01       	movw	r22, r4
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:278
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0) {
    remainder *= 10.0;
     670:	1f d7       	rcall	.+3646   	; 0x14b0 <__subsf3>
     672:	20 e0       	ldi	r18, 0x00	; 0
     674:	30 e0       	ldi	r19, 0x00	; 0
     676:	40 e2       	ldi	r20, 0x20	; 32
     678:	51 e4       	ldi	r21, 0x41	; 65
     67a:	0e 94 0b 0c 	call	0x1816	; 0x1816 <__mulsf3>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:279
    unsigned int toPrint = (unsigned int)remainder;
     67e:	e9 d7       	rcall	.+4050   	; 0x1652 <__fixunssfsi>
print():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:83
size_t Print::print(int n, int base) {
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base) {
  return print((unsigned long) n, base);
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:105

size_t Print::print(unsigned long n, int base) {
  if (base == 0) {
    return write(n);
  } else {
    return printNumber(n, base);
     684:	4a e0       	ldi	r20, 0x0A	; 10
     686:	eb de       	rcall	.-554    	; 0x45e <Print::printNumber(unsigned long, unsigned char) [clone .constprop.26]>
printFloat():
     688:	e8 0e       	add	r14, r24
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:280

  // Extract digits from the remainder one at a time
  while (digits-- > 0) {
    remainder *= 10.0;
    unsigned int toPrint = (unsigned int)remainder;
    n += print(toPrint);
     68a:	f9 1e       	adc	r15, r25
     68c:	5d cf       	rjmp	.-326    	; 0x548 <Print::println(double, int) [clone .constprop.20]+0x30>

0000068e <digitalWrite.constprop.18>:
digitalWrite.constprop.18():
     68e:	91 e0       	ldi	r25, 0x01	; 1
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:279
  that the value of the port was set correctly when it was
  changed to an output. Code in the wild relies on this behavior.
  */

  if (val == LOW) { /* If LOW */
    port->OUTCLR = bit_mask;
     690:	81 11       	cpse	r24, r1
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:278
  you could digitalWrite() a pin while it's an input, to ensure
  that the value of the port was set correctly when it was
  changed to an output. Code in the wild relies on this behavior.
  */

  if (val == LOW) { /* If LOW */
     692:	16 c0       	rjmp	.+44     	; 0x6c0 <digitalWrite.constprop.18+0x32>
     694:	90 93 26 04 	sts	0x0426, r25	; 0x800426 <vtable for UartClass+0x7f6522>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:279
    port->OUTCLR = bit_mask;
     698:	90 91 20 04 	lds	r25, 0x0420	; 0x800420 <vtable for UartClass+0x7f651c>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:296
  } else {
    port->OUTSET = bit_mask;
  }

  /* Input direction */
  if (!(port->DIR & bit_mask)) {
     69c:	90 fd       	sbrc	r25, 0
     69e:	0a c0       	rjmp	.+20     	; 0x6b4 <digitalWrite.constprop.18+0x26>
     6a0:	9f b7       	in	r25, 0x3f	; 63
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:309

    /* Calculate where pin control register is */
    volatile uint8_t *pin_ctrl_reg = getPINnCTRLregister(port, bit_pos);

    /* Save system status and disable interrupts */
    uint8_t status = SREG;
     6a2:	f8 94       	cli
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:310
    cli();
     6a4:	81 11       	cpse	r24, r1
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:312

    if (val == LOW) {
     6a6:	0f c0       	rjmp	.+30     	; 0x6c6 <digitalWrite.constprop.18+0x38>
     6a8:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <vtable for UartClass+0x7f652c>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:314
      /* Disable pullup */
      *pin_ctrl_reg &= ~PORT_PULLUPEN_bm;
     6ac:	87 7f       	andi	r24, 0xF7	; 247
     6ae:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <vtable for UartClass+0x7f652c>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:317
    } else {
      /* Enable pull-up */
      *pin_ctrl_reg |= PORT_PULLUPEN_bm;
     6b2:	9f bf       	out	0x3f, r25	; 63
turnOffPWM():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:321
    }

    /* Restore system status */
    SREG = status;
     6b4:	80 91 01 0a 	lds	r24, 0x0A01	; 0x800a01 <vtable for UartClass+0x7f6afd>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:201
      #endif
      if (bit_mask > 0x04) { // -> bit_pos > 2 -> output channel controlled by HCMP
        bit_mask <<= 1;      // mind the gap (between LCMP and HCMP)
      }
      // since we're turning it off, we don't need to change the CMP register
      TCA0.SPLIT.CTRLB &= ~bit_mask;
     6b8:	8e 7f       	andi	r24, 0xFE	; 254
     6ba:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <vtable for UartClass+0x7f6afd>
digitalWrite.constprop.18():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:292
    // val will now be 0 (LOW) if the toggling made it LOW
    // or bit_mask if not. And further down, we only need to
    // know if it's
  /* If HIGH OR  > TOGGLE  */
  } else {
    port->OUTSET = bit_mask;
     6be:	08 95       	ret
     6c0:	90 93 25 04 	sts	0x0425, r25	; 0x800425 <vtable for UartClass+0x7f6521>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:317
    if (val == LOW) {
      /* Disable pullup */
      *pin_ctrl_reg &= ~PORT_PULLUPEN_bm;
    } else {
      /* Enable pull-up */
      *pin_ctrl_reg |= PORT_PULLUPEN_bm;
     6c4:	e9 cf       	rjmp	.-46     	; 0x698 <digitalWrite.constprop.18+0xa>
     6c6:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <vtable for UartClass+0x7f652c>
     6ca:	88 60       	ori	r24, 0x08	; 8
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:211
    array[i] = SPI.transfer(0x00);
  }
  // take the chip select high to de-select:
  digitalWrite(chipSelectPin, HIGH);
}
void ReadRegisterToUintArray(uint8_t readRegister, uint8_t bytesToRead, uint8_t chipSelectPin, uint8_t *array)
     6cc:	f0 cf       	rjmp	.-32     	; 0x6ae <digitalWrite.constprop.18+0x20>

000006ce <ReadRegisterToUintArray(unsigned char, unsigned char, unsigned char, unsigned char*) [clone .constprop.12]>:
_Z23ReadRegisterToUintArrayhhhPh.constprop.12():
     6ce:	ef 92       	push	r14
     6d0:	ff 92       	push	r15
     6d2:	0f 93       	push	r16
     6d4:	1f 93       	push	r17
     6d6:	cf 93       	push	r28
     6d8:	df 93       	push	r29
     6da:	c8 2f       	mov	r28, r24
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:216
{
  readRegister = READ_REGISTER(readRegister);

  // take the chip select low to select the device:
  digitalWrite(chipSelectPin, LOW);
     6dc:	06 2f       	mov	r16, r22
     6de:	7a 01       	movw	r14, r20
     6e0:	80 e0       	ldi	r24, 0x00	; 0
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:218
  // send the device the register you want to read:
  SPI.transfer(readRegister);
     6e2:	d5 df       	rcall	.-86     	; 0x68e <digitalWrite.constprop.18>
     6e4:	8c 2f       	mov	r24, r28
     6e6:	33 dd       	rcall	.-1434   	; 0x14e <SPIClass::transfer(unsigned char) [clone .constprop.17]>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:219
  for (int i = 0; i < bytesToRead; i++)
     6e8:	e7 01       	movw	r28, r14
     6ea:	10 e0       	ldi	r17, 0x00	; 0
     6ec:	ce 01       	movw	r24, r28
     6ee:	8e 19       	sub	r24, r14
     6f0:	9f 09       	sbc	r25, r15
     6f2:	80 17       	cp	r24, r16
     6f4:	91 07       	cpc	r25, r17
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:222
  {
    // send a value of 0 to read the first byte returned:
    array[i] = SPI.transfer(0x00);
     6f6:	24 f4       	brge	.+8      	; 0x700 <ReadRegisterToUintArray(unsigned char, unsigned char, unsigned char, unsigned char*) [clone .constprop.12]+0x32>
     6f8:	80 e0       	ldi	r24, 0x00	; 0
     6fa:	29 dd       	rcall	.-1454   	; 0x14e <SPIClass::transfer(unsigned char) [clone .constprop.17]>
     6fc:	89 93       	st	Y+, r24
     6fe:	f6 cf       	rjmp	.-20     	; 0x6ec <ReadRegisterToUintArray(unsigned char, unsigned char, unsigned char, unsigned char*) [clone .constprop.12]+0x1e>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:225
  }
  // take the chip select high to de-select:
  digitalWrite(chipSelectPin, HIGH);
     700:	81 e0       	ldi	r24, 0x01	; 1
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:226
}
     702:	df 91       	pop	r29
     704:	cf 91       	pop	r28
     706:	1f 91       	pop	r17
     708:	0f 91       	pop	r16
     70a:	ff 90       	pop	r15
     70c:	ef 90       	pop	r14
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:225
  {
    // send a value of 0 to read the first byte returned:
    array[i] = SPI.transfer(0x00);
  }
  // take the chip select high to de-select:
  digitalWrite(chipSelectPin, HIGH);
     70e:	bf cf       	rjmp	.-130    	; 0x68e <digitalWrite.constprop.18>

00000710 <pinMode>:
pinMode():
     710:	8c 30       	cpi	r24, 0x0C	; 12
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:136
  return port << 1;
}
void pinMode(uint8_t pin, uint8_t mode) {
  check_valid_digital_pin(pin);         /* generate compile error if a constant that is not a valid pin is used as the pin */
  check_valid_pin_mode(mode);           /* generate compile error if a constant that is not a valid pin mode is used as the mode */
  uint8_t bit_mask = digitalPinToBitMask(pin);
     712:	f0 f4       	brcc	.+60     	; 0x750 <pinMode+0x40>
check_valid_digital_pin():
     714:	90 e0       	ldi	r25, 0x00	; 0
pinMode():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:32
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

inline __attribute__((always_inline)) void check_valid_digital_pin(pin_size_t pin) {
  if (__builtin_constant_p(pin))
     716:	fc 01       	movw	r30, r24
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:136
  return port << 1;
}
void pinMode(uint8_t pin, uint8_t mode) {
  check_valid_digital_pin(pin);         /* generate compile error if a constant that is not a valid pin is used as the pin */
  check_valid_pin_mode(mode);           /* generate compile error if a constant that is not a valid pin mode is used as the mode */
  uint8_t bit_mask = digitalPinToBitMask(pin);
     718:	e8 50       	subi	r30, 0x08	; 8
     71a:	f1 46       	sbci	r31, 0x61	; 97
     71c:	20 81       	ld	r18, Z
     71e:	2f 3f       	cpi	r18, 0xFF	; 255
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:137
  if ((bit_mask == NOT_A_PIN) || (mode > 3)) {
     720:	b9 f0       	breq	.+46     	; 0x750 <pinMode+0x40>
     722:	fc 01       	movw	r30, r24
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:140
    return;                             /* ignore invalid pins passed at runtime */
  }
  volatile uint8_t * port_base = ((volatile uint8_t *) (uint16_t)(0x0400 | portToPortBaseOffset(digitalPinToPort(pin))));
     724:	e4 51       	subi	r30, 0x14	; 20
     726:	f1 46       	sbci	r31, 0x61	; 97
portToPortBaseOffset():
     728:	e0 81       	ld	r30, Z
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:130
  SREG = oldSREG; // re-enable interrupts
}

static inline uint8_t portToPortBaseOffset(uint8_t port);
static inline uint8_t portToPortBaseOffset(uint8_t port) {
  _SWAP(port);
     72a:	e2 95       	swap	r30
     72c:	ee 0f       	add	r30, r30
pinMode():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:131
  return port << 1;
     72e:	f0 e0       	ldi	r31, 0x00	; 0
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:140
  check_valid_pin_mode(mode);           /* generate compile error if a constant that is not a valid pin mode is used as the mode */
  uint8_t bit_mask = digitalPinToBitMask(pin);
  if ((bit_mask == NOT_A_PIN) || (mode > 3)) {
    return;                             /* ignore invalid pins passed at runtime */
  }
  volatile uint8_t * port_base = ((volatile uint8_t *) (uint16_t)(0x0400 | portToPortBaseOffset(digitalPinToPort(pin))));
     730:	f4 60       	ori	r31, 0x04	; 4
     732:	61 30       	cpi	r22, 0x01	; 1
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:141
  if (mode & 0x01) {
     734:	71 f4       	brne	.+28     	; 0x752 <pinMode+0x42>
     736:	21 83       	std	Z+1, r18	; 0x01
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:143
    // OUTPUT mode, so write DIRSET with the mask.
    *(port_base + 1) = bit_mask;
     738:	80 52       	subi	r24, 0x20	; 32
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:152
      *(port_base + 5) = bit_mask;
    } else if (mode == 0) {
      *(port_base + 6) = bit_mask;
    }
  }
  port_base +=(uint8_t) digitalPinToBitPosition(pin) | (uint8_t) 0x10;
     73a:	91 46       	sbci	r25, 0x61	; 97
     73c:	dc 01       	movw	r26, r24
     73e:	8c 91       	ld	r24, X
     740:	80 61       	ori	r24, 0x10	; 16
     742:	e8 0f       	add	r30, r24
     744:	f1 1d       	adc	r31, r1
     746:	80 81       	ld	r24, Z
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:153
  bit_mask = *port_base;
     748:	61 30       	cpi	r22, 0x01	; 1
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:154
  if (mode & 2) {
     74a:	31 f0       	breq	.+12     	; 0x758 <pinMode+0x48>
     74c:	88 60       	ori	r24, 0x08	; 8
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:155
    bit_mask |= 0x08;
     74e:	80 83       	st	Z, r24
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:159
  } else {
    bit_mask &= 0xF7;
  }
  *port_base = bit_mask;
     750:	08 95       	ret
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:160
}
     752:	22 83       	std	Z+2, r18	; 0x02
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:145
  volatile uint8_t * port_base = ((volatile uint8_t *) (uint16_t)(0x0400 | portToPortBaseOffset(digitalPinToPort(pin))));
  if (mode & 0x01) {
    // OUTPUT mode, so write DIRSET with the mask.
    *(port_base + 1) = bit_mask;
  } else {
    *(port_base + 2) = bit_mask;
     754:	25 83       	std	Z+5, r18	; 0x05
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:147
    if (mode == 2) {
      *(port_base + 5) = bit_mask;
     756:	f0 cf       	rjmp	.-32     	; 0x738 <pinMode+0x28>
     758:	87 7f       	andi	r24, 0xF7	; 247
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:157
  port_base +=(uint8_t) digitalPinToBitPosition(pin) | (uint8_t) 0x10;
  bit_mask = *port_base;
  if (mode & 2) {
    bit_mask |= 0x08;
  } else {
    bit_mask &= 0xF7;
     75a:	f9 cf       	rjmp	.-14     	; 0x74e <pinMode+0x3e>

0000075c <UartClass::begin(unsigned long, unsigned int)>:
_ZN9UartClass5beginEmj():
     75c:	8f 92       	push	r8
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:470
    _pin_set = 0;
  }
  return false;
}

void UartClass::begin(unsigned long baud, uint16_t options) {
     75e:	9f 92       	push	r9
     760:	af 92       	push	r10
     762:	bf 92       	push	r11
     764:	ef 92       	push	r14
     766:	ff 92       	push	r15
     768:	0f 93       	push	r16
     76a:	1f 93       	push	r17
     76c:	cf 93       	push	r28
     76e:	df 93       	push	r29
     770:	8c 01       	movw	r16, r24
     772:	4a 01       	movw	r8, r20
     774:	5b 01       	movw	r10, r22
     776:	e9 01       	movw	r28, r18
     778:	dc 01       	movw	r26, r24
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:473
  // Make sure no transmissions are ongoing and USART is disabled in case begin() is called by accident
  // without first calling end()
  if (_state & 1) {
     77a:	50 96       	adiw	r26, 0x10	; 16
     77c:	8c 91       	ld	r24, X
     77e:	50 97       	sbiw	r26, 0x10	; 16
     780:	80 ff       	sbrs	r24, 0
     782:	07 c0       	rjmp	.+14     	; 0x792 <UartClass::begin(unsigned long, unsigned int)+0x36>
     784:	ed 91       	ld	r30, X+
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:474
    this->end();
     786:	fc 91       	ld	r31, X
     788:	02 88       	ldd	r0, Z+18	; 0x12
     78a:	f3 89       	ldd	r31, Z+19	; 0x13
     78c:	e0 2d       	mov	r30, r0
     78e:	c8 01       	movw	r24, r16
     790:	09 95       	icall
     792:	c1 11       	cpse	r28, r1
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:478
  }

  uint8_t ctrlc = (uint8_t) options;
  if (ctrlc == 0) {                         // see if they passed anything in low byte or SERIAL_CONFIG_VALID.
     794:	01 c0       	rjmp	.+2      	; 0x798 <UartClass::begin(unsigned long, unsigned int)+0x3c>
     796:	c3 e0       	ldi	r28, 0x03	; 3
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:479
    ctrlc = (uint8_t)SERIAL_8N1;            // low byte of 0 could mean they want SERIAL_5N1. Or that they thought they'd
     798:	ec 2e       	mov	r14, r28
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:481
  }
  ctrlc &= ~0x04; // Now unset that 0x04 bit if it's set, because none of the values with it set are supported. We use that to smuggle in a "this constant was specified" for 5N1
     79a:	e8 94       	clt
     79c:	e2 f8       	bld	r14, 2
     79e:	fd 2e       	mov	r15, r29
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:482
  uint8_t ctrla = (uint8_t) (options >> 8);// CTRLA will get the remains of the options high byte.
     7a0:	cd 2f       	mov	r28, r29
     7a2:	d0 95       	com	r29
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:484
  uint16_t baud_setting = 0;                // at this point it should be able to reuse those 2 registers that it received options in!
  uint8_t   ctrlb = (~ctrla & 0xC0);        // Top two bits (TXEN RXEN), inverted so they match he sense in the registers.
     7a4:	d0 7c       	andi	r29, 0xC0	; 192
     7a6:	b1 ed       	ldi	r27, 0xD1	; 209
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:485
  if (baud   > F_CPU / 16) {            // if this baud is too fast for non-U2X
     7a8:	8b 16       	cp	r8, r27
     7aa:	b2 e1       	ldi	r27, 0x12	; 18
     7ac:	9b 06       	cpc	r9, r27
     7ae:	b3 e1       	ldi	r27, 0x13	; 19
     7b0:	ab 06       	cpc	r10, r27
     7b2:	b1 04       	cpc	r11, r1
     7b4:	28 f0       	brcs	.+10     	; 0x7c0 <UartClass::begin(unsigned long, unsigned int)+0x64>
     7b6:	d2 60       	ori	r29, 0x02	; 2
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:486
        ctrlb   |= USART_RXMODE0_bm;        // set the U2X bit in what will become CTRLB
     7b8:	b6 94       	lsr	r11
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:487
        baud   >>= 1;                       // And lower the baud rate by haldf
     7ba:	a7 94       	ror	r10
     7bc:	97 94       	ror	r9
     7be:	87 94       	ror	r8
     7c0:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:489
  }
  baud_setting = (((4 * F_CPU) / baud));  // And now the registers that baud was passed in are done.
     7c2:	74 eb       	ldi	r23, 0xB4	; 180
     7c4:	84 ec       	ldi	r24, 0xC4	; 196
     7c6:	94 e0       	ldi	r25, 0x04	; 4
     7c8:	a5 01       	movw	r20, r10
     7ca:	94 01       	movw	r18, r8
     7cc:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <__udivmodsi4>
     7d0:	20 34       	cpi	r18, 0x40	; 64
     7d2:	31 05       	cpc	r19, r1
     7d4:	10 f4       	brcc	.+4      	; 0x7da <UartClass::begin(unsigned long, unsigned int)+0x7e>
     7d6:	20 e4       	ldi	r18, 0x40	; 64
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	f2 fc       	sbrc	r15, 2
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:495
  if (baud_setting < 64)                      // so set to the maximum baud rate setting.
    baud_setting= 64;       // set the U2X bit in what will become CTRLB
  //} else if (baud < (F_CPU / 16800)) {      // Baud rate is too low
  //  baud_setting = 65535;                   // minimum baud rate.'
                                            // Baud setting done now we do the other options not in CTRLC;
  if (ctrla & 0x04) {                       // is ODME option set?
     7dc:	d8 60       	ori	r29, 0x08	; 8
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:496
    ctrlb |= USART_ODME_bm;                 // set the bit in what will become CTRLB
     7de:	8c 2f       	mov	r24, r28
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:498
  }
  ctrla &= 0x2B;                            // Only LBME and RS485 (both of them); will get written to CTRLA, but we leave the event bit.
     7e0:	8b 72       	andi	r24, 0x2B	; 43
     7e2:	d7 fd       	sbrc	r29, 7
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:499
  if (ctrlb & USART_RXEN_bm) {              // if RX is to be enabled
     7e4:	80 68       	ori	r24, 0x80	; 128
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:500
    ctrla  |= USART_RXCIE_bm;               // we will want to enable the ISR.
     7e6:	cd 2f       	mov	r28, r29
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:502
  }
  uint8_t setpinmask = ctrlb & 0xC8;        // ODME in bit 3, TX and RX enabled in bit 6, 7
     7e8:	c8 7c       	andi	r28, 0xC8	; 200
     7ea:	83 ff       	sbrs	r24, 3
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:503
  if ((ctrla & USART_LBME_bm) && (setpinmask == 0xC8)) { // if it's open-drain and loopback, need to set state bit 2.
     7ec:	07 c0       	rjmp	.+14     	; 0x7fc <UartClass::begin(unsigned long, unsigned int)+0xa0>
     7ee:	c8 3c       	cpi	r28, 0xC8	; 200
     7f0:	29 f4       	brne	.+10     	; 0x7fc <UartClass::begin(unsigned long, unsigned int)+0xa0>
     7f2:	f8 01       	movw	r30, r16
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:504
    _state                 |= 2;            // since that changes some behavior (RXC disabled while sending) // Now we should be able to ST _state.
     7f4:	90 89       	ldd	r25, Z+16	; 0x10
     7f6:	92 60       	ori	r25, 0x02	; 2
     7f8:	90 8b       	std	Z+16, r25	; 0x10
     7fa:	c8 ed       	ldi	r28, 0xD8	; 216
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:505
    setpinmask             |= 0x10;         // this tells _set_pins not to disturb the configuration on the RX pin.
     7fc:	80 fd       	sbrc	r24, 0
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:507
  }
  if (ctrla & USART_RS485_bm) {             // RS485 mode recorded here too... because we need to set
     7fe:	c1 60       	ori	r28, 0x01	; 1
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:508
    setpinmask             |= 0x01;         // set pin output if we need to do that. Datasheet isn't clear
     800:	ff b6       	in	r15, 0x3f	; 63
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:510
  }
  uint8_t oldSREG = SREG;
     802:	f8 94       	cli
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:511
  cli();
     804:	d8 01       	movw	r26, r16
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:512
  volatile USART_t* MyUSART = _hwserial_module;
     806:	1c 96       	adiw	r26, 0x0c	; 12
     808:	ed 91       	ld	r30, X+
     80a:	fc 91       	ld	r31, X
     80c:	16 82       	std	Z+6, r1	; 0x06
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:513
  (*MyUSART).CTRLB          = 0;            // gotta disable first - some things are enable-locked.
     80e:	e7 82       	std	Z+7, r14	; 0x07
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:514
  (*MyUSART).CTRLC          = ctrlc;        // No reason not to set first.
     810:	20 87       	std	Z+8, r18	; 0x08
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:515
  (*MyUSART).BAUD           = baud_setting; // Wish I could have set it long ago
     812:	31 87       	std	Z+9, r19	; 0x09
     814:	85 ff       	sbrs	r24, 5
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:516
  if (ctrla & 0x20) {                       // Now we have to do a bit of work
     816:	4d c0       	rjmp	.+154    	; 0x8b2 <__DATA_REGION_LENGTH__+0xb2>
     818:	cf 77       	andi	r28, 0x7F	; 127
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:517
    setpinmask             &= 0x7F;         // Remove the RX pin in this case because we get the input from elsewhere.
     81a:	91 e0       	ldi	r25, 0x01	; 1
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:518
    (*MyUSART).EVCTRL       = 1;            // enable event input - not clear from datasheet what's needed to
     81c:	94 87       	std	Z+12, r25	; 0x0c
     81e:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:519
    (*MyUSART).TXPLCTRL     = 0xFF;         // Disable pulse length encoding.
     820:	95 87       	std	Z+13, r25	; 0x0d
     822:	8f 7d       	andi	r24, 0xDF	; 223
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:523
  } else {
    (*MyUSART).EVCTRL       = 0;            // This needs to be turned off when not in use.
  }                                         // finally strip out the SERIAL_EVENT_RX bit which is in the DREIE
  (*MyUSART).CTRLA          = ctrla & 0xDF; // position, which we never set in begin.
     824:	85 83       	std	Z+5, r24	; 0x05
     826:	d6 83       	std	Z+6, r29	; 0x06
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:524
  (*MyUSART).CTRLB          = ctrlb;        // Set the all important CTRLB...
     828:	f8 01       	movw	r30, r16
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:525
  _set_pins(_module_number, _pin_set, setpinmask); // set up the pin(s)
     82a:	47 85       	ldd	r20, Z+15	; 0x0f
     82c:	86 85       	ldd	r24, Z+14	; 0x0e
_set_pins():
     82e:	90 91 e2 05 	lds	r25, 0x05E2	; 0x8005e2 <vtable for UartClass+0x7f66de>
_ZN9UartClass5beginEmj():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:532
}

void UartClass::_set_pins(uint8_t mod_nbr, uint8_t mux_set, uint8_t enmask) {
  // Set the mux register
  #if defined(PORTMUX_USARTROUTEA)
    uint8_t muxregval    = PORTMUX.USARTROUTEA;
     832:	2c ef       	ldi	r18, 0xFC	; 252
_set_pins():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:533
    muxregval           &= ~(mod_nbr ? 0x0C : 0x03);
     834:	81 11       	cpse	r24, r1
_ZN9UartClass5beginEmj():
     836:	23 ef       	ldi	r18, 0xF3	; 243
_set_pins():
     838:	92 23       	and	r25, r18
     83a:	24 2f       	mov	r18, r20
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:534
    PORTMUX.USARTROUTEA  = (muxregval) | (mux_set << (mod_nbr ? 2 : 0)); // shift muxset left if needed.
     83c:	30 e0       	ldi	r19, 0x00	; 0
_ZN9UartClass5beginEmj():
     83e:	50 e0       	ldi	r21, 0x00	; 0
_set_pins():
     840:	81 11       	cpse	r24, r1
_ZN9UartClass5beginEmj():
     842:	52 e0       	ldi	r21, 0x02	; 2
_set_pins():
     844:	b9 01       	movw	r22, r18
     846:	01 c0       	rjmp	.+2      	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
     848:	66 0f       	add	r22, r22
     84a:	5a 95       	dec	r21
     84c:	ea f7       	brpl	.-6      	; 0x848 <__DATA_REGION_LENGTH__+0x48>
     84e:	96 2b       	or	r25, r22
     850:	90 93 e2 05 	sts	0x05E2, r25	; 0x8005e2 <vtable for UartClass+0x7f66de>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:544
    } else {
      PORTMUX.CTRLB       &= 0xFE;
    }
  #endif
  #if MEGATINYCORE_SERIES == 2
    if (mux_set == 3) { // not connected to pins...
     854:	43 30       	cpi	r20, 0x03	; 3
     856:	09 f1       	breq	.+66     	; 0x89a <__DATA_REGION_LENGTH__+0x9a>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:548
      return;           // so we are done!
    }
  #endif
  const uint8_t* muxrow = &(_usart_pins[mod_nbr + mux_set][0]);
     858:	82 0f       	add	r24, r18
     85a:	93 2f       	mov	r25, r19
     85c:	91 1d       	adc	r25, r1
     85e:	88 0f       	add	r24, r24
     860:	99 1f       	adc	r25, r25
     862:	88 0f       	add	r24, r24
     864:	99 1f       	adc	r25, r25
     866:	8c 01       	movw	r16, r24
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:549
  if ((enmask & 0x40 && !(enmask & 0x08))) {
     868:	08 52       	subi	r16, 0x28	; 40
     86a:	11 46       	sbci	r17, 0x61	; 97
     86c:	c6 ff       	sbrs	r28, 6
     86e:	23 c0       	rjmp	.+70     	; 0x8b6 <__DATA_REGION_LENGTH__+0xb6>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:550
    pinMode(muxrow[0], OUTPUT); // If and only if TX is enabled and open drain isn't should the TX pin be output.
     870:	c3 fd       	sbrc	r28, 3
     872:	21 c0       	rjmp	.+66     	; 0x8b6 <__DATA_REGION_LENGTH__+0xb6>
     874:	61 e0       	ldi	r22, 0x01	; 1
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:553
  } else if (enmask & 0x50) { // if it is enabled but is in open drain mode, or is disabled, but loopback is enabled
    // TX should be INPUT_PULLUP.
    pinMode(muxrow[0], INPUT_PULLUP);
     876:	d8 01       	movw	r26, r16
     878:	8c 91       	ld	r24, X
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:555
  }
  if (enmask & 0x80 && !(enmask & 0x10)) {
     87a:	4a df       	rcall	.-364    	; 0x710 <pinMode>
     87c:	c7 ff       	sbrs	r28, 7
     87e:	07 c0       	rjmp	.+14     	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
     880:	c4 fd       	sbrc	r28, 4
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:557
    // Likewise if RX is enabled, unless loopback mode is too (in which case we caught it above, it should be pulled up
    pinMode(muxrow[1], INPUT_PULLUP);
     882:	05 c0       	rjmp	.+10     	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
     884:	62 e0       	ldi	r22, 0x02	; 2
     886:	d8 01       	movw	r26, r16
     888:	11 96       	adiw	r26, 0x01	; 1
     88a:	8c 91       	ld	r24, X
     88c:	41 df       	rcall	.-382    	; 0x710 <pinMode>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:559
  }
  if (enmask & 0x01) { // finally if RS485 mode is enabled, we make XDIR output, otherwise it can't drive the pin.
     88e:	c0 ff       	sbrs	r28, 0
     890:	04 c0       	rjmp	.+8      	; 0x89a <__DATA_REGION_LENGTH__+0x9a>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:560
    pinMode(muxrow[3], OUTPUT); // make XDIR output.
     892:	61 e0       	ldi	r22, 0x01	; 1
     894:	f8 01       	movw	r30, r16
     896:	83 81       	ldd	r24, Z+3	; 0x03
     898:	3b df       	rcall	.-394    	; 0x710 <pinMode>
_ZN9UartClass5beginEmj():
     89a:	ff be       	out	0x3f, r15	; 63
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:526
    (*MyUSART).EVCTRL       = 0;            // This needs to be turned off when not in use.
  }                                         // finally strip out the SERIAL_EVENT_RX bit which is in the DREIE
  (*MyUSART).CTRLA          = ctrla & 0xDF; // position, which we never set in begin.
  (*MyUSART).CTRLB          = ctrlb;        // Set the all important CTRLB...
  _set_pins(_module_number, _pin_set, setpinmask); // set up the pin(s)
  SREG = oldSREG;                             // re-enable interrupts, and we're done.
     89c:	df 91       	pop	r29
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:527
}
     89e:	cf 91       	pop	r28
     8a0:	1f 91       	pop	r17
     8a2:	0f 91       	pop	r16
     8a4:	ff 90       	pop	r15
     8a6:	ef 90       	pop	r14
     8a8:	bf 90       	pop	r11
     8aa:	af 90       	pop	r10
     8ac:	9f 90       	pop	r9
     8ae:	8f 90       	pop	r8
     8b0:	08 95       	ret
     8b2:	14 86       	std	Z+12, r1	; 0x0c
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:521
  if (ctrla & 0x20) {                       // Now we have to do a bit of work
    setpinmask             &= 0x7F;         // Remove the RX pin in this case because we get the input from elsewhere.
    (*MyUSART).EVCTRL       = 1;            // enable event input - not clear from datasheet what's needed to
    (*MyUSART).TXPLCTRL     = 0xFF;         // Disable pulse length encoding.
  } else {
    (*MyUSART).EVCTRL       = 0;            // This needs to be turned off when not in use.
     8b4:	b6 cf       	rjmp	.-148    	; 0x822 <__DATA_REGION_LENGTH__+0x22>
_set_pins():
     8b6:	2c 2f       	mov	r18, r28
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:551
    }
  #endif
  const uint8_t* muxrow = &(_usart_pins[mod_nbr + mux_set][0]);
  if ((enmask & 0x40 && !(enmask & 0x08))) {
    pinMode(muxrow[0], OUTPUT); // If and only if TX is enabled and open drain isn't should the TX pin be output.
  } else if (enmask & 0x50) { // if it is enabled but is in open drain mode, or is disabled, but loopback is enabled
     8b8:	20 75       	andi	r18, 0x50	; 80
     8ba:	01 f3       	breq	.-64     	; 0x87c <__DATA_REGION_LENGTH__+0x7c>
     8bc:	88 52       	subi	r24, 0x28	; 40
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:553
    // TX should be INPUT_PULLUP.
    pinMode(muxrow[0], INPUT_PULLUP);
     8be:	91 46       	sbci	r25, 0x61	; 97
     8c0:	62 e0       	ldi	r22, 0x02	; 2
     8c2:	fc 01       	movw	r30, r24
     8c4:	80 81       	ld	r24, Z
     8c6:	d9 cf       	rjmp	.-78     	; 0x87a <__DATA_REGION_LENGTH__+0x7a>

000008c8 <GetHight(float) [clone .constprop.6]>:
_Z8GetHightf.constprop.6():
     8c8:	2f 92       	push	r2
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:365
  float altitude = 44330.0 * (1.0 - pow(*preassure / seaLevelhPa, 0.1903));

  return altitude;
}

float GetHight(float initialHight)
     8ca:	3f 92       	push	r3
     8cc:	4f 92       	push	r4
     8ce:	5f 92       	push	r5
     8d0:	6f 92       	push	r6
     8d2:	7f 92       	push	r7
     8d4:	8f 92       	push	r8
     8d6:	9f 92       	push	r9
     8d8:	af 92       	push	r10
     8da:	bf 92       	push	r11
     8dc:	cf 92       	push	r12
     8de:	df 92       	push	r13
     8e0:	ef 92       	push	r14
     8e2:	ff 92       	push	r15
     8e4:	0f 93       	push	r16
     8e6:	1f 93       	push	r17
     8e8:	cf 93       	push	r28
     8ea:	df 93       	push	r29
     8ec:	cd b7       	in	r28, 0x3d	; 61
     8ee:	de b7       	in	r29, 0x3e	; 62
     8f0:	e1 97       	sbiw	r28, 0x31	; 49
     8f2:	cd bf       	out	0x3d, r28	; 61
     8f4:	de bf       	out	0x3e, r29	; 62
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:372
  uint8_t values[6];
  int32_t t_fine;
  float temperature;
  // do
  // {
  ReadRegisterToUintArray(PREASSURE_REGISTER, 6, CS_BMP, values);
     8f6:	ae 01       	movw	r20, r28
     8f8:	4f 5f       	subi	r20, 0xFF	; 255
     8fa:	5f 4f       	sbci	r21, 0xFF	; 255
     8fc:	66 e0       	ldi	r22, 0x06	; 6
     8fe:	87 ef       	ldi	r24, 0xF7	; 247
     900:	e6 de       	rcall	.-564    	; 0x6ce <ReadRegisterToUintArray(unsigned char, unsigned char, unsigned char, unsigned char*) [clone .constprop.12]>
ReadTemperature():
     902:	2c 81       	ldd	r18, Y+4	; 0x04
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:302

//---------Calculationg Temperature and preassure------------------------

float ReadTemperature(volatile uint8_t *values, int32_t *t_fine, struct BMP280_HandleTypedef _bmp280_calib)
{
  int32_t adc_T = values[3];
     904:	4d 81       	ldd	r20, Y+5	; 0x05
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:304
  adc_T <<= 16;
  adc_T |= ((values[4]) << 8);
     906:	8e 81       	ldd	r24, Y+6	; 0x06
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:305
  adc_T |= ((values[5]));
     908:	90 e0       	ldi	r25, 0x00	; 0
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:303
//---------Calculationg Temperature and preassure------------------------

float ReadTemperature(volatile uint8_t *values, int32_t *t_fine, struct BMP280_HandleTypedef _bmp280_calib)
{
  int32_t adc_T = values[3];
  adc_T <<= 16;
     90a:	b0 e0       	ldi	r27, 0x00	; 0
     90c:	a2 2f       	mov	r26, r18
     90e:	50 e0       	ldi	r21, 0x00	; 0
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:304
  adc_T |= ((values[4]) << 8);
     910:	54 2f       	mov	r21, r20
     912:	44 27       	eor	r20, r20
     914:	05 2e       	mov	r0, r21
     916:	00 0c       	add	r0, r0
     918:	66 0b       	sbc	r22, r22
     91a:	77 0b       	sbc	r23, r23
     91c:	84 2b       	or	r24, r20
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:305
  adc_T |= ((values[5]));
     91e:	95 2b       	or	r25, r21
     920:	a6 2b       	or	r26, r22
     922:	b7 2b       	or	r27, r23
     924:	40 91 14 38 	lds	r20, 0x3814	; 0x803814 <calibrationData>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:309
  adc_T >>= 4;

  int32_t var1, var2;
  var1 = ((((adc_T >> 3) - ((int32_t)_bmp280_calib.dig_T1 << 1))) *
     928:	50 91 15 38 	lds	r21, 0x3815	; 0x803815 <calibrationData+0x1>
     92c:	70 e0       	ldi	r23, 0x00	; 0
     92e:	60 e0       	ldi	r22, 0x00	; 0
     930:	c9 2e       	mov	r12, r25
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:313
          ((int32_t)_bmp280_calib.dig_T2)) >>
         11;

  var2 = (((((adc_T >> 4) - ((int32_t)_bmp280_calib.dig_T1)) *
     932:	da 2e       	mov	r13, r26
     934:	eb 2e       	mov	r14, r27
     936:	ff 24       	eor	r15, r15
     938:	e7 fc       	sbrc	r14, 7
     93a:	fa 94       	dec	r15
     93c:	c4 1a       	sub	r12, r20
     93e:	d5 0a       	sbc	r13, r21
     940:	e6 0a       	sbc	r14, r22
     942:	f7 0a       	sbc	r15, r23
     944:	27 e0       	ldi	r18, 0x07	; 7
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:309
  adc_T |= ((values[4]) << 8);
  adc_T |= ((values[5]));
  adc_T >>= 4;

  int32_t var1, var2;
  var1 = ((((adc_T >> 3) - ((int32_t)_bmp280_calib.dig_T1 << 1))) *
     946:	b5 95       	asr	r27
     948:	a7 95       	ror	r26
     94a:	97 95       	ror	r25
     94c:	87 95       	ror	r24
     94e:	2a 95       	dec	r18
     950:	d1 f7       	brne	.-12     	; 0x946 <GetHight(float) [clone .constprop.6]+0x7e>
     952:	44 0f       	add	r20, r20
     954:	55 1f       	adc	r21, r21
     956:	66 1f       	adc	r22, r22
     958:	77 1f       	adc	r23, r23
     95a:	4c 01       	movw	r8, r24
     95c:	5d 01       	movw	r10, r26
     95e:	84 1a       	sub	r8, r20
     960:	95 0a       	sbc	r9, r21
     962:	a6 0a       	sbc	r10, r22
     964:	b7 0a       	sbc	r11, r23
     966:	a5 01       	movw	r20, r10
     968:	94 01       	movw	r18, r8
     96a:	a0 91 16 38 	lds	r26, 0x3816	; 0x803816 <calibrationData+0x2>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:310
          ((int32_t)_bmp280_calib.dig_T2)) >>
     96e:	b0 91 17 38 	lds	r27, 0x3817	; 0x803817 <calibrationData+0x3>
     972:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <__mulshisi3>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:309
  adc_T |= ((values[4]) << 8);
  adc_T |= ((values[5]));
  adc_T >>= 4;

  int32_t var1, var2;
  var1 = ((((adc_T >> 3) - ((int32_t)_bmp280_calib.dig_T1 << 1))) *
     976:	4b 01       	movw	r8, r22
     978:	5c 01       	movw	r10, r24
     97a:	4b e0       	ldi	r20, 0x0B	; 11
     97c:	b5 94       	asr	r11
     97e:	a7 94       	ror	r10
     980:	97 94       	ror	r9
     982:	87 94       	ror	r8
     984:	4a 95       	dec	r20
     986:	d1 f7       	brne	.-12     	; 0x97c <GetHight(float) [clone .constprop.6]+0xb4>
     988:	a7 01       	movw	r20, r14
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:313
          ((int32_t)_bmp280_calib.dig_T2)) >>
         11;

  var2 = (((((adc_T >> 4) - ((int32_t)_bmp280_calib.dig_T1)) *
     98a:	96 01       	movw	r18, r12
     98c:	c7 01       	movw	r24, r14
     98e:	b6 01       	movw	r22, r12
     990:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <__mulsi3>
     994:	9b 01       	movw	r18, r22
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:314
            ((adc_T >> 4) - ((int32_t)_bmp280_calib.dig_T1))) >>
     996:	ac 01       	movw	r20, r24
     998:	6c e0       	ldi	r22, 0x0C	; 12
     99a:	55 95       	asr	r21
     99c:	47 95       	ror	r20
     99e:	37 95       	ror	r19
     9a0:	27 95       	ror	r18
     9a2:	6a 95       	dec	r22
     9a4:	d1 f7       	brne	.-12     	; 0x99a <GetHight(float) [clone .constprop.6]+0xd2>
     9a6:	a0 91 18 38 	lds	r26, 0x3818	; 0x803818 <calibrationData+0x4>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:316
           12) *
          ((int32_t)_bmp280_calib.dig_T3)) >>
     9aa:	b0 91 19 38 	lds	r27, 0x3819	; 0x803819 <calibrationData+0x5>
     9ae:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <__mulshisi3>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:315
          ((int32_t)_bmp280_calib.dig_T2)) >>
         11;

  var2 = (((((adc_T >> 4) - ((int32_t)_bmp280_calib.dig_T1)) *
            ((adc_T >> 4) - ((int32_t)_bmp280_calib.dig_T1))) >>
           12) *
     9b2:	ee e0       	ldi	r30, 0x0E	; 14
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:313
  int32_t var1, var2;
  var1 = ((((adc_T >> 3) - ((int32_t)_bmp280_calib.dig_T1 << 1))) *
          ((int32_t)_bmp280_calib.dig_T2)) >>
         11;

  var2 = (((((adc_T >> 4) - ((int32_t)_bmp280_calib.dig_T1)) *
     9b4:	95 95       	asr	r25
     9b6:	87 95       	ror	r24
     9b8:	77 95       	ror	r23
     9ba:	67 95       	ror	r22
     9bc:	ea 95       	dec	r30
     9be:	d1 f7       	brne	.-12     	; 0x9b4 <GetHight(float) [clone .constprop.6]+0xec>
     9c0:	95 01       	movw	r18, r10
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:318
            ((adc_T >> 4) - ((int32_t)_bmp280_calib.dig_T1))) >>
           12) *
          ((int32_t)_bmp280_calib.dig_T3)) >>
         14;
  int32_t sum = var1 + var2;
     9c2:	84 01       	movw	r16, r8
     9c4:	06 0f       	add	r16, r22
     9c6:	17 1f       	adc	r17, r23
     9c8:	28 1f       	adc	r18, r24
     9ca:	39 1f       	adc	r19, r25
     9cc:	0f 87       	std	Y+15, r16	; 0x0f
     9ce:	18 8b       	std	Y+16, r17	; 0x10
     9d0:	29 8b       	std	Y+17, r18	; 0x11
     9d2:	3a 8b       	std	Y+18, r19	; 0x12
     9d4:	80 90 20 38 	lds	r8, 0x3820	; 0x803820 <calibrationData+0xc>
     9d8:	88 aa       	std	Y+48, r8	; 0x30
     9da:	90 90 21 38 	lds	r9, 0x3821	; 0x803821 <calibrationData+0xd>
     9de:	9b a2       	std	Y+35, r9	; 0x23
     9e0:	80 90 22 38 	lds	r8, 0x3822	; 0x803822 <calibrationData+0xe>
     9e4:	8e a6       	std	Y+46, r8	; 0x2e
     9e6:	90 90 23 38 	lds	r9, 0x3823	; 0x803823 <calibrationData+0xf>
     9ea:	9c 8e       	std	Y+28, r9	; 0x1c
     9ec:	80 90 24 38 	lds	r8, 0x3824	; 0x803824 <calibrationData+0x10>
     9f0:	89 aa       	std	Y+49, r8	; 0x31
     9f2:	90 90 25 38 	lds	r9, 0x3825	; 0x803825 <calibrationData+0x11>
     9f6:	9b 8a       	std	Y+19, r9	; 0x13
     9f8:	80 90 26 38 	lds	r8, 0x3826	; 0x803826 <calibrationData+0x12>
     9fc:	8f a6       	std	Y+47, r8	; 0x2f
     9fe:	90 90 27 38 	lds	r9, 0x3827	; 0x803827 <calibrationData+0x13>
     a02:	9a a2       	std	Y+34, r9	; 0x22
     a04:	80 90 28 38 	lds	r8, 0x3828	; 0x803828 <calibrationData+0x14>
     a08:	8c a6       	std	Y+44, r8	; 0x2c
     a0a:	90 90 29 38 	lds	r9, 0x3829	; 0x803829 <calibrationData+0x15>
     a0e:	9a 8e       	std	Y+26, r9	; 0x1a
     a10:	80 90 2a 38 	lds	r8, 0x382A	; 0x80382a <calibrationData+0x16>
     a14:	8d a6       	std	Y+45, r8	; 0x2d
     a16:	90 90 2b 38 	lds	r9, 0x382B	; 0x80382b <calibrationData+0x17>
     a1a:	9b 8e       	std	Y+27, r9	; 0x1b
ReadPreassure():
     a1c:	89 80       	ldd	r8, Y+1	; 0x01
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:328

float ReadPreassure(volatile uint8_t values[6], int32_t t_fine, BMP280_HandleTypedef _bmp280_calib)
{
  int64_t p, var1, var2;
  // pressure
  int32_t adc_P = values[0];
     a1e:	8e 8a       	std	Y+22, r8	; 0x16
     a20:	9a 80       	ldd	r9, Y+2	; 0x02
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:330
  adc_P <<= 16;
  adc_P |= (values[1] << 8);
     a22:	9a a6       	std	Y+42, r9	; 0x2a
     a24:	8b 80       	ldd	r8, Y+3	; 0x03
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:331
  adc_P |= values[2];
     a26:	8b a6       	std	Y+43, r8	; 0x2b
     a28:	68 01       	movw	r12, r16
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:334
  adc_P >>= 4;

  var1 = ((int64_t)t_fine) - 128000;
     a2a:	79 01       	movw	r14, r18
     a2c:	ff 0c       	add	r15, r15
     a2e:	cc 08       	sbc	r12, r12
     a30:	dc 2c       	mov	r13, r12
     a32:	76 01       	movw	r14, r12
     a34:	2f 85       	ldd	r18, Y+15	; 0x0f
     a36:	38 89       	ldd	r19, Y+16	; 0x10
     a38:	49 89       	ldd	r20, Y+17	; 0x11
     a3a:	5a 89       	ldd	r21, Y+18	; 0x12
     a3c:	6c 2d       	mov	r22, r12
     a3e:	7c 2d       	mov	r23, r12
     a40:	8c 2d       	mov	r24, r12
     a42:	9c 2d       	mov	r25, r12
     a44:	34 5f       	subi	r19, 0xF4	; 244
     a46:	41 40       	sbci	r20, 0x01	; 1
     a48:	51 09       	sbc	r21, r1
     a4a:	61 09       	sbc	r22, r1
     a4c:	71 09       	sbc	r23, r1
     a4e:	81 09       	sbc	r24, r1
     a50:	91 09       	sbc	r25, r1
     a52:	2f 83       	std	Y+7, r18	; 0x07
     a54:	38 87       	std	Y+8, r19	; 0x08
     a56:	49 87       	std	Y+9, r20	; 0x09
     a58:	5a 87       	std	Y+10, r21	; 0x0a
     a5a:	6b 87       	std	Y+11, r22	; 0x0b
     a5c:	7c 87       	std	Y+12, r23	; 0x0c
     a5e:	8d 87       	std	Y+13, r24	; 0x0d
     a60:	9e 87       	std	Y+14, r25	; 0x0e
     a62:	59 01       	movw	r10, r18
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:335
  var2 = var1 * var1 * (int64_t)_bmp280_calib.dig_P6;
     a64:	6a 01       	movw	r12, r20
     a66:	7b 01       	movw	r14, r22
     a68:	8c 01       	movw	r16, r24
     a6a:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <__muldi3>
     a6e:	2c 8b       	std	Y+20, r18	; 0x14
     a70:	3d 8b       	std	Y+21, r19	; 0x15
     a72:	4c a3       	std	Y+36, r20	; 0x24
     a74:	5d a3       	std	Y+37, r21	; 0x25
     a76:	6e a3       	std	Y+38, r22	; 0x26
     a78:	7f a3       	std	Y+39, r23	; 0x27
     a7a:	88 a7       	std	Y+40, r24	; 0x28
     a7c:	99 a7       	std	Y+41, r25	; 0x29
     a7e:	30 91 1d 38 	lds	r19, 0x381D	; 0x80381d <calibrationData+0x9>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:339
  var2 = var2 + ((var1 * (int64_t)_bmp280_calib.dig_P5) << 17);
  var2 = var2 + (((int64_t)_bmp280_calib.dig_P4) << 35);
  var1 = ((var1 * var1 * (int64_t)_bmp280_calib.dig_P3) >> 8) +
         ((var1 * (int64_t)_bmp280_calib.dig_P2) << 12);
     a82:	20 91 1c 38 	lds	r18, 0x381C	; 0x80381c <calibrationData+0x8>
     a86:	93 2f       	mov	r25, r19
     a88:	99 0f       	add	r25, r25
     a8a:	99 0b       	sbc	r25, r25
     a8c:	49 2f       	mov	r20, r25
     a8e:	59 2f       	mov	r21, r25
     a90:	69 2f       	mov	r22, r25
     a92:	79 2f       	mov	r23, r25
     a94:	89 2f       	mov	r24, r25
     a96:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <__muldi3>
     a9a:	0c e0       	ldi	r16, 0x0C	; 12
     a9c:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <__ashldi3>
     aa0:	19 01       	movw	r2, r18
     aa2:	2a 01       	movw	r4, r20
     aa4:	3b 01       	movw	r6, r22
     aa6:	4c 01       	movw	r8, r24
     aa8:	30 91 1f 38 	lds	r19, 0x381F	; 0x80381f <calibrationData+0xb>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:338

  var1 = ((int64_t)t_fine) - 128000;
  var2 = var1 * var1 * (int64_t)_bmp280_calib.dig_P6;
  var2 = var2 + ((var1 * (int64_t)_bmp280_calib.dig_P5) << 17);
  var2 = var2 + (((int64_t)_bmp280_calib.dig_P4) << 35);
  var1 = ((var1 * var1 * (int64_t)_bmp280_calib.dig_P3) >> 8) +
     aac:	20 91 1e 38 	lds	r18, 0x381E	; 0x80381e <calibrationData+0xa>
     ab0:	93 2f       	mov	r25, r19
     ab2:	99 0f       	add	r25, r25
     ab4:	99 0b       	sbc	r25, r25
     ab6:	ac 88       	ldd	r10, Y+20	; 0x14
     ab8:	bd 88       	ldd	r11, Y+21	; 0x15
     aba:	cc a0       	ldd	r12, Y+36	; 0x24
     abc:	dd a0       	ldd	r13, Y+37	; 0x25
     abe:	ee a0       	ldd	r14, Y+38	; 0x26
     ac0:	ff a0       	ldd	r15, Y+39	; 0x27
     ac2:	08 a5       	ldd	r16, Y+40	; 0x28
     ac4:	19 a5       	ldd	r17, Y+41	; 0x29
     ac6:	49 2f       	mov	r20, r25
     ac8:	59 2f       	mov	r21, r25
     aca:	69 2f       	mov	r22, r25
     acc:	79 2f       	mov	r23, r25
     ace:	89 2f       	mov	r24, r25
     ad0:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <__muldi3>
     ad4:	08 e0       	ldi	r16, 0x08	; 8
     ad6:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <__ashrdi3>
     ada:	51 01       	movw	r10, r2
     adc:	62 01       	movw	r12, r4
     ade:	73 01       	movw	r14, r6
     ae0:	84 01       	movw	r16, r8
     ae2:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <__adddi3>
     ae6:	70 58       	subi	r23, 0x80	; 128
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:341
         ((var1 * (int64_t)_bmp280_calib.dig_P2) << 12);
  var1 =
      (((((int64_t)1) << 47) + var1)) * ((int64_t)_bmp280_calib.dig_P1) >> 33;
     ae8:	8f 4f       	sbci	r24, 0xFF	; 255
     aea:	9f 4f       	sbci	r25, 0xFF	; 255
     aec:	20 90 1a 38 	lds	r2, 0x381A	; 0x80381a <calibrationData+0x6>
     af0:	30 90 1b 38 	lds	r3, 0x381B	; 0x80381b <calibrationData+0x7>
     af4:	51 01       	movw	r10, r2
     af6:	c1 2c       	mov	r12, r1
     af8:	d1 2c       	mov	r13, r1
     afa:	e1 2c       	mov	r14, r1
     afc:	f1 2c       	mov	r15, r1
     afe:	00 e0       	ldi	r16, 0x00	; 0
     b00:	10 e0       	ldi	r17, 0x00	; 0
     b02:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <__muldi3>
     b06:	01 e2       	ldi	r16, 0x21	; 33
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:340
  var2 = var1 * var1 * (int64_t)_bmp280_calib.dig_P6;
  var2 = var2 + ((var1 * (int64_t)_bmp280_calib.dig_P5) << 17);
  var2 = var2 + (((int64_t)_bmp280_calib.dig_P4) << 35);
  var1 = ((var1 * var1 * (int64_t)_bmp280_calib.dig_P3) >> 8) +
         ((var1 * (int64_t)_bmp280_calib.dig_P2) << 12);
  var1 =
     b08:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <__ashrdi3>
     b0c:	2d 8f       	std	Y+29, r18	; 0x1d
     b0e:	3e 8f       	std	Y+30, r19	; 0x1e
     b10:	4f 8f       	std	Y+31, r20	; 0x1f
     b12:	58 a3       	std	Y+32, r21	; 0x20
     b14:	69 a3       	std	Y+33, r22	; 0x21
     b16:	27 2e       	mov	r2, r23
     b18:	38 2e       	mov	r3, r24
     b1a:	49 2e       	mov	r4, r25
     b1c:	a0 e0       	ldi	r26, 0x00	; 0
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:343
      (((((int64_t)1) << 47) + var1)) * ((int64_t)_bmp280_calib.dig_P1) >> 33;

  if (var1 == 0)
     b1e:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <__cmpdi2_s8>
     b22:	09 f4       	brne	.+2      	; 0xb26 <GetHight(float) [clone .constprop.6]+0x25e>
     b24:	7e c1       	rjmp	.+764    	; 0xe22 <GetHight(float) [clone .constprop.6]+0x55a>
     b26:	9b a4       	ldd	r9, Y+43	; 0x2b
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:329
float ReadPreassure(volatile uint8_t values[6], int32_t t_fine, BMP280_HandleTypedef _bmp280_calib)
{
  int64_t p, var1, var2;
  // pressure
  int32_t adc_P = values[0];
  adc_P <<= 16;
     b28:	49 2d       	mov	r20, r9
     b2a:	50 e0       	ldi	r21, 0x00	; 0
     b2c:	70 e0       	ldi	r23, 0x00	; 0
     b2e:	60 e0       	ldi	r22, 0x00	; 0
     b30:	8e 88       	ldd	r8, Y+22	; 0x16
     b32:	68 29       	or	r22, r8
     b34:	9a a4       	ldd	r9, Y+42	; 0x2a
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:330
  adc_P |= (values[1] << 8);
     b36:	89 2d       	mov	r24, r9
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	98 2f       	mov	r25, r24
     b3c:	88 27       	eor	r24, r24
     b3e:	09 2e       	mov	r0, r25
     b40:	00 0c       	add	r0, r0
     b42:	aa 0b       	sbc	r26, r26
     b44:	bb 0b       	sbc	r27, r27
     b46:	4c 01       	movw	r8, r24
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:331
  adc_P |= values[2];
     b48:	5d 01       	movw	r10, r26
     b4a:	84 2a       	or	r8, r20
     b4c:	95 2a       	or	r9, r21
     b4e:	a6 2a       	or	r10, r22
     b50:	b7 2a       	or	r11, r23
     b52:	8e 8a       	std	Y+22, r8	; 0x16
     b54:	9f 8a       	std	Y+23, r9	; 0x17
     b56:	a8 8e       	std	Y+24, r10	; 0x18
     b58:	b9 8e       	std	Y+25, r11	; 0x19
     b5a:	29 a9       	ldd	r18, Y+49	; 0x31
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:335
  adc_P >>= 4;

  var1 = ((int64_t)t_fine) - 128000;
  var2 = var1 * var1 * (int64_t)_bmp280_calib.dig_P6;
     b5c:	9b 89       	ldd	r25, Y+19	; 0x13
     b5e:	99 0f       	add	r25, r25
     b60:	99 0b       	sbc	r25, r25
     b62:	ac 88       	ldd	r10, Y+20	; 0x14
     b64:	bd 88       	ldd	r11, Y+21	; 0x15
     b66:	cc a0       	ldd	r12, Y+36	; 0x24
     b68:	dd a0       	ldd	r13, Y+37	; 0x25
     b6a:	ee a0       	ldd	r14, Y+38	; 0x26
     b6c:	ff a0       	ldd	r15, Y+39	; 0x27
     b6e:	08 a5       	ldd	r16, Y+40	; 0x28
     b70:	19 a5       	ldd	r17, Y+41	; 0x29
     b72:	3b 89       	ldd	r19, Y+19	; 0x13
     b74:	49 2f       	mov	r20, r25
     b76:	59 2f       	mov	r21, r25
     b78:	69 2f       	mov	r22, r25
     b7a:	79 2f       	mov	r23, r25
     b7c:	89 2f       	mov	r24, r25
     b7e:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <__muldi3>
     b82:	2b 8b       	std	Y+19, r18	; 0x13
     b84:	3c 8b       	std	Y+20, r19	; 0x14
     b86:	4d 8b       	std	Y+21, r20	; 0x15
     b88:	55 2e       	mov	r5, r21
     b8a:	3b 01       	movw	r6, r22
     b8c:	4c 01       	movw	r8, r24
     b8e:	2e a5       	ldd	r18, Y+46	; 0x2e
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:336
  var2 = var2 + ((var1 * (int64_t)_bmp280_calib.dig_P5) << 17);
     b90:	9c 8d       	ldd	r25, Y+28	; 0x1c
     b92:	99 0f       	add	r25, r25
     b94:	99 0b       	sbc	r25, r25
     b96:	af 80       	ldd	r10, Y+7	; 0x07
     b98:	b8 84       	ldd	r11, Y+8	; 0x08
     b9a:	c9 84       	ldd	r12, Y+9	; 0x09
     b9c:	da 84       	ldd	r13, Y+10	; 0x0a
     b9e:	eb 84       	ldd	r14, Y+11	; 0x0b
     ba0:	fc 84       	ldd	r15, Y+12	; 0x0c
     ba2:	0d 85       	ldd	r16, Y+13	; 0x0d
     ba4:	1e 85       	ldd	r17, Y+14	; 0x0e
     ba6:	3c 8d       	ldd	r19, Y+28	; 0x1c
     ba8:	49 2f       	mov	r20, r25
     baa:	59 2f       	mov	r21, r25
     bac:	69 2f       	mov	r22, r25
     bae:	79 2f       	mov	r23, r25
     bb0:	89 2f       	mov	r24, r25
     bb2:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <__muldi3>
     bb6:	01 e1       	ldi	r16, 0x11	; 17
     bb8:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <__ashldi3>
     bbc:	ab 88       	ldd	r10, Y+19	; 0x13
     bbe:	bc 88       	ldd	r11, Y+20	; 0x14
     bc0:	cd 88       	ldd	r12, Y+21	; 0x15
     bc2:	d5 2c       	mov	r13, r5
     bc4:	73 01       	movw	r14, r6
     bc6:	84 01       	movw	r16, r8
     bc8:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <__adddi3>
     bcc:	59 01       	movw	r10, r18
     bce:	6a 01       	movw	r12, r20
     bd0:	7b 01       	movw	r14, r22
     bd2:	58 2e       	mov	r5, r24
     bd4:	19 2f       	mov	r17, r25
     bd6:	4e 89       	ldd	r20, Y+22	; 0x16
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:332
  // pressure
  int32_t adc_P = values[0];
  adc_P <<= 16;
  adc_P |= (values[1] << 8);
  adc_P |= values[2];
  adc_P >>= 4;
     bd8:	5f 89       	ldd	r21, Y+23	; 0x17
     bda:	68 8d       	ldd	r22, Y+24	; 0x18
     bdc:	79 8d       	ldd	r23, Y+25	; 0x19
     bde:	e4 e0       	ldi	r30, 0x04	; 4
     be0:	75 95       	asr	r23
     be2:	67 95       	ror	r22
     be4:	57 95       	ror	r21
     be6:	47 95       	ror	r20
     be8:	ea 95       	dec	r30
     bea:	d1 f7       	brne	.-12     	; 0xbe0 <GetHight(float) [clone .constprop.6]+0x318>
     bec:	80 e0       	ldi	r24, 0x00	; 0
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:347

  if (var1 == 0)
  {
    return 0; // avoid exception caused by division by zero
  }
  p = 1048576 - adc_P;
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	a0 e1       	ldi	r26, 0x10	; 16
     bf2:	b0 e0       	ldi	r27, 0x00	; 0
     bf4:	84 1b       	sub	r24, r20
     bf6:	95 0b       	sbc	r25, r21
     bf8:	a6 0b       	sbc	r26, r22
     bfa:	b7 0b       	sbc	r27, r23
     bfc:	3c 01       	movw	r6, r24
     bfe:	4d 01       	movw	r8, r26
     c00:	99 0c       	add	r9, r9
     c02:	66 08       	sbc	r6, r6
     c04:	76 2c       	mov	r7, r6
     c06:	43 01       	movw	r8, r6
     c08:	9c 01       	movw	r18, r24
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:348
  p = (((p << 31) - var2) * 3125) / var1;
     c0a:	ad 01       	movw	r20, r26
     c0c:	66 2d       	mov	r22, r6
     c0e:	76 2d       	mov	r23, r6
     c10:	86 2d       	mov	r24, r6
     c12:	96 2d       	mov	r25, r6
     c14:	0f e1       	ldi	r16, 0x1F	; 31
     c16:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <__ashldi3>
     c1a:	39 01       	movw	r6, r18
     c1c:	4a 01       	movw	r8, r20
     c1e:	b6 2f       	mov	r27, r22
     c20:	a7 2f       	mov	r26, r23
     c22:	f8 2f       	mov	r31, r24
     c24:	e9 2f       	mov	r30, r25
     c26:	28 a9       	ldd	r18, Y+48	; 0x30
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:337
  adc_P >>= 4;

  var1 = ((int64_t)t_fine) - 128000;
  var2 = var1 * var1 * (int64_t)_bmp280_calib.dig_P6;
  var2 = var2 + ((var1 * (int64_t)_bmp280_calib.dig_P5) << 17);
  var2 = var2 + (((int64_t)_bmp280_calib.dig_P4) << 35);
     c28:	9b a1       	ldd	r25, Y+35	; 0x23
     c2a:	99 0f       	add	r25, r25
     c2c:	99 0b       	sbc	r25, r25
     c2e:	3b a1       	ldd	r19, Y+35	; 0x23
     c30:	49 2f       	mov	r20, r25
     c32:	59 2f       	mov	r21, r25
     c34:	69 2f       	mov	r22, r25
     c36:	79 2f       	mov	r23, r25
     c38:	89 2f       	mov	r24, r25
     c3a:	03 e2       	ldi	r16, 0x23	; 35
     c3c:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <__ashldi3>
     c40:	05 2d       	mov	r16, r5
     c42:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <__adddi3>
     c46:	59 01       	movw	r10, r18
     c48:	6a 01       	movw	r12, r20
     c4a:	7b 01       	movw	r14, r22
     c4c:	8c 01       	movw	r16, r24
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:348
  if (var1 == 0)
  {
    return 0; // avoid exception caused by division by zero
  }
  p = 1048576 - adc_P;
  p = (((p << 31) - var2) * 3125) / var1;
     c4e:	93 01       	movw	r18, r6
     c50:	a4 01       	movw	r20, r8
     c52:	6b 2f       	mov	r22, r27
     c54:	7a 2f       	mov	r23, r26
     c56:	8f 2f       	mov	r24, r31
     c58:	9e 2f       	mov	r25, r30
     c5a:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <__subdi3>
     c5e:	a5 e3       	ldi	r26, 0x35	; 53
     c60:	aa 2e       	mov	r10, r26
     c62:	bc e0       	ldi	r27, 0x0C	; 12
     c64:	bb 2e       	mov	r11, r27
     c66:	c1 2c       	mov	r12, r1
     c68:	d1 2c       	mov	r13, r1
     c6a:	e1 2c       	mov	r14, r1
     c6c:	f1 2c       	mov	r15, r1
     c6e:	00 e0       	ldi	r16, 0x00	; 0
     c70:	10 e0       	ldi	r17, 0x00	; 0
     c72:	de d7       	rcall	.+4028   	; 0x1c30 <__muldi3>
     c74:	ad 8c       	ldd	r10, Y+29	; 0x1d
     c76:	be 8c       	ldd	r11, Y+30	; 0x1e
     c78:	cf 8c       	ldd	r12, Y+31	; 0x1f
     c7a:	d8 a0       	ldd	r13, Y+32	; 0x20
     c7c:	e9 a0       	ldd	r14, Y+33	; 0x21
     c7e:	f2 2c       	mov	r15, r2
     c80:	03 2d       	mov	r16, r3
     c82:	14 2d       	mov	r17, r4
     c84:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <__divdi3>
     c88:	2f 83       	std	Y+7, r18	; 0x07
     c8a:	38 87       	std	Y+8, r19	; 0x08
     c8c:	49 87       	std	Y+9, r20	; 0x09
     c8e:	5a 87       	std	Y+10, r21	; 0x0a
     c90:	6b 87       	std	Y+11, r22	; 0x0b
     c92:	7c 87       	std	Y+12, r23	; 0x0c
     c94:	8d 87       	std	Y+13, r24	; 0x0d
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:349
  var1 = (((int64_t)_bmp280_calib.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
     c96:	9e 87       	std	Y+14, r25	; 0x0e
     c98:	0d e0       	ldi	r16, 0x0D	; 13
     c9a:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <__ashrdi3>
     c9e:	32 2e       	mov	r3, r18
     ca0:	29 2e       	mov	r2, r25
     ca2:	2d a5       	ldd	r18, Y+45	; 0x2d
     ca4:	9b 8d       	ldd	r25, Y+27	; 0x1b
     ca6:	99 0f       	add	r25, r25
     ca8:	99 0b       	sbc	r25, r25
     caa:	a3 2c       	mov	r10, r3
     cac:	b3 2e       	mov	r11, r19
     cae:	c4 2e       	mov	r12, r20
     cb0:	d5 2e       	mov	r13, r21
     cb2:	e6 2e       	mov	r14, r22
     cb4:	f7 2e       	mov	r15, r23
     cb6:	08 2f       	mov	r16, r24
     cb8:	12 2d       	mov	r17, r2
     cba:	3b 8d       	ldd	r19, Y+27	; 0x1b
     cbc:	49 2f       	mov	r20, r25
     cbe:	59 2f       	mov	r21, r25
     cc0:	69 2f       	mov	r22, r25
     cc2:	79 2f       	mov	r23, r25
     cc4:	89 2f       	mov	r24, r25
     cc6:	b4 d7       	rcall	.+3944   	; 0x1c30 <__muldi3>
     cc8:	b3 d7       	rcall	.+3942   	; 0x1c30 <__muldi3>
     cca:	09 e1       	ldi	r16, 0x19	; 25
     ccc:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <__ashrdi3>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:352
  var2 = (((int64_t)_bmp280_calib.dig_P8) * p) >> 19;

  p = ((p + var1 + var2) >> 8) + (((int64_t)_bmp280_calib.dig_P7) << 4);
     cd0:	af 80       	ldd	r10, Y+7	; 0x07
     cd2:	b8 84       	ldd	r11, Y+8	; 0x08
     cd4:	c9 84       	ldd	r12, Y+9	; 0x09
     cd6:	da 84       	ldd	r13, Y+10	; 0x0a
     cd8:	eb 84       	ldd	r14, Y+11	; 0x0b
     cda:	fc 84       	ldd	r15, Y+12	; 0x0c
     cdc:	0d 85       	ldd	r16, Y+13	; 0x0d
     cde:	1e 85       	ldd	r17, Y+14	; 0x0e
     ce0:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <__adddi3>
     ce4:	19 01       	movw	r2, r18
     ce6:	2a 01       	movw	r4, r20
     ce8:	3b 01       	movw	r6, r22
     cea:	4c 01       	movw	r8, r24
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:350
    return 0; // avoid exception caused by division by zero
  }
  p = 1048576 - adc_P;
  p = (((p << 31) - var2) * 3125) / var1;
  var1 = (((int64_t)_bmp280_calib.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
  var2 = (((int64_t)_bmp280_calib.dig_P8) * p) >> 19;
     cec:	2c a5       	ldd	r18, Y+44	; 0x2c
     cee:	9a 8d       	ldd	r25, Y+26	; 0x1a
     cf0:	99 0f       	add	r25, r25
     cf2:	99 0b       	sbc	r25, r25
     cf4:	3a 8d       	ldd	r19, Y+26	; 0x1a
     cf6:	49 2f       	mov	r20, r25
     cf8:	59 2f       	mov	r21, r25
     cfa:	69 2f       	mov	r22, r25
     cfc:	79 2f       	mov	r23, r25
     cfe:	89 2f       	mov	r24, r25
     d00:	97 d7       	rcall	.+3886   	; 0x1c30 <__muldi3>
     d02:	03 e1       	ldi	r16, 0x13	; 19
     d04:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <__ashrdi3>
     d08:	59 01       	movw	r10, r18
     d0a:	6a 01       	movw	r12, r20
     d0c:	7b 01       	movw	r14, r22
     d0e:	8c 01       	movw	r16, r24
     d10:	91 01       	movw	r18, r2
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:352

  p = ((p + var1 + var2) >> 8) + (((int64_t)_bmp280_calib.dig_P7) << 4);
     d12:	a2 01       	movw	r20, r4
     d14:	b3 01       	movw	r22, r6
     d16:	c4 01       	movw	r24, r8
     d18:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <__adddi3>
     d1c:	08 e0       	ldi	r16, 0x08	; 8
     d1e:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <__ashrdi3>
     d22:	59 01       	movw	r10, r18
     d24:	6a 01       	movw	r12, r20
     d26:	7b 01       	movw	r14, r22
     d28:	e8 2f       	mov	r30, r24
     d2a:	19 2f       	mov	r17, r25
     d2c:	2f a5       	ldd	r18, Y+47	; 0x2f
     d2e:	9a a1       	ldd	r25, Y+34	; 0x22
     d30:	99 0f       	add	r25, r25
     d32:	99 0b       	sbc	r25, r25
     d34:	3a a1       	ldd	r19, Y+34	; 0x22
     d36:	49 2f       	mov	r20, r25
     d38:	59 2f       	mov	r21, r25
     d3a:	69 2f       	mov	r22, r25
     d3c:	79 2f       	mov	r23, r25
     d3e:	89 2f       	mov	r24, r25
     d40:	04 e0       	ldi	r16, 0x04	; 4
     d42:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <__ashldi3>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:353
  return ((uint32_t)p / 256.0);
     d46:	0e 2f       	mov	r16, r30
     d48:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <__adddi3>
     d4c:	b9 01       	movw	r22, r18
     d4e:	ca 01       	movw	r24, r20
     d50:	ac d4       	rcall	.+2392   	; 0x16aa <__floatunsisf>
     d52:	20 e0       	ldi	r18, 0x00	; 0
     d54:	30 e0       	ldi	r19, 0x00	; 0
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:358
}

float ReadHight(float *preassure)
{
  *preassure /= (float)100.0;
     d56:	40 e8       	ldi	r20, 0x80	; 128
     d58:	5b e3       	ldi	r21, 0x3B	; 59
     d5a:	5d d5       	rcall	.+2746   	; 0x1816 <__mulsf3>
ReadHight():
     d5c:	20 e0       	ldi	r18, 0x00	; 0
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	48 ec       	ldi	r20, 0xC8	; 200
     d62:	52 e4       	ldi	r21, 0x42	; 66
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:360

  float altitude = 44330.0 * (1.0 - pow(*preassure / seaLevelhPa, 0.1903));
     d64:	0e d4       	rcall	.+2076   	; 0x1582 <__divsf3>
     d66:	4b 01       	movw	r8, r22
     d68:	5c 01       	movw	r10, r24
     d6a:	20 e0       	ldi	r18, 0x00	; 0
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	4f e7       	ldi	r20, 0x7F	; 127
     d70:	54 e4       	ldi	r21, 0x44	; 68
     d72:	07 d4       	rcall	.+2062   	; 0x1582 <__divsf3>
     d74:	21 e0       	ldi	r18, 0x01	; 1
     d76:	3e ed       	ldi	r19, 0xDE	; 222
     d78:	42 e4       	ldi	r20, 0x42	; 66
     d7a:	5e e3       	ldi	r21, 0x3E	; 62
     d7c:	af d5       	rcall	.+2910   	; 0x18dc <pow>
     d7e:	9b 01       	movw	r18, r22
     d80:	ac 01       	movw	r20, r24
     d82:	60 e0       	ldi	r22, 0x00	; 0
     d84:	70 e0       	ldi	r23, 0x00	; 0
     d86:	80 e8       	ldi	r24, 0x80	; 128
     d88:	9f e3       	ldi	r25, 0x3F	; 63
     d8a:	92 d3       	rcall	.+1828   	; 0x14b0 <__subsf3>
     d8c:	20 e0       	ldi	r18, 0x00	; 0
     d8e:	3a e2       	ldi	r19, 0x2A	; 42
     d90:	4d e2       	ldi	r20, 0x2D	; 45
     d92:	57 e4       	ldi	r21, 0x47	; 71
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:377
  ReadRegisterToUintArray(PREASSURE_REGISTER, 6, CS_BMP, values);
  temperature = ReadTemperature(values, &t_fine, calibrationData);
  // } while (temperature < -50.0);
  float pressure = ReadPreassure(values, t_fine, calibrationData);
  float hight = ReadHight(&pressure) - initialHight;
  if (Serial.available())
     d94:	40 d5       	rcall	.+2688   	; 0x1816 <__mulsf3>
     d96:	6b 01       	movw	r12, r22
     d98:	7c 01       	movw	r14, r24
_Z8GetHightf.constprop.6():
     d9a:	8c e2       	ldi	r24, 0x2C	; 44
     d9c:	98 e3       	ldi	r25, 0x38	; 56
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:379
  {
    Serial.print("Temperature [*C]:\t");
     d9e:	3f da       	rcall	.-2946   	; 0x21e <UartClass::available()>
     da0:	89 2b       	or	r24, r25
     da2:	39 f1       	breq	.+78     	; 0xdf2 <GetHight(float) [clone .constprop.6]+0x52a>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:320
           12) *
          ((int32_t)_bmp280_calib.dig_T3)) >>
         14;
  int32_t sum = var1 + var2;
  *t_fine = sum;
  int32_t T = (sum * 5 + 128) >> 8;
     da4:	8f e2       	ldi	r24, 0x2F	; 47
     da6:	9f e9       	ldi	r25, 0x9F	; 159
     da8:	b6 db       	rcall	.-2196   	; 0x516 <Print::print(char const*) [clone .constprop.29]>
ReadTemperature():
     daa:	a5 e0       	ldi	r26, 0x05	; 5
     dac:	b0 e0       	ldi	r27, 0x00	; 0
     dae:	2f 85       	ldd	r18, Y+15	; 0x0f
     db0:	38 89       	ldd	r19, Y+16	; 0x10
     db2:	49 89       	ldd	r20, Y+17	; 0x11
     db4:	5a 89       	ldd	r21, Y+18	; 0x12
     db6:	2c d7       	rcall	.+3672   	; 0x1c10 <__muluhisi3>
     db8:	60 58       	subi	r22, 0x80	; 128
     dba:	7f 4f       	sbci	r23, 0xFF	; 255
     dbc:	8f 4f       	sbci	r24, 0xFF	; 255
     dbe:	9f 4f       	sbci	r25, 0xFF	; 255
     dc0:	67 2f       	mov	r22, r23
     dc2:	78 2f       	mov	r23, r24
     dc4:	89 2f       	mov	r24, r25
     dc6:	99 27       	eor	r25, r25
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:321
  return (float)T / 100;
     dc8:	87 fd       	sbrc	r24, 7
     dca:	9a 95       	dec	r25
     dcc:	70 d4       	rcall	.+2272   	; 0x16ae <__floatsisf>
     dce:	20 e0       	ldi	r18, 0x00	; 0
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	48 ec       	ldi	r20, 0xC8	; 200
     dd4:	52 e4       	ldi	r21, 0x42	; 66
     dd6:	d5 d3       	rcall	.+1962   	; 0x1582 <__divsf3>
_Z8GetHightf.constprop.6():
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:380
  float pressure = ReadPreassure(values, t_fine, calibrationData);
  float hight = ReadHight(&pressure) - initialHight;
  if (Serial.available())
  {
    Serial.print("Temperature [*C]:\t");
    Serial.println(temperature);
     dd8:	9f db       	rcall	.-2242   	; 0x518 <Print::println(double, int) [clone .constprop.20]>
     dda:	82 e4       	ldi	r24, 0x42	; 66
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:381
    Serial.print("Pressure [Pa]:\t");
     ddc:	9f e9       	ldi	r25, 0x9F	; 159
     dde:	9b db       	rcall	.-2250   	; 0x516 <Print::print(char const*) [clone .constprop.29]>
     de0:	c5 01       	movw	r24, r10
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:382
    Serial.println(pressure);
     de2:	b4 01       	movw	r22, r8
     de4:	99 db       	rcall	.-2254   	; 0x518 <Print::println(double, int) [clone .constprop.20]>
     de6:	82 e5       	ldi	r24, 0x52	; 82
     de8:	9f e9       	ldi	r25, 0x9F	; 159
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:383
    Serial.print("Hight [m]:\t");
     dea:	95 db       	rcall	.-2262   	; 0x516 <Print::print(char const*) [clone .constprop.29]>
     dec:	c7 01       	movw	r24, r14
     dee:	b6 01       	movw	r22, r12
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:384
    Serial.println(hight);
     df0:	93 db       	rcall	.-2266   	; 0x518 <Print::println(double, int) [clone .constprop.20]>
     df2:	c7 01       	movw	r24, r14
     df4:	b6 01       	movw	r22, r12
     df6:	e1 96       	adiw	r28, 0x31	; 49
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:387
  }
  return hight;
}
     df8:	cd bf       	out	0x3d, r28	; 61
     dfa:	de bf       	out	0x3e, r29	; 62
     dfc:	df 91       	pop	r29
     dfe:	cf 91       	pop	r28
     e00:	1f 91       	pop	r17
     e02:	0f 91       	pop	r16
     e04:	ff 90       	pop	r15
     e06:	ef 90       	pop	r14
     e08:	df 90       	pop	r13
     e0a:	cf 90       	pop	r12
     e0c:	bf 90       	pop	r11
     e0e:	af 90       	pop	r10
     e10:	9f 90       	pop	r9
     e12:	8f 90       	pop	r8
     e14:	7f 90       	pop	r7
     e16:	6f 90       	pop	r6
     e18:	5f 90       	pop	r5
     e1a:	4f 90       	pop	r4
     e1c:	3f 90       	pop	r3
     e1e:	2f 90       	pop	r2
     e20:	08 95       	ret
     e22:	60 e0       	ldi	r22, 0x00	; 0
     e24:	70 e0       	ldi	r23, 0x00	; 0
     e26:	cb 01       	movw	r24, r22
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:345
  var1 =
      (((((int64_t)1) << 47) + var1)) * ((int64_t)_bmp280_calib.dig_P1) >> 33;

  if (var1 == 0)
  {
    return 0; // avoid exception caused by division by zero
     e28:	99 cf       	rjmp	.-206    	; 0xd5c <GetHight(float) [clone .constprop.6]+0x494>

00000e2a <__vector_18>:
__vector_18():
     e2a:	ef 93       	push	r30
     e2c:	ff 93       	push	r31
     e2e:	ec e2       	ldi	r30, 0x2C	; 44
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART0.cpp:73
  #else
    ISR(USART0_DRE_vect, ISR_NAKED) {
      __asm__ __volatile__(
                "push  r30"    "\n\t"
                "push  r31"    "\n\t"
                :::);
     e30:	f8 e3       	ldi	r31, 0x38	; 56
     e32:	08 c0       	rjmp	.+16     	; 0xe44 <_do_dre()>

00000e34 <__vector_17>:
__vector_17():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART0.cpp:76
      __asm__ __volatile__(
                "jmp _do_dre"  "\n"
                ::"z"(&Serial));
     e34:	ef 93       	push	r30
     e36:	ff 93       	push	r31
     e38:	ec e2       	ldi	r30, 0x2C	; 44
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART0.cpp:55
  #else
    ISR(USART0_RXC_vect, ISR_NAKED) {
      __asm__ __volatile__(
            "push      r30"     "\n\t"
            "push      r31"     "\n\t"
            :::);
     e3a:	f8 e3       	ldi	r31, 0x38	; 56
     e3c:	31 c0       	rjmp	.+98     	; 0xea0 <_do_rxc()>

00000e3e <__vector_19>:
__vector_19():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART0.cpp:58
      __asm__ __volatile__(
            "jmp   _do_rxc"     "\n\t"
            ::"z"(&Serial));
     e3e:	ef 93       	push	r30
     e40:	e0 e0       	ldi	r30, 0x00	; 0
     e42:	52 c0       	rjmp	.+164    	; 0xee8 <_do_txc()>

00000e44 <_do_dre()>:
_Z7_do_drev():
     e44:	2f 93       	push	r18
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART0.cpp:31
    ISR(USART0_TXC_vect, ISR_NAKED) {
      __asm__ __volatile__(
            "push  r30"         "\n\t" // push the low byte of Z
            "ldi r30, 0x00"     "\n\t" // and put the low bit of this USART there - 0x20 * n
            "jmp _do_txc"      "\n\t" // _do_txc pushes the other necessary registers and loads 0x08 into the high byte.
            :::);
     e46:	2f b7       	in	r18, 0x3f	; 63
     e48:	2f 93       	push	r18
     e4a:	8f 93       	push	r24
     e4c:	9f 93       	push	r25
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:307
      "out        0x3f,     r18"      "\n\t"  // restore SREG
      "pop         r18"               "\n\t"  // pop old r18
      "pop         r31"               "\n\t"  // pop the Z that the isr pushed.
      "pop         r30"               "\n\t"
      "reti"                        "\n"   // and RETI!
      ::);
     e4e:	af 93       	push	r26
     e50:	bf 93       	push	r27
     e52:	68 94       	set

00000e54 <_poll_dre>:
     e54:	cf 93       	push	r28
     e56:	df 93       	push	r29
     e58:	20 e0       	ldi	r18, 0x00	; 0
     e5a:	c4 85       	ldd	r28, Z+12	; 0x0c
     e5c:	d8 e0       	ldi	r29, 0x08	; 8
     e5e:	94 89       	ldd	r25, Z+20	; 0x14
     e60:	df 01       	movw	r26, r30
     e62:	a9 0f       	add	r26, r25
     e64:	b2 1f       	adc	r27, r18
     e66:	ab 5a       	subi	r26, 0xAB	; 171
     e68:	bf 4f       	sbci	r27, 0xFF	; 255
     e6a:	8c 91       	ld	r24, X
     e6c:	20 e4       	ldi	r18, 0x40	; 64
     e6e:	2c 83       	std	Y+4, r18	; 0x04
     e70:	8a 83       	std	Y+2, r24	; 0x02
     e72:	9f 5f       	subi	r25, 0xFF	; 255
     e74:	9f 73       	andi	r25, 0x3F	; 63
     e76:	8d 81       	ldd	r24, Y+5	; 0x05
     e78:	23 89       	ldd	r18, Z+19	; 0x13
     e7a:	29 13       	cpse	r18, r25
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <_done_dre_irq>
     e7e:	8f 7d       	andi	r24, 0xDF	; 223
     e80:	8d 83       	std	Y+5, r24	; 0x05

00000e82 <_done_dre_irq>:
     e82:	94 8b       	std	Z+20, r25	; 0x14
     e84:	df 91       	pop	r29
     e86:	cf 91       	pop	r28
     e88:	0e f0       	brts	.+2      	; 0xe8c <_done_dre_irq+0xa>
     e8a:	08 ca       	rjmp	.-3056   	; 0x29c <_poll_dre_done>
     e8c:	bf 91       	pop	r27
     e8e:	af 91       	pop	r26
     e90:	9f 91       	pop	r25
     e92:	8f 91       	pop	r24
     e94:	2f 91       	pop	r18
     e96:	2f bf       	out	0x3f, r18	; 63
     e98:	2f 91       	pop	r18
     e9a:	ff 91       	pop	r31
     e9c:	ef 91       	pop	r30
     e9e:	18 95       	reti

00000ea0 <_do_rxc()>:
_Z7_do_rxcv():
     ea0:	2f 93       	push	r18
     ea2:	2f b7       	in	r18, 0x3f	; 63
     ea4:	2f 93       	push	r18
     ea6:	8f 93       	push	r24
     ea8:	9f 93       	push	r25
     eaa:	cf 93       	push	r28
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:175
        "out       0x3f,       r18"   "\n\t" // and write back
        "pop        r18"              "\n\t" // used as tail pointer and z known zero.
        "pop        r31"              "\n\t" // end with Z which the isr pushed to make room for
        "pop        r30"              "\n\t" // pointer to serial instance
        "reti"                        "\n"   // return
        ::);
     eac:	df 93       	push	r29
     eae:	c4 85       	ldd	r28, Z+12	; 0x0c
     eb0:	d8 e0       	ldi	r29, 0x08	; 8
     eb2:	89 81       	ldd	r24, Y+1	; 0x01
     eb4:	98 81       	ld	r25, Y
     eb6:	81 fd       	sbrc	r24, 1
     eb8:	0d c0       	rjmp	.+26     	; 0xed4 <_end_rxc>
     eba:	c1 89       	ldd	r28, Z+17	; 0x11
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	8c 0f       	add	r24, r28
     ec0:	8f 73       	andi	r24, 0x3F	; 63
     ec2:	22 89       	ldd	r18, Z+18	; 0x12
     ec4:	28 17       	cp	r18, r24
     ec6:	31 f0       	breq	.+12     	; 0xed4 <_end_rxc>
     ec8:	ce 0f       	add	r28, r30
     eca:	df 2f       	mov	r29, r31
     ecc:	20 e0       	ldi	r18, 0x00	; 0
     ece:	d2 1f       	adc	r29, r18
     ed0:	9d 8b       	std	Y+21, r25	; 0x15
     ed2:	81 8b       	std	Z+17, r24	; 0x11

00000ed4 <_end_rxc>:
     ed4:	df 91       	pop	r29
     ed6:	cf 91       	pop	r28
     ed8:	9f 91       	pop	r25
     eda:	8f 91       	pop	r24
     edc:	2f 91       	pop	r18
     ede:	2f bf       	out	0x3f, r18	; 63
     ee0:	2f 91       	pop	r18
     ee2:	ff 91       	pop	r31
     ee4:	ef 91       	pop	r30
     ee6:	18 95       	reti

00000ee8 <_do_txc()>:
_Z7_do_txcv():
     ee8:	ff 93       	push	r31
     eea:	8f 93       	push	r24
     eec:	8f b7       	in	r24, 0x3f	; 63
     eee:	8f 93       	push	r24
     ef0:	f8 e0       	ldi	r31, 0x08	; 8

00000ef2 <_txc_flush_rx>:
     ef2:	80 81       	ld	r24, Z
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:105
        "out     0x3f,      r24"  "\n\t"  // restore it
        "pop      r24"            "\n\t"  // pop r24 to get it's old value back
        "pop      r31"            "\n\t"  // and r31
        "pop      r30"            "\n\t"  // Pop the register the ISR did
        "reti"                    "\n"    // return from the interrupt.
        ::);
     ef4:	84 81       	ldd	r24, Z+4	; 0x04
     ef6:	87 ff       	sbrs	r24, 7
     ef8:	fc cf       	rjmp	.-8      	; 0xef2 <_txc_flush_rx>
     efa:	85 81       	ldd	r24, Z+5	; 0x05
     efc:	8f 7b       	andi	r24, 0xBF	; 191
     efe:	80 68       	ori	r24, 0x80	; 128
     f00:	85 83       	std	Z+5, r24	; 0x05
     f02:	8f 91       	pop	r24
     f04:	8f bf       	out	0x3f, r24	; 63
     f06:	8f 91       	pop	r24
     f08:	ff 91       	pop	r31
     f0a:	ef 91       	pop	r30
     f0c:	18 95       	reti

00000f0e <__vector_25>:
__vector_25():
     f0e:	1f 92       	push	r1
     f10:	0f 92       	push	r0
     f12:	0f b6       	in	r0, 0x3f	; 63
     f14:	0f 92       	push	r0
     f16:	11 24       	eor	r1, r1
     f18:	8f 93       	push	r24
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:142
#elif defined(MILLIS_USE_TIMERB1)
  ISR(TCB1_INT_vect)
#else
  #error "No millis timer selected, but not disabled - cannot determine millis vector"
#endif
{
     f1a:	9f 93       	push	r25
     f1c:	af 93       	push	r26
     f1e:	bf 93       	push	r27
     f20:	80 91 04 38 	lds	r24, 0x3804	; 0x803804 <timer_millis>
     f24:	90 91 05 38 	lds	r25, 0x3805	; 0x803805 <timer_millis+0x1>
     f28:	a0 91 06 38 	lds	r26, 0x3806	; 0x803806 <timer_millis+0x2>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:148
  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access)

  #if (defined(MILLIS_USE_TIMERB0)|defined(MILLIS_USE_TIMERB1))
    #if (F_CPU>1000000)
      timer_millis++; // that's all we need to do!
     f2c:	b0 91 07 38 	lds	r27, 0x3807	; 0x803807 <timer_millis+0x3>
     f30:	01 96       	adiw	r24, 0x01	; 1
     f32:	a1 1d       	adc	r26, r1
     f34:	b1 1d       	adc	r27, r1
     f36:	80 93 04 38 	sts	0x3804, r24	; 0x803804 <timer_millis>
     f3a:	90 93 05 38 	sts	0x3805, r25	; 0x803805 <timer_millis+0x1>
     f3e:	a0 93 06 38 	sts	0x3806, r26	; 0x803806 <timer_millis+0x2>
     f42:	b0 93 07 38 	sts	0x3807, r27	; 0x803807 <timer_millis+0x3>
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	80 93 96 0a 	sts	0x0A96, r24	; 0x800a96 <vtable for UartClass+0x7f6b92>
     f4c:	bf 91       	pop	r27
     f4e:	af 91       	pop	r26
     f50:	9f 91       	pop	r25
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:177
  #elif defined(MILLIS_USE_TIMERD0)
    TCD0.INTFLAGS = TCD_OVF_bm;
  #elif defined(MILLIS_USE_TIMERRTC)
    RTC.INTFLAGS = RTC_OVF_bm;
  #else // timerb
    _timer->INTFLAGS = TCB_CAPT_bm;
     f52:	8f 91       	pop	r24
     f54:	0f 90       	pop	r0
     f56:	0f be       	out	0x3f, r0	; 63
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:179
  #endif
}
     f58:	0f 90       	pop	r0
     f5a:	1f 90       	pop	r1
     f5c:	18 95       	reti

00000f5e <global constructors keyed to 65535_0_Altimetr_SPI.cpp.o.2466>:
_GLOBAL__I_65535_0_Altimetr_SPI.cpp.o.2466():
     f5e:	10 92 2e 38 	sts	0x382E, r1	; 0x80382e <Serial+0x2>
     f62:	10 92 2f 38 	sts	0x382F, r1	; 0x80382f <Serial+0x3>
     f66:	88 ee       	ldi	r24, 0xE8	; 232
     f68:	93 e0       	ldi	r25, 0x03	; 3
     f6a:	a0 e0       	ldi	r26, 0x00	; 0
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	80 93 30 38 	sts	0x3830, r24	; 0x803830 <Serial+0x4>
     f72:	90 93 31 38 	sts	0x3831, r25	; 0x803831 <Serial+0x5>
     f76:	a0 93 32 38 	sts	0x3832, r26	; 0x803832 <Serial+0x6>
     f7a:	b0 93 33 38 	sts	0x3833, r27	; 0x803833 <Serial+0x7>
     f7e:	88 e0       	ldi	r24, 0x08	; 8
     f80:	9f e9       	ldi	r25, 0x9F	; 159
     f82:	80 93 2c 38 	sts	0x382C, r24	; 0x80382c <Serial>
     f86:	90 93 2d 38 	sts	0x382D, r25	; 0x80382d <Serial+0x1>
     f8a:	80 e0       	ldi	r24, 0x00	; 0
     f8c:	98 e0       	ldi	r25, 0x08	; 8
     f8e:	80 93 38 38 	sts	0x3838, r24	; 0x803838 <Serial+0xc>
     f92:	90 93 39 38 	sts	0x3839, r25	; 0x803839 <Serial+0xd>
     f96:	10 92 3a 38 	sts	0x383A, r1	; 0x80383a <Serial+0xe>
     f9a:	10 92 3b 38 	sts	0x383B, r1	; 0x80383b <Serial+0xf>
     f9e:	40 e8       	ldi	r20, 0x80	; 128
     fa0:	56 e9       	ldi	r21, 0x96	; 150
     fa2:	68 e9       	ldi	r22, 0x98	; 152
     fa4:	70 e0       	ldi	r23, 0x00	; 0
     fa6:	80 e0       	ldi	r24, 0x00	; 0
     fa8:	8f 5f       	subi	r24, 0xFF	; 255
     faa:	86 30       	cpi	r24, 0x06	; 6
     fac:	11 f4       	brne	.+4      	; 0xfb2 <global constructors keyed to 65535_0_Altimetr_SPI.cpp.o.2466+0x54>
     fae:	87 e0       	ldi	r24, 0x07	; 7
     fb0:	0b c0       	rjmp	.+22     	; 0xfc8 <global constructors keyed to 65535_0_Altimetr_SPI.cpp.o.2466+0x6a>
     fb2:	76 95       	lsr	r23
     fb4:	67 95       	ror	r22
     fb6:	57 95       	ror	r21
     fb8:	47 95       	ror	r20
     fba:	41 30       	cpi	r20, 0x01	; 1
     fbc:	99 e0       	ldi	r25, 0x09	; 9
     fbe:	59 07       	cpc	r21, r25
     fc0:	9d e3       	ldi	r25, 0x3D	; 61
     fc2:	69 07       	cpc	r22, r25
     fc4:	71 05       	cpc	r23, r1
     fc6:	80 f7       	brcc	.-32     	; 0xfa8 <global constructors keyed to 65535_0_Altimetr_SPI.cpp.o.2466+0x4a>
     fc8:	94 e0       	ldi	r25, 0x04	; 4
     fca:	90 93 de 38 	sts	0x38DE, r25	; 0x8038de <DEFAULT_SPI_SETTINGS+0x1>
     fce:	98 2f       	mov	r25, r24
     fd0:	90 95       	com	r25
     fd2:	29 2f       	mov	r18, r25
     fd4:	21 70       	andi	r18, 0x01	; 1
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	94 e0       	ldi	r25, 0x04	; 4
     fda:	22 0f       	add	r18, r18
     fdc:	33 1f       	adc	r19, r19
     fde:	9a 95       	dec	r25
     fe0:	e1 f7       	brne	.-8      	; 0xfda <global constructors keyed to 65535_0_Altimetr_SPI.cpp.o.2466+0x7c>
     fe2:	81 62       	ori	r24, 0x21	; 33
     fe4:	82 2b       	or	r24, r18
     fe6:	80 93 dd 38 	sts	0x38DD, r24	; 0x8038dd <DEFAULT_SPI_SETTINGS>
     fea:	10 92 c6 38 	sts	0x38C6, r1	; 0x8038c6 <SPI+0x5>
     fee:	08 95       	ret

00000ff0 <main>:
main():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/main.cpp:49
 * called first in non-optiboot configurations (neither is needed on Optibooot configurations() *
 * an extra bit of initialization code in .init3 to fix the vectors and still happen if user    *
 * overrides main. In the past there was a USB-related function here, that is removed, as work  *
 * will be needed in any event at the core level if VUSB-based "stuff" arrives, but really I'm  *
 * just waiting for the DU-series now                                                           */
int main() {
     ff0:	cf 93       	push	r28
     ff2:	df 93       	push	r29
     ff4:	cd b7       	in	r28, 0x3d	; 61
     ff6:	de b7       	in	r29, 0x3e	; 62
     ff8:	e0 97       	sbiw	r28, 0x30	; 48
     ffa:	cd bf       	out	0x3d, r28	; 61
     ffc:	de bf       	out	0x3e, r29	; 62
init_clock():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:1275
    #if (defined(CLOCK_TUNE_INTERNAL))
      tune_internal(); // Will be inlined as only called once. Just too long and ugly to put two implementations in middle of this.
    #else
      #if (F_CPU == 20000000)
        /* No division on clock */
        _PROTECTED_WRITE(CLKCTRL_MCLKCTRLB, 0x00);
     ffe:	88 ed       	ldi	r24, 0xD8	; 216
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	84 bf       	out	0x34, r24	; 52
    1004:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <vtable for UartClass+0x7f615d>
init_ADC0():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:1407
    #elif F_CPU  >= 30000000            // 32 MHz /12 = 2.67 MHz
      ADC0.CTRLB  = ADC_PRESC_DIV12_gc; // 30 MHz /12 = 2.50 MHz
    #elif F_CPU  >= 24000000            // 25 MHz /10 = 2.50 MHz
      ADC0.CTRLB  = ADC_PRESC_DIV10_gc; // 24 MHz /10 = 2.40 MHz
    #elif F_CPU  >= 20000000
      ADC0.CTRLB  = ADC_PRESC_DIV8_gc;  // 20 MHz / 8 = 2.50 MHz
    1008:	83 e0       	ldi	r24, 0x03	; 3
    100a:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <vtable for UartClass+0x7f66fd>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:1417
    #elif F_CPU  >=  6000000            // 10 MHz / 4 = 2.50 MHz
      ADC0.CTRLB  = ADC_PRESC_DIV4_gc;  //  8 MHz / 4 = 2.00 MHz
    #else                               //  5 MHz / 2 = 2.50 MHz
      ADC0.CTRLB  = ADC_PRESC_DIV2_gc;  //  4 MHz / 2 = 2.00 MHz
    #endif                              //  1 MHz / 2 =  500 kHz
    ADC0.CTRLE = 15; // 15.5 without PGA, 16 with PGA, corresponding to 7.75 or 8 us.
    100e:	9f e0       	ldi	r25, 0x0F	; 15
    1010:	90 93 08 06 	sts	0x0608, r25	; 0x800608 <vtable for UartClass+0x7f6704>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:1418
    ADC0.CTRLA = ADC_ENABLE_bm | ADC_LOWLAT_bm;
    1014:	91 e2       	ldi	r25, 0x21	; 33
    1016:	90 93 00 06 	sts	0x0600, r25	; 0x800600 <vtable for UartClass+0x7f66fc>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:1423
    /* Default low latency mode on
     * Users can turn it off if they care about power consumption while ADC is on
     * and chip is awake, since these parts don't have the perverse ADC-left-on
     * behavior of classic AVRs. */
    ADC0.CTRLC = TIMEBASE_1US; // defined in Arduino.h.
    101a:	90 ea       	ldi	r25, 0xA0	; 160
    101c:	90 93 02 06 	sts	0x0602, r25	; 0x800602 <vtable for UartClass+0x7f66fe>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:1424
    ADC0.PGACTRL = ADC_PGABIASSEL_3_4X_gc | ADC_ADCPGASAMPDUR_15CLK_gc;
    1020:	9a e0       	ldi	r25, 0x0A	; 10
    1022:	90 93 0b 06 	sts	0x060B, r25	; 0x80060b <vtable for UartClass+0x7f6707>
init_TCA0():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:1487
  #ifdef __AVR_ATtinyxy2__
    PORTMUX.CTRLC = 1; // move WO0 output to PA7 so PA3 can be used with WO3
  #endif

  /* Enable Split Mode */
  TCA0.SPLIT.CTRLD = TCA_SPLIT_SPLITM_bm;
    1026:	91 e0       	ldi	r25, 0x01	; 1
    1028:	90 93 03 0a 	sts	0x0A03, r25	; 0x800a03 <vtable for UartClass+0x7f6aff>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:1492

  // Only 1 WGM so no need to specifically set up.

  /* Period setting, 8-bit register in SPLIT mode */
  TCA0.SPLIT.LPER    = PWM_TIMER_PERIOD;
    102c:	2e ef       	ldi	r18, 0xFE	; 254
    102e:	20 93 26 0a 	sts	0x0A26, r18	; 0x800a26 <vtable for UartClass+0x7f6b22>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:1493
  TCA0.SPLIT.HPER    = PWM_TIMER_PERIOD;
    1032:	20 93 27 0a 	sts	0x0A27, r18	; 0x800a27 <vtable for UartClass+0x7f6b23>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:1511
  /* Use prescale appropriate for system clock speed */

  #if (F_CPU > 25000000) //   use 256 divider when clocked over 25 MHz
    TCA0.SPLIT.CTRLA   = (TCA_SPLIT_CLKSEL_DIV256_gc) | (TCA_SPLIT_ENABLE_bm);
  #elif (F_CPU > 5000000) //  use 64 divider for everything in the middle
    TCA0.SPLIT.CTRLA   =  (TCA_SPLIT_CLKSEL_DIV64_gc) | (TCA_SPLIT_ENABLE_bm);
    1036:	2b e0       	ldi	r18, 0x0B	; 11
    1038:	20 93 00 0a 	sts	0x0A00, r18	; 0x800a00 <vtable for UartClass+0x7f6afc>
init_millis():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:1204
        // RTC.CLKSEL=0; this is the power on value
      #endif
      RTC.INTCTRL         = 0x01; // enable overflow interrupt
      RTC.CTRLA           = (RTC_RUNSTDBY_bm|RTC_RTCEN_bm|RTC_PRESCALER_DIV32_gc);//fire it up, prescale by 32.
    #else // It's a type b timer - we have already errored out if that wasn't defined
      _timer->CCMP = TIME_TRACKING_TIMER_PERIOD;
    103c:	2f e0       	ldi	r18, 0x0F	; 15
    103e:	37 e2       	ldi	r19, 0x27	; 39
    1040:	20 93 9c 0a 	sts	0x0A9C, r18	; 0x800a9c <vtable for UartClass+0x7f6b98>
    1044:	30 93 9d 0a 	sts	0x0A9D, r19	; 0x800a9d <vtable for UartClass+0x7f6b99>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:1206
      // Enable timer interrupt, but clear the rest of register
      _timer->INTCTRL = TCB_CAPT_bm;
    1048:	90 93 95 0a 	sts	0x0A95, r25	; 0x800a95 <vtable for UartClass+0x7f6b91>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:1208
      // Clear timer mode (since it will have been set as PWM by init())
      _timer->CTRLB = 0;
    104c:	10 92 91 0a 	sts	0x0A91, r1	; 0x800a91 <vtable for UartClass+0x7f6b8d>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:1210
      // CLK_PER/1 is 0b00,. CLK_PER/2 is 0b01, so bitwise OR of valid divider with enable works
      _timer->CTRLA = TIME_TRACKING_TIMER_DIVIDER|TCB_ENABLE_bm;  // Keep this last before enabling interrupts to ensure tracking as accurate as possible
    1050:	80 93 90 0a 	sts	0x0A90, r24	; 0x800a90 <vtable for UartClass+0x7f6b8c>
init():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:1257
  #ifndef MILLIS_USE_TIMERNONE
    init_millis();
  #endif
  /*************************** ENABLE GLOBAL INTERRUPTS *************************/
  // Finally, after everything is initialized, we go ahead and enable interrupts.
  sei();
    1054:	78 94       	sei
main():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/main.cpp:53
  onBeforeInit(); // Emnpty callback called before init but after the .init stuff. First normal code executed
  init(); // Interrupts are turned on just prior to init() returning.
  initVariant();
  if (!onAfterInit()) sei();  // enable interrupts.
    1056:	78 94       	sei
    1058:	10 e0       	ldi	r17, 0x00	; 0
setup():
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:59
uint64_t t = 0; // timer updated with millis()
void setup()
{
  // put your setup code here, to run once:
  for (int i = 0; i < 11; i++) // For all pins
    pinMode(i, OUTPUT);
    105a:	61 e0       	ldi	r22, 0x01	; 1
    105c:	81 2f       	mov	r24, r17
    105e:	58 db       	rcall	.-2384   	; 0x710 <pinMode>
    1060:	1f 5f       	subi	r17, 0xFF	; 255
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:58
float initialHight;
uint64_t t = 0; // timer updated with millis()
void setup()
{
  // put your setup code here, to run once:
  for (int i = 0; i < 11; i++) // For all pins
    1062:	1b 30       	cpi	r17, 0x0B	; 11
    1064:	d1 f7       	brne	.-12     	; 0x105a <main+0x6a>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:60
    pinMode(i, OUTPUT);
  pinMode(SEND_DATA_UART_EN, INPUT_PULLUP);
    1066:	62 e0       	ldi	r22, 0x02	; 2
    1068:	83 e0       	ldi	r24, 0x03	; 3
    106a:	52 db       	rcall	.-2396   	; 0x710 <pinMode>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:61
  Serial.begin(115200);
    106c:	40 e0       	ldi	r20, 0x00	; 0
    106e:	52 ec       	ldi	r21, 0xC2	; 194
    1070:	61 e0       	ldi	r22, 0x01	; 1
    1072:	70 e0       	ldi	r23, 0x00	; 0
    1074:	8c e2       	ldi	r24, 0x2C	; 44
    1076:	98 e3       	ldi	r25, 0x38	; 56
    1078:	dd d9       	rcall	.-3142   	; 0x434 <UartClass::begin(unsigned long)>
write():
    107a:	8e e5       	ldi	r24, 0x5E	; 94
    107c:	9f e9       	ldi	r25, 0x9F	; 159
    107e:	e3 d9       	rcall	.-3130   	; 0x446 <Print::write(char const*) [clone .part.2] [clone .constprop.31]>
    1080:	8c e2       	ldi	r24, 0x2C	; 44
    1082:	9f e9       	ldi	r25, 0x9F	; 159
    1084:	e0 d9       	rcall	.-3136   	; 0x446 <Print::write(char const*) [clone .part.2] [clone .constprop.31]>
init():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\libraries\SPI\src/SPI.cpp:149

  config(DEFAULT_SPI_SETTINGS);
}

void SPIClass::init() {
  if (initialized) {
    1086:	80 91 c6 38 	lds	r24, 0x38C6	; 0x8038c6 <SPI+0x5>
    108a:	81 11       	cpse	r24, r1
    108c:	17 c0       	rjmp	.+46     	; 0x10bc <main+0xcc>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\libraries\SPI\src/SPI.cpp:152
    return;
  }
  interruptMode = SPI_IMODE_NONE;
    108e:	10 92 c7 38 	sts	0x38C7, r1	; 0x8038c7 <SPI+0x6>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\libraries\SPI\src/SPI.cpp:153
  interruptSave = 0;
    1092:	10 92 c8 38 	sts	0x38C8, r1	; 0x8038c8 <SPI+0x7>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\libraries\SPI\src/SPI.cpp:154
  interruptMask_lo = 0;
    1096:	10 92 c9 38 	sts	0x38C9, r1	; 0x8038c9 <SPI+0x8>
    109a:	10 92 ca 38 	sts	0x38CA, r1	; 0x8038ca <SPI+0x9>
    109e:	10 92 cb 38 	sts	0x38CB, r1	; 0x8038cb <SPI+0xa>
    10a2:	10 92 cc 38 	sts	0x38CC, r1	; 0x8038cc <SPI+0xb>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\libraries\SPI\src/SPI.cpp:155
  interruptMask_hi = 0;
    10a6:	10 92 cd 38 	sts	0x38CD, r1	; 0x8038cd <SPI+0xc>
    10aa:	10 92 ce 38 	sts	0x38CE, r1	; 0x8038ce <SPI+0xd>
    10ae:	10 92 cf 38 	sts	0x38CF, r1	; 0x8038cf <SPI+0xe>
    10b2:	10 92 d0 38 	sts	0x38D0, r1	; 0x8038d0 <SPI+0xf>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\libraries\SPI\src/SPI.cpp:156
  initialized = true;
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	80 93 c6 38 	sts	0x38C6, r24	; 0x8038c6 <SPI+0x5>
begin():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\libraries\SPI\src/SPI.cpp:111
void SPIClass::begin() {
  init();
  #if defined(PORTMUX_CTRLB)
  PORTMUX.CTRLB = _uc_mux | (PORTMUX.CTRLB & ~PORTMUX_SPI0_bm);
  #elif defined(PORTMUX_SPIROUTEA)
  PORTMUX.SPIROUTEA = _uc_mux | (PORTMUX.SPIROUTEA & ~3);
    10bc:	80 91 e3 05 	lds	r24, 0x05E3	; 0x8005e3 <vtable for UartClass+0x7f66df>
    10c0:	8c 7f       	andi	r24, 0xFC	; 252
    10c2:	90 91 c5 38 	lds	r25, 0x38C5	; 0x8038c5 <SPI+0x4>
    10c6:	89 2b       	or	r24, r25
    10c8:	80 93 e3 05 	sts	0x05E3, r24	; 0x8005e3 <vtable for UartClass+0x7f66df>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\libraries\SPI\src/SPI.cpp:138
    pinMode(PIN_SPI_SCK_PINSWAP_2, OUTPUT);
  }
  #endif
  #else
  // MISO is set to input by the controller
  pinMode(PIN_SPI_MOSI, OUTPUT);
    10cc:	61 e0       	ldi	r22, 0x01	; 1
    10ce:	88 e0       	ldi	r24, 0x08	; 8
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\libraries\SPI\src/SPI.cpp:139
  pinMode(PIN_SPI_SCK, OUTPUT);
    10d0:	1f db       	rcall	.-2498   	; 0x710 <pinMode>
    10d2:	61 e0       	ldi	r22, 0x01	; 1
    10d4:	8a e0       	ldi	r24, 0x0A	; 10
    10d6:	1c db       	rcall	.-2504   	; 0x710 <pinMode>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\libraries\SPI\src/SPI.cpp:142
  #endif

  SPI0.CTRLB |= (SPI_SSD_bm);
    10d8:	80 91 c1 08 	lds	r24, 0x08C1	; 0x8008c1 <vtable for UartClass+0x7f69bd>
    10dc:	84 60       	ori	r24, 0x04	; 4
    10de:	80 93 c1 08 	sts	0x08C1, r24	; 0x8008c1 <vtable for UartClass+0x7f69bd>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\libraries\SPI\src/SPI.cpp:143
  SPI0.CTRLA |= (SPI_ENABLE_bm | SPI_MASTER_bm);
    10e2:	80 91 c0 08 	lds	r24, 0x08C0	; 0x8008c0 <vtable for UartClass+0x7f69bc>
    10e6:	81 62       	ori	r24, 0x21	; 33
    10e8:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <vtable for UartClass+0x7f69bc>
    10ec:	90 91 dd 38 	lds	r25, 0x38DD	; 0x8038dd <DEFAULT_SPI_SETTINGS>
    10f0:	80 91 de 38 	lds	r24, 0x38DE	; 0x8038de <DEFAULT_SPI_SETTINGS+0x1>
config():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\libraries\SPI\src/SPI.cpp:160
  interruptMask_hi = 0;
  initialized = true;
}

void SPIClass::config(SPISettings settings) {
  SPI0.CTRLA = settings.ctrla;
    10f4:	90 93 c0 08 	sts	0x08C0, r25	; 0x8008c0 <vtable for UartClass+0x7f69bc>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\libraries\SPI\src/SPI.cpp:161
  SPI0.CTRLB = settings.ctrlb;
    10f8:	80 93 c1 08 	sts	0x08C1, r24	; 0x8008c1 <vtable for UartClass+0x7f69bd>
CheckBMPConnection():
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:392
}

bool CheckBMPConnection()
{
  uint8_t SpiChipId;
  ReadRegisterToUintArray(CHIP_ID_REGISTER, 1, CS_BMP, &SpiChipId);
    10fc:	ae 01       	movw	r20, r28
    10fe:	4f 5f       	subi	r20, 0xFF	; 255
    1100:	5f 4f       	sbci	r21, 0xFF	; 255
    1102:	61 e0       	ldi	r22, 0x01	; 1
    1104:	80 ed       	ldi	r24, 0xD0	; 208
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:393
  if (Serial.available())
    1106:	e3 da       	rcall	.-2618   	; 0x6ce <ReadRegisterToUintArray(unsigned char, unsigned char, unsigned char, unsigned char*) [clone .constprop.12]>
    1108:	8c e2       	ldi	r24, 0x2C	; 44
    110a:	98 e3       	ldi	r25, 0x38	; 56
    110c:	88 d8       	rcall	.-3824   	; 0x21e <UartClass::available()>
    110e:	89 2b       	or	r24, r25
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:395
  {
    Serial.print("Chip ID:\t");
    1110:	a9 f0       	breq	.+42     	; 0x113c <main+0x14c>
    1112:	84 e6       	ldi	r24, 0x64	; 100
    1114:	9f e9       	ldi	r25, 0x9F	; 159
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:95
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    1116:	ff d9       	rcall	.-3074   	; 0x516 <Print::print(char const*) [clone .constprop.29]>
print():
    1118:	4a e0       	ldi	r20, 0x0A	; 10
    111a:	68 e5       	ldi	r22, 0x58	; 88
    111c:	70 e0       	ldi	r23, 0x00	; 0
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	90 e0       	ldi	r25, 0x00	; 0
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:397
    Serial.print(CHIP_ID);
    Serial.print("\tResult:\t");
    1122:	9d d9       	rcall	.-3270   	; 0x45e <Print::printNumber(unsigned long, unsigned char) [clone .constprop.26]>
CheckBMPConnection():
    1124:	8e e6       	ldi	r24, 0x6E	; 110
    1126:	9f e9       	ldi	r25, 0x9F	; 159
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:75
size_t Print::print(char c) {
  return write(c);
}

size_t Print::print(unsigned char b, int base) {
  return print((unsigned long) b, base);
    1128:	f6 d9       	rcall	.-3092   	; 0x516 <Print::print(char const*) [clone .constprop.29]>
print():
    112a:	69 81       	ldd	r22, Y+1	; 0x01
    112c:	70 e0       	ldi	r23, 0x00	; 0
    112e:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:105

size_t Print::print(unsigned long n, int base) {
  if (base == 0) {
    return write(n);
  } else {
    return printNumber(n, base);
    1130:	80 e0       	ldi	r24, 0x00	; 0
    1132:	4a e0       	ldi	r20, 0x0A	; 10
    1134:	94 d9       	rcall	.-3288   	; 0x45e <Print::printNumber(unsigned long, unsigned char) [clone .constprop.26]>
write():
    1136:	8c e2       	ldi	r24, 0x2C	; 44
    1138:	9f e9       	ldi	r25, 0x9F	; 159
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:400
    Serial.println(SpiChipId);
  }
  return (SpiChipId == CHIP_ID);
    113a:	85 d9       	rcall	.-3318   	; 0x446 <Print::write(char const*) [clone .part.2] [clone .constprop.31]>
CheckBMPConnection():
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:66
  Serial.begin(115200);
  Serial.println("START");
  // start the SPI library:
  SPI.begin();
  // if there is a wrong CHIP_ID detected
  if (!CheckBMPConnection())
    113c:	89 81       	ldd	r24, Y+1	; 0x01
setup():
    113e:	88 35       	cpi	r24, 0x58	; 88
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:77
      delay(100);
    }
    // Do nothing, it is not going to work
    while (1)
    {
      delay(5000);
    1140:	31 f0       	breq	.+12     	; 0x114e <main+0x15e>
    1142:	68 e8       	ldi	r22, 0x88	; 136
    1144:	73 e1       	ldi	r23, 0x13	; 19
    1146:	80 e0       	ldi	r24, 0x00	; 0
    1148:	90 e0       	ldi	r25, 0x00	; 0
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:235
{
  // MSB = 0 -> WRITE
  uint8_t writeRegister = WRITE_REGISTER(thisRegister);

  // take the chip select low to select the device:
  digitalWrite(chipSelectPin, LOW);
    114a:	4a d9       	rcall	.-3436   	; 0x3e0 <delay>
    114c:	fa cf       	rjmp	.-12     	; 0x1142 <main+0x152>
writeRegister():
    114e:	80 e0       	ldi	r24, 0x00	; 0
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:237

  SPI.transfer(writeRegister); // Send register location
    1150:	9e da       	rcall	.-2756   	; 0x68e <digitalWrite.constprop.18>
    1152:	84 e7       	ldi	r24, 0x74	; 116
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:238
  SPI.transfer(thisValue);     // Send value to record into register
    1154:	0e 94 a7 00 	call	0x14e	; 0x14e <SPIClass::transfer(unsigned char) [clone .constprop.17]>
    1158:	8f e2       	ldi	r24, 0x2F	; 47
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:241

  // take the chip select high to de-select:
  digitalWrite(chipSelectPin, HIGH);
    115a:	0e 94 a7 00 	call	0x14e	; 0x14e <SPIClass::transfer(unsigned char) [clone .constprop.17]>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:235
{
  // MSB = 0 -> WRITE
  uint8_t writeRegister = WRITE_REGISTER(thisRegister);

  // take the chip select low to select the device:
  digitalWrite(chipSelectPin, LOW);
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	96 da       	rcall	.-2772   	; 0x68e <digitalWrite.constprop.18>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:237

  SPI.transfer(writeRegister); // Send register location
    1162:	80 e0       	ldi	r24, 0x00	; 0
    1164:	94 da       	rcall	.-2776   	; 0x68e <digitalWrite.constprop.18>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:238
  SPI.transfer(thisValue);     // Send value to record into register
    1166:	85 e7       	ldi	r24, 0x75	; 117
    1168:	0e 94 a7 00 	call	0x14e	; 0x14e <SPIClass::transfer(unsigned char) [clone .constprop.17]>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:241

  // take the chip select high to de-select:
  digitalWrite(chipSelectPin, HIGH);
    116c:	88 e4       	ldi	r24, 0x48	; 72
    116e:	0e 94 a7 00 	call	0x14e	; 0x14e <SPIClass::transfer(unsigned char) [clone .constprop.17]>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:82
      delay(5000);
    }
  }
  BMP280_CONFIG();
  // give the sensor time to set up:
  delay(20);
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	8c da       	rcall	.-2792   	; 0x68e <digitalWrite.constprop.18>
setup():
    1176:	64 e1       	ldi	r22, 0x14	; 20
    1178:	70 e0       	ldi	r23, 0x00	; 0
    117a:	80 e0       	ldi	r24, 0x00	; 0
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	30 d9       	rcall	.-3488   	; 0x3e0 <delay>
write():
    1180:	88 e7       	ldi	r24, 0x78	; 120
    1182:	9f e9       	ldi	r25, 0x9F	; 159
    1184:	60 d9       	rcall	.-3392   	; 0x446 <Print::write(char const*) [clone .part.2] [clone .constprop.31]>
    1186:	8c e2       	ldi	r24, 0x2C	; 44
    1188:	9f e9       	ldi	r25, 0x9F	; 159
    118a:	5d d9       	rcall	.-3398   	; 0x446 <Print::write(char const*) [clone .part.2] [clone .constprop.31]>
    118c:	8e 01       	movw	r16, r28
    118e:	0f 5f       	subi	r16, 0xFF	; 255
    1190:	1f 4f       	sbci	r17, 0xFF	; 255
    1192:	88 e8       	ldi	r24, 0x88	; 136
    1194:	c8 2e       	mov	r12, r24
    1196:	d1 2c       	mov	r13, r1
    1198:	e1 2c       	mov	r14, r1
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:247
}
struct BMP280_HandleTypedef calibration()
{
  int32_t data[12];
  Serial.println("CALIBRATION:");
  for (int i = 0; i < 12; i++)
    119a:	f1 2c       	mov	r15, r1
main():
    119c:	b1 2c       	mov	r11, r1
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:249
  {
    if (i == 0 || i == 3)
    119e:	a1 2c       	mov	r10, r1
    11a0:	9c 2c       	mov	r9, r12
calibration():
    11a2:	a1 14       	cp	r10, r1
    11a4:	b1 04       	cpc	r11, r1
    11a6:	29 f0       	breq	.+10     	; 0x11b2 <main+0x1c2>
    11a8:	83 e0       	ldi	r24, 0x03	; 3
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:123

uint16_t ReadTwoRegistersUint(uint8_t thisRegister, uint8_t chipSelectPin, bool lastMSB)
{
  uint8_t inByte = 0;  // incoming byte from the SPI
  uint16_t result = 0; // result to return
  Serial.print("From register:\t");
    11aa:	a8 16       	cp	r10, r24
    11ac:	b1 04       	cpc	r11, r1
    11ae:	09 f0       	breq	.+2      	; 0x11b2 <main+0x1c2>
    11b0:	17 c1       	rjmp	.+558    	; 0x13e0 <main+0x3f0>
ReadTwoRegistersUint():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:105
    11b2:	85 e8       	ldi	r24, 0x85	; 133
    11b4:	9f e9       	ldi	r25, 0x9F	; 159
    11b6:	af d9       	rcall	.-3234   	; 0x516 <Print::print(char const*) [clone .constprop.29]>
print():
    11b8:	40 e1       	ldi	r20, 0x10	; 16
    11ba:	c7 01       	movw	r24, r14
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:125
  Serial.print(thisRegister, HEX);
  Serial.print("\t");
    11bc:	b6 01       	movw	r22, r12
    11be:	4f d9       	rcall	.-3426   	; 0x45e <Print::printNumber(unsigned long, unsigned char) [clone .constprop.26]>
ReadTwoRegistersUint():
    11c0:	8c e6       	ldi	r24, 0x6C	; 108
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:105
    11c2:	9f e9       	ldi	r25, 0x9F	; 159
    11c4:	a8 d9       	rcall	.-3248   	; 0x516 <Print::print(char const*) [clone .constprop.29]>
print():
    11c6:	40 e1       	ldi	r20, 0x10	; 16
    11c8:	c7 01       	movw	r24, r14
    11ca:	b6 01       	movw	r22, r12
    11cc:	48 d9       	rcall	.-3440   	; 0x45e <Print::printNumber(unsigned long, unsigned char) [clone .constprop.26]>
write():
    11ce:	8c e2       	ldi	r24, 0x2C	; 44
    11d0:	9f e9       	ldi	r25, 0x9F	; 159
    11d2:	39 d9       	rcall	.-3470   	; 0x446 <Print::write(char const*) [clone .part.2] [clone .constprop.31]>
ReadTwoRegistersUint():
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:131

  uint8_t readRegister = READ_REGISTER(thisRegister);
  Serial.println(readRegister, HEX);

  // take the chip select low to select the device:
  digitalWrite(chipSelectPin, LOW);
    11d4:	80 e0       	ldi	r24, 0x00	; 0
    11d6:	5b da       	rcall	.-2890   	; 0x68e <digitalWrite.constprop.18>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:133
  // send the device the register you want to read:
  SPI.transfer(readRegister);
    11d8:	89 2d       	mov	r24, r9
    11da:	0e 94 a7 00 	call	0x14e	; 0x14e <SPIClass::transfer(unsigned char) [clone .constprop.17]>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:135
  // send a value of 0 to read the first byte returned:
  result = SPI.transfer(0x00);
    11de:	80 e0       	ldi	r24, 0x00	; 0
    11e0:	0e 94 a7 00 	call	0x14e	; 0x14e <SPIClass::transfer(unsigned char) [clone .constprop.17]>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:136
  inByte = SPI.transfer(0x00);
    11e4:	88 2e       	mov	r8, r24
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	0e 94 a7 00 	call	0x14e	; 0x14e <SPIClass::transfer(unsigned char) [clone .constprop.17]>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:138
  // take the chip select high to de-select:
  digitalWrite(chipSelectPin, HIGH);
    11ec:	98 2e       	mov	r9, r24
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	4e da       	rcall	.-2916   	; 0x68e <digitalWrite.constprop.18>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:142
  if (lastMSB)
  {
    // combine the byte you just got with the previous one:
    result = result | (inByte << 8);
    11f2:	c4 01       	movw	r24, r8
calibration():
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:250
  int32_t data[12];
  Serial.println("CALIBRATION:");
  for (int i = 0; i < 12; i++)
  {
    if (i == 0 || i == 3)
      data[i] = ReadTwoRegistersUint(REGISTER_DIG_T1 + i * 2, CS_BMP, LAST_MSB);
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	a0 e0       	ldi	r26, 0x00	; 0
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:252
    else
      data[i] = ReadTwoRegistersInt(REGISTER_DIG_T1 + i * 2, CS_BMP, LAST_MSB);
    11f8:	f8 01       	movw	r30, r16
    11fa:	80 83       	st	Z, r24
    11fc:	91 83       	std	Z+1, r25	; 0x01
    11fe:	a2 83       	std	Z+2, r26	; 0x02
    1200:	b3 83       	std	Z+3, r27	; 0x03
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:253
    Serial.println(data[i]);
    1202:	60 81       	ld	r22, Z
    1204:	71 81       	ldd	r23, Z+1	; 0x01
    1206:	82 81       	ldd	r24, Z+2	; 0x02
    1208:	93 81       	ldd	r25, Z+3	; 0x03
print():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:90

size_t Print::print(long n, int base) {
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
    120a:	97 ff       	sbrs	r25, 7
    120c:	0f c1       	rjmp	.+542    	; 0x142c <main+0x43c>
    120e:	64 d9       	rcall	.-3384   	; 0x4d8 <Print::print(long, int) [clone .part.3] [clone .constprop.10]>
write():
    1210:	8c e2       	ldi	r24, 0x2C	; 44
    1212:	9f e9       	ldi	r25, 0x9F	; 159
    1214:	18 d9       	rcall	.-3536   	; 0x446 <Print::write(char const*) [clone .part.2] [clone .constprop.31]>
calibration():
    1216:	ff ef       	ldi	r31, 0xFF	; 255
    1218:	af 1a       	sub	r10, r31
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:247
}
struct BMP280_HandleTypedef calibration()
{
  int32_t data[12];
  Serial.println("CALIBRATION:");
  for (int i = 0; i < 12; i++)
    121a:	bf 0a       	sbc	r11, r31
    121c:	0c 5f       	subi	r16, 0xFC	; 252
    121e:	1f 4f       	sbci	r17, 0xFF	; 255
    1220:	82 e0       	ldi	r24, 0x02	; 2
    1222:	c8 0e       	add	r12, r24
    1224:	d1 1c       	adc	r13, r1
    1226:	e1 1c       	adc	r14, r1
    1228:	f1 1c       	adc	r15, r1
    122a:	ec e0       	ldi	r30, 0x0C	; 12
    122c:	ae 16       	cp	r10, r30
    122e:	b1 04       	cpc	r11, r1
    1230:	09 f0       	breq	.+2      	; 0x1234 <main+0x244>
    1232:	b6 cf       	rjmp	.-148    	; 0x11a0 <main+0x1b0>
    1234:	c9 80       	ldd	r12, Y+1	; 0x01
    1236:	da 80       	ldd	r13, Y+2	; 0x02
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:256
    else
      data[i] = ReadTwoRegistersInt(REGISTER_DIG_T1 + i * 2, CS_BMP, LAST_MSB);
    Serial.println(data[i]);
  }
  BMP280_HandleTypedef datastruct;
  datastruct.dig_T1 = (uint16_t)data[0];
    1238:	ed 80       	ldd	r14, Y+5	; 0x05
    123a:	fe 80       	ldd	r15, Y+6	; 0x06
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:257
  datastruct.dig_T2 = (int16_t)data[1];
    123c:	09 85       	ldd	r16, Y+9	; 0x09
    123e:	1a 85       	ldd	r17, Y+10	; 0x0a
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:258
  datastruct.dig_T3 = (int16_t)data[2];
    1240:	ad 85       	ldd	r26, Y+13	; 0x0d
    1242:	be 85       	ldd	r27, Y+14	; 0x0e
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:259
  datastruct.dig_P1 = (uint16_t)data[3];
    1244:	e9 89       	ldd	r30, Y+17	; 0x11
    1246:	fa 89       	ldd	r31, Y+18	; 0x12
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:260
  datastruct.dig_P2 = (int16_t)data[4];
    1248:	6d 89       	ldd	r22, Y+21	; 0x15
    124a:	7e 89       	ldd	r23, Y+22	; 0x16
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:261
  datastruct.dig_P3 = (int16_t)data[5];
    124c:	49 8d       	ldd	r20, Y+25	; 0x19
    124e:	5a 8d       	ldd	r21, Y+26	; 0x1a
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:262
  datastruct.dig_P4 = (int16_t)data[6];
    1250:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1252:	3e 8d       	ldd	r19, Y+30	; 0x1e
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:263
  datastruct.dig_P5 = (int16_t)data[7];
    1254:	89 a1       	ldd	r24, Y+33	; 0x21
    1256:	9a a1       	ldd	r25, Y+34	; 0x22
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:264
  datastruct.dig_P6 = (int16_t)data[8];
    1258:	ad a0       	ldd	r10, Y+37	; 0x25
    125a:	be a0       	ldd	r11, Y+38	; 0x26
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:265
  datastruct.dig_P7 = (int16_t)data[9];
    125c:	89 a4       	ldd	r8, Y+41	; 0x29
    125e:	9a a4       	ldd	r9, Y+42	; 0x2a
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:266
  datastruct.dig_P8 = (int16_t)data[10];
    1260:	6d a4       	ldd	r6, Y+45	; 0x2d
    1262:	7e a4       	ldd	r7, Y+46	; 0x2e
setup():
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:267
  datastruct.dig_P9 = (int16_t)data[11];
    1264:	c0 92 14 38 	sts	0x3814, r12	; 0x803814 <calibrationData>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:84
  }
  BMP280_CONFIG();
  // give the sensor time to set up:
  delay(20);
  // get the calibration data
  calibrationData = calibration();
    1268:	d0 92 15 38 	sts	0x3815, r13	; 0x803815 <calibrationData+0x1>
    126c:	e0 92 16 38 	sts	0x3816, r14	; 0x803816 <calibrationData+0x2>
    1270:	f0 92 17 38 	sts	0x3817, r15	; 0x803817 <calibrationData+0x3>
    1274:	00 93 18 38 	sts	0x3818, r16	; 0x803818 <calibrationData+0x4>
    1278:	10 93 19 38 	sts	0x3819, r17	; 0x803819 <calibrationData+0x5>
    127c:	a0 93 1a 38 	sts	0x381A, r26	; 0x80381a <calibrationData+0x6>
    1280:	b0 93 1b 38 	sts	0x381B, r27	; 0x80381b <calibrationData+0x7>
    1284:	e0 93 1c 38 	sts	0x381C, r30	; 0x80381c <calibrationData+0x8>
    1288:	f0 93 1d 38 	sts	0x381D, r31	; 0x80381d <calibrationData+0x9>
    128c:	60 93 1e 38 	sts	0x381E, r22	; 0x80381e <calibrationData+0xa>
    1290:	70 93 1f 38 	sts	0x381F, r23	; 0x80381f <calibrationData+0xb>
    1294:	40 93 20 38 	sts	0x3820, r20	; 0x803820 <calibrationData+0xc>
    1298:	50 93 21 38 	sts	0x3821, r21	; 0x803821 <calibrationData+0xd>
    129c:	20 93 22 38 	sts	0x3822, r18	; 0x803822 <calibrationData+0xe>
    12a0:	30 93 23 38 	sts	0x3823, r19	; 0x803823 <calibrationData+0xf>
    12a4:	80 93 24 38 	sts	0x3824, r24	; 0x803824 <calibrationData+0x10>
    12a8:	90 93 25 38 	sts	0x3825, r25	; 0x803825 <calibrationData+0x11>
    12ac:	a0 92 26 38 	sts	0x3826, r10	; 0x803826 <calibrationData+0x12>
    12b0:	b0 92 27 38 	sts	0x3827, r11	; 0x803827 <calibrationData+0x13>
    12b4:	80 92 28 38 	sts	0x3828, r8	; 0x803828 <calibrationData+0x14>
    12b8:	90 92 29 38 	sts	0x3829, r9	; 0x803829 <calibrationData+0x15>
    12bc:	60 92 2a 38 	sts	0x382A, r6	; 0x80382a <calibrationData+0x16>
    12c0:	70 92 2b 38 	sts	0x382B, r7	; 0x80382b <calibrationData+0x17>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:86
  // set 0 level
  initialHight = GetHight(0.0);
    12c4:	01 db       	rcall	.-2558   	; 0x8c8 <GetHight(float) [clone .constprop.6]>
    12c6:	60 93 00 38 	sts	0x3800, r22	; 0x803800 <_edata>
    12ca:	70 93 01 38 	sts	0x3801, r23	; 0x803801 <_edata+0x1>
    12ce:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <_edata+0x2>
    12d2:	90 93 03 38 	sts	0x3803, r25	; 0x803803 <_edata+0x3>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:87
  if (Serial.available())
    12d6:	8c e2       	ldi	r24, 0x2C	; 44
    12d8:	98 e3       	ldi	r25, 0x38	; 56
    12da:	0e 94 0f 01 	call	0x21e	; 0x21e <UartClass::available()>
    12de:	89 2b       	or	r24, r25
    12e0:	61 f0       	breq	.+24     	; 0x12fa <main+0x30a>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:89
  {
    Serial.print("INITIAL HIGHT:\t");
    12e2:	85 e9       	ldi	r24, 0x95	; 149
    12e4:	9f e9       	ldi	r25, 0x9F	; 159
    12e6:	17 d9       	rcall	.-3538   	; 0x516 <Print::print(char const*) [clone .constprop.29]>
    12e8:	60 91 00 38 	lds	r22, 0x3800	; 0x803800 <_edata>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:90
    Serial.println(initialHight);
    12ec:	70 91 01 38 	lds	r23, 0x3801	; 0x803801 <_edata+0x1>
    12f0:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <_edata+0x2>
    12f4:	90 91 03 38 	lds	r25, 0x3803	; 0x803803 <_edata+0x3>
    12f8:	0f d9       	rcall	.-3554   	; 0x518 <Print::println(double, int) [clone .constprop.20]>
millis():
    12fa:	8f b7       	in	r24, 0x3f	; 63
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:226


unsigned long millis() {
  // return timer_overflow_count; // for debugging timekeeping issues where these variables are out of scope from the sketch
  unsigned long m;
  uint8_t oldSREG = SREG;
    12fc:	f8 94       	cli
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:227
  cli();
    12fe:	80 90 04 38 	lds	r8, 0x3804	; 0x803804 <timer_millis>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:255

     * Not only that - but a dedicated optimizing assembly programmer could probably ensure that instead of the >> 7 (a little mini loop)
     * that was implemented leftshifting it once, retaining the carried bit, and
     */
  #else
    m = timer_millis;
    1302:	90 90 05 38 	lds	r9, 0x3805	; 0x803805 <timer_millis+0x1>
    1306:	a0 90 06 38 	lds	r10, 0x3806	; 0x803806 <timer_millis+0x2>
    130a:	b0 90 07 38 	lds	r11, 0x3807	; 0x803807 <timer_millis+0x3>
    130e:	8f bf       	out	0x3f, r24	; 63
loop():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:256
    SREG = oldSREG;
    1310:	94 01       	movw	r18, r8
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:96
  }
}

void loop()
{
  if (millis() - t > TIME_INTERVAL)
    1312:	a5 01       	movw	r20, r10
    1314:	60 e0       	ldi	r22, 0x00	; 0
    1316:	70 e0       	ldi	r23, 0x00	; 0
    1318:	80 e0       	ldi	r24, 0x00	; 0
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	a0 90 0c 38 	lds	r10, 0x380C	; 0x80380c <t>
    1320:	b0 90 0d 38 	lds	r11, 0x380D	; 0x80380d <t+0x1>
    1324:	c0 90 0e 38 	lds	r12, 0x380E	; 0x80380e <t+0x2>
    1328:	d0 90 0f 38 	lds	r13, 0x380F	; 0x80380f <t+0x3>
    132c:	e0 90 10 38 	lds	r14, 0x3810	; 0x803810 <t+0x4>
    1330:	f0 90 11 38 	lds	r15, 0x3811	; 0x803811 <t+0x5>
    1334:	00 91 12 38 	lds	r16, 0x3812	; 0x803812 <t+0x6>
    1338:	10 91 13 38 	lds	r17, 0x3813	; 0x803813 <t+0x7>
    133c:	a1 d5       	rcall	.+2882   	; 0x1e80 <__subdi3>
    133e:	28 3e       	cpi	r18, 0xE8	; 232
    1340:	33 40       	sbci	r19, 0x03	; 3
    1342:	41 05       	cpc	r20, r1
    1344:	51 05       	cpc	r21, r1
    1346:	61 05       	cpc	r22, r1
    1348:	71 05       	cpc	r23, r1
    134a:	81 05       	cpc	r24, r1
    134c:	91 05       	cpc	r25, r1
    134e:	a9 f2       	breq	.-86     	; 0x12fa <main+0x30a>
    1350:	a0 f2       	brcs	.-88     	; 0x12fa <main+0x30a>
millis():
    1352:	8f b7       	in	r24, 0x3f	; 63
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:226


unsigned long millis() {
  // return timer_overflow_count; // for debugging timekeeping issues where these variables are out of scope from the sketch
  unsigned long m;
  uint8_t oldSREG = SREG;
    1354:	f8 94       	cli
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:227
  cli();
    1356:	00 91 04 38 	lds	r16, 0x3804	; 0x803804 <timer_millis>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:255

     * Not only that - but a dedicated optimizing assembly programmer could probably ensure that instead of the >> 7 (a little mini loop)
     * that was implemented leftshifting it once, retaining the carried bit, and
     */
  #else
    m = timer_millis;
    135a:	10 91 05 38 	lds	r17, 0x3805	; 0x803805 <timer_millis+0x1>
    135e:	20 91 06 38 	lds	r18, 0x3806	; 0x803806 <timer_millis+0x2>
    1362:	30 91 07 38 	lds	r19, 0x3807	; 0x803807 <timer_millis+0x3>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:256
    SREG = oldSREG;
    1366:	8f bf       	out	0x3f, r24	; 63
loop():
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:98
  {
    t = millis();
    1368:	00 93 0c 38 	sts	0x380C, r16	; 0x80380c <t>
    136c:	10 93 0d 38 	sts	0x380D, r17	; 0x80380d <t+0x1>
    1370:	20 93 0e 38 	sts	0x380E, r18	; 0x80380e <t+0x2>
    1374:	30 93 0f 38 	sts	0x380F, r19	; 0x80380f <t+0x3>
    1378:	10 92 10 38 	sts	0x3810, r1	; 0x803810 <t+0x4>
    137c:	10 92 11 38 	sts	0x3811, r1	; 0x803811 <t+0x5>
    1380:	10 92 12 38 	sts	0x3812, r1	; 0x803812 <t+0x6>
    1384:	10 92 13 38 	sts	0x3813, r1	; 0x803813 <t+0x7>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:99
    float hight = GetHight(0.0);
    1388:	9f da       	rcall	.-2754   	; 0x8c8 <GetHight(float) [clone .constprop.6]>
    138a:	6b 01       	movw	r12, r22
    138c:	7c 01       	movw	r14, r24
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:100
    if (hight > maxHightRAM)
    138e:	20 91 08 38 	lds	r18, 0x3808	; 0x803808 <maxHightRAM>
    1392:	30 91 09 38 	lds	r19, 0x3809	; 0x803809 <maxHightRAM+0x1>
    1396:	40 91 0a 38 	lds	r20, 0x380A	; 0x80380a <maxHightRAM+0x2>
    139a:	50 91 0b 38 	lds	r21, 0x380B	; 0x80380b <maxHightRAM+0x3>
    139e:	37 d2       	rcall	.+1134   	; 0x180e <__gesf2>
    13a0:	18 16       	cp	r1, r24
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:102
    {
      maxHightRAM = hight;
    13a2:	44 f4       	brge	.+16     	; 0x13b4 <main+0x3c4>
    13a4:	c0 92 08 38 	sts	0x3808, r12	; 0x803808 <maxHightRAM>
    13a8:	d0 92 09 38 	sts	0x3809, r13	; 0x803809 <maxHightRAM+0x1>
    13ac:	e0 92 0a 38 	sts	0x380A, r14	; 0x80380a <maxHightRAM+0x2>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:110
    else
    {
      // eeprom_update_float(&maxHightEEM, maxHightRAM);
    }

    if (Serial.available() && !digitalRead(SEND_DATA_UART_EN))
    13b0:	f0 92 0b 38 	sts	0x380B, r15	; 0x80380b <maxHightRAM+0x3>
    13b4:	8c e2       	ldi	r24, 0x2C	; 44
    13b6:	98 e3       	ldi	r25, 0x38	; 56
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:385

  /* Get port and check valid port */
  PORT_t *port = digitalPinToPortStruct(pin);

  /* Read pin value from PORTx.IN register */
  if (port->IN & bit_mask) {
    13b8:	0e 94 0f 01 	call	0x21e	; 0x21e <UartClass::available()>
    13bc:	89 2b       	or	r24, r25
    13be:	09 f4       	brne	.+2      	; 0x13c2 <main+0x3d2>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:112
    {
      float readHight = eeprom_read_float(&maxHightEEM);
    13c0:	9c cf       	rjmp	.-200    	; 0x12fa <main+0x30a>
digitalRead():
    13c2:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <vtable for UartClass+0x7f6504>
    13c6:	87 fd       	sbrc	r24, 7
    13c8:	98 cf       	rjmp	.-208    	; 0x12fa <main+0x30a>
loop():
    13ca:	80 e0       	ldi	r24, 0x00	; 0
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:113
      Serial.print("Max Hight:\t");
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	31 d0       	rcall	.+98     	; 0x1432 <eeprom_read_dword>
    13d0:	6b 01       	movw	r12, r22
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:114
      Serial.println(readHight);
    13d2:	7c 01       	movw	r14, r24
    13d4:	85 ea       	ldi	r24, 0xA5	; 165
    13d6:	9f e9       	ldi	r25, 0x9F	; 159
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:159

int16_t ReadTwoRegistersInt(uint8_t thisRegister, uint8_t chipSelectPin, bool lastMSB)
{
  int8_t inByte = 0;  // incoming byte from the SPI
  int16_t result = 0; // result to return
  Serial.print("From register:\t");
    13d8:	9e d8       	rcall	.-3780   	; 0x516 <Print::print(char const*) [clone .constprop.29]>
    13da:	c7 01       	movw	r24, r14
    13dc:	b6 01       	movw	r22, r12
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:105

size_t Print::print(unsigned long n, int base) {
  if (base == 0) {
    return write(n);
  } else {
    return printNumber(n, base);
    13de:	8c cf       	rjmp	.-232    	; 0x12f8 <main+0x308>
ReadTwoRegistersInt():
    13e0:	85 e8       	ldi	r24, 0x85	; 133
    13e2:	9f e9       	ldi	r25, 0x9F	; 159
    13e4:	98 d8       	rcall	.-3792   	; 0x516 <Print::print(char const*) [clone .constprop.29]>
print():
    13e6:	40 e1       	ldi	r20, 0x10	; 16
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:161
  Serial.print(thisRegister, HEX);
  Serial.print("\t");
    13e8:	c7 01       	movw	r24, r14
    13ea:	b6 01       	movw	r22, r12
    13ec:	38 d8       	rcall	.-3984   	; 0x45e <Print::printNumber(unsigned long, unsigned char) [clone .constprop.26]>
ReadTwoRegistersInt():
    13ee:	8c e6       	ldi	r24, 0x6C	; 108
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:105
    13f0:	9f e9       	ldi	r25, 0x9F	; 159
    13f2:	91 d8       	rcall	.-3806   	; 0x516 <Print::print(char const*) [clone .constprop.29]>
print():
    13f4:	40 e1       	ldi	r20, 0x10	; 16
    13f6:	c7 01       	movw	r24, r14
    13f8:	b6 01       	movw	r22, r12
    13fa:	31 d8       	rcall	.-3998   	; 0x45e <Print::printNumber(unsigned long, unsigned char) [clone .constprop.26]>
write():
    13fc:	8c e2       	ldi	r24, 0x2C	; 44
    13fe:	9f e9       	ldi	r25, 0x9F	; 159
    1400:	22 d8       	rcall	.-4028   	; 0x446 <Print::write(char const*) [clone .part.2] [clone .constprop.31]>
ReadTwoRegistersInt():
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:167

  uint8_t readRegister = READ_REGISTER(thisRegister);
  Serial.println(readRegister, HEX);

  // take the chip select low to select the device:
  digitalWrite(chipSelectPin, LOW);
    1402:	80 e0       	ldi	r24, 0x00	; 0
    1404:	44 d9       	rcall	.-3448   	; 0x68e <digitalWrite.constprop.18>
    1406:	8c 2d       	mov	r24, r12
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:169
  // send the device the register you want to read:
  SPI.transfer(readRegister);
    1408:	0e 94 a7 00 	call	0x14e	; 0x14e <SPIClass::transfer(unsigned char) [clone .constprop.17]>
    140c:	80 e0       	ldi	r24, 0x00	; 0
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:171
  // send a value of 0 to read the first byte returned:
  result = SPI.transfer(0x00);
    140e:	0e 94 a7 00 	call	0x14e	; 0x14e <SPIClass::transfer(unsigned char) [clone .constprop.17]>
    1412:	88 2e       	mov	r8, r24
    1414:	80 e0       	ldi	r24, 0x00	; 0
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:172
  inByte = SPI.transfer(0x00);
    1416:	0e 94 a7 00 	call	0x14e	; 0x14e <SPIClass::transfer(unsigned char) [clone .constprop.17]>
    141a:	98 2e       	mov	r9, r24
    141c:	81 e0       	ldi	r24, 0x01	; 1
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:174
  // take the chip select high to de-select:
  digitalWrite(chipSelectPin, HIGH);
    141e:	37 d9       	rcall	.-3474   	; 0x68e <digitalWrite.constprop.18>
    1420:	c4 01       	movw	r24, r8
calibration():
    1422:	09 2e       	mov	r0, r25
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:178
  if (lastMSB)
  {
    // combine the byte you just got with the previous one:
    result = result | (inByte << 8);
    1424:	00 0c       	add	r0, r0
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:252
  for (int i = 0; i < 12; i++)
  {
    if (i == 0 || i == 3)
      data[i] = ReadTwoRegistersUint(REGISTER_DIG_T1 + i * 2, CS_BMP, LAST_MSB);
    else
      data[i] = ReadTwoRegistersInt(REGISTER_DIG_T1 + i * 2, CS_BMP, LAST_MSB);
    1426:	aa 0b       	sbc	r26, r26
    1428:	bb 0b       	sbc	r27, r27
    142a:	e6 ce       	rjmp	.-564    	; 0x11f8 <main+0x208>
print():
    142c:	4a e0       	ldi	r20, 0x0A	; 10
    142e:	17 d8       	rcall	.-4050   	; 0x45e <Print::printNumber(unsigned long, unsigned char) [clone .constprop.26]>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:95
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    1430:	ef ce       	rjmp	.-546    	; 0x1210 <main+0x220>

00001432 <eeprom_read_dword>:
eeprom_read_dword():
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avrxmega3/attiny1624/../../../../libc/misc/eerd_dword.S:50
    1432:	09 d0       	rcall	.+18     	; 0x1446 <eeprom_mapen>
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avrxmega3/attiny1624/../../../../libc/misc/eerd_dword.S:51
    1434:	60 81       	ld	r22, Z
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avrxmega3/attiny1624/../../../../libc/misc/eerd_dword.S:52
    1436:	71 81       	ldd	r23, Z+1	; 0x01
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avrxmega3/attiny1624/../../../../libc/misc/eerd_dword.S:53
    1438:	82 81       	ldd	r24, Z+2	; 0x02
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avrxmega3/attiny1624/../../../../libc/misc/eerd_dword.S:54
    143a:	93 81       	ldd	r25, Z+3	; 0x03
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avrxmega3/attiny1624/../../../../libc/misc/eerd_dword.S:55
    143c:	08 95       	ret

0000143e <eeprom_read_byte>:
eeprom_read_byte():
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avrxmega3/attiny1624/../../../../libc/misc/eerd_byte.S:51
    143e:	03 d0       	rcall	.+6      	; 0x1446 <eeprom_mapen>
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avrxmega3/attiny1624/../../../../libc/misc/eerd_byte.S:52
    1440:	80 81       	ld	r24, Z
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avrxmega3/attiny1624/../../../../libc/misc/eerd_byte.S:53
    1442:	99 27       	eor	r25, r25
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avrxmega3/attiny1624/../../../../libc/misc/eerd_byte.S:54
    1444:	08 95       	ret

00001446 <eeprom_mapen>:
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avrxmega3/attiny1624/../../../../libc/misc/eerd_byte.S:83
    1446:	fc 01       	movw	r30, r24
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avrxmega3/attiny1624/../../../../libc/misc/eerd_byte.S:84
    1448:	e0 50       	subi	r30, 0x00	; 0
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avrxmega3/attiny1624/../../../../libc/misc/eerd_byte.S:85
    144a:	fc 4e       	sbci	r31, 0xEC	; 236
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avrxmega3/attiny1624/../../../../libc/misc/eerd_byte.S:87
    144c:	08 95       	ret

0000144e <__prologue_saves__>:
__prologue_saves__():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2169
    144e:	2f 92       	push	r2
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2170
    1450:	3f 92       	push	r3
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2171
    1452:	4f 92       	push	r4
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2172
    1454:	5f 92       	push	r5
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2173
    1456:	6f 92       	push	r6
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2174
    1458:	7f 92       	push	r7
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2175
    145a:	8f 92       	push	r8
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2176
    145c:	9f 92       	push	r9
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2177
    145e:	af 92       	push	r10
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2178
    1460:	bf 92       	push	r11
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2179
    1462:	cf 92       	push	r12
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2180
    1464:	df 92       	push	r13
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2181
    1466:	ef 92       	push	r14
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2182
    1468:	ff 92       	push	r15
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2183
    146a:	0f 93       	push	r16
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2184
    146c:	1f 93       	push	r17
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2185
    146e:	cf 93       	push	r28
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2186
    1470:	df 93       	push	r29
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2193
    1472:	cd b7       	in	r28, 0x3d	; 61
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2194
    1474:	de b7       	in	r29, 0x3e	; 62
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2195
    1476:	ca 1b       	sub	r28, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2196
    1478:	db 0b       	sbc	r29, r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2197
    147a:	cd bf       	out	0x3d, r28	; 61
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2198
    147c:	de bf       	out	0x3e, r29	; 62
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2211
    147e:	09 94       	ijmp

00001480 <__epilogue_restores__>:
__epilogue_restores__():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2222
    1480:	2a 88       	ldd	r2, Y+18	; 0x12
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2223
    1482:	39 88       	ldd	r3, Y+17	; 0x11
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2224
    1484:	48 88       	ldd	r4, Y+16	; 0x10
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2225
    1486:	5f 84       	ldd	r5, Y+15	; 0x0f
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2226
    1488:	6e 84       	ldd	r6, Y+14	; 0x0e
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2227
    148a:	7d 84       	ldd	r7, Y+13	; 0x0d
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2228
    148c:	8c 84       	ldd	r8, Y+12	; 0x0c
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2229
    148e:	9b 84       	ldd	r9, Y+11	; 0x0b
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2230
    1490:	aa 84       	ldd	r10, Y+10	; 0x0a
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2231
    1492:	b9 84       	ldd	r11, Y+9	; 0x09
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2232
    1494:	c8 84       	ldd	r12, Y+8	; 0x08
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2233
    1496:	df 80       	ldd	r13, Y+7	; 0x07
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2234
    1498:	ee 80       	ldd	r14, Y+6	; 0x06
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2235
    149a:	fd 80       	ldd	r15, Y+5	; 0x05
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2236
    149c:	0c 81       	ldd	r16, Y+4	; 0x04
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2237
    149e:	1b 81       	ldd	r17, Y+3	; 0x03
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2238
    14a0:	aa 81       	ldd	r26, Y+2	; 0x02
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2245
    14a2:	b9 81       	ldd	r27, Y+1	; 0x01
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2246
    14a4:	ce 0f       	add	r28, r30
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2247
    14a6:	d1 1d       	adc	r29, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2248
    14a8:	cd bf       	out	0x3d, r28	; 61
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2249
    14aa:	de bf       	out	0x3e, r29	; 62
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2250
    14ac:	ed 01       	movw	r28, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2263
    14ae:	08 95       	ret

000014b0 <__subsf3>:
__subsf3():
    14b0:	50 58       	subi	r21, 0x80	; 128

000014b2 <__addsf3>:
    14b2:	bb 27       	eor	r27, r27
    14b4:	aa 27       	eor	r26, r26
    14b6:	0e d0       	rcall	.+28     	; 0x14d4 <__addsf3x>
    14b8:	70 c1       	rjmp	.+736    	; 0x179a <__fp_round>
__addsf3():
    14ba:	61 d1       	rcall	.+706    	; 0x177e <__fp_pscA>
    14bc:	30 f0       	brcs	.+12     	; 0x14ca <__addsf3+0x18>
    14be:	66 d1       	rcall	.+716    	; 0x178c <__fp_pscB>
    14c0:	20 f0       	brcs	.+8      	; 0x14ca <__addsf3+0x18>
    14c2:	31 f4       	brne	.+12     	; 0x14d0 <__addsf3+0x1e>
    14c4:	9f 3f       	cpi	r25, 0xFF	; 255
    14c6:	11 f4       	brne	.+4      	; 0x14cc <__addsf3+0x1a>
    14c8:	1e f4       	brtc	.+6      	; 0x14d0 <__addsf3+0x1e>
    14ca:	56 c1       	rjmp	.+684    	; 0x1778 <__fp_nan>
    14cc:	0e f4       	brtc	.+2      	; 0x14d0 <__addsf3+0x1e>
    14ce:	e0 95       	com	r30
    14d0:	e7 fb       	bst	r30, 7
    14d2:	4c c1       	rjmp	.+664    	; 0x176c <__fp_inf>

000014d4 <__addsf3x>:
__addsf3x():
    14d4:	e9 2f       	mov	r30, r25
    14d6:	72 d1       	rcall	.+740    	; 0x17bc <__fp_split3>
    14d8:	80 f3       	brcs	.-32     	; 0x14ba <__addsf3+0x8>
    14da:	ba 17       	cp	r27, r26
    14dc:	62 07       	cpc	r22, r18
    14de:	73 07       	cpc	r23, r19
    14e0:	84 07       	cpc	r24, r20
    14e2:	95 07       	cpc	r25, r21
    14e4:	18 f0       	brcs	.+6      	; 0x14ec <__addsf3x+0x18>
    14e6:	71 f4       	brne	.+28     	; 0x1504 <__addsf3x+0x30>
    14e8:	9e f5       	brtc	.+102    	; 0x1550 <__addsf3x+0x7c>
    14ea:	8a c1       	rjmp	.+788    	; 0x1800 <__fp_zero>
    14ec:	0e f4       	brtc	.+2      	; 0x14f0 <__addsf3x+0x1c>
    14ee:	e0 95       	com	r30
    14f0:	0b 2e       	mov	r0, r27
    14f2:	ba 2f       	mov	r27, r26
    14f4:	a0 2d       	mov	r26, r0
    14f6:	0b 01       	movw	r0, r22
    14f8:	b9 01       	movw	r22, r18
    14fa:	90 01       	movw	r18, r0
    14fc:	0c 01       	movw	r0, r24
    14fe:	ca 01       	movw	r24, r20
    1500:	a0 01       	movw	r20, r0
    1502:	11 24       	eor	r1, r1
    1504:	ff 27       	eor	r31, r31
    1506:	59 1b       	sub	r21, r25
    1508:	99 f0       	breq	.+38     	; 0x1530 <__addsf3x+0x5c>
    150a:	59 3f       	cpi	r21, 0xF9	; 249
    150c:	50 f4       	brcc	.+20     	; 0x1522 <__addsf3x+0x4e>
    150e:	50 3e       	cpi	r21, 0xE0	; 224
    1510:	68 f1       	brcs	.+90     	; 0x156c <__addsf3x+0x98>
    1512:	1a 16       	cp	r1, r26
    1514:	f0 40       	sbci	r31, 0x00	; 0
    1516:	a2 2f       	mov	r26, r18
    1518:	23 2f       	mov	r18, r19
    151a:	34 2f       	mov	r19, r20
    151c:	44 27       	eor	r20, r20
    151e:	58 5f       	subi	r21, 0xF8	; 248
    1520:	f3 cf       	rjmp	.-26     	; 0x1508 <__addsf3x+0x34>
    1522:	46 95       	lsr	r20
    1524:	37 95       	ror	r19
    1526:	27 95       	ror	r18
    1528:	a7 95       	ror	r26
    152a:	f0 40       	sbci	r31, 0x00	; 0
    152c:	53 95       	inc	r21
    152e:	c9 f7       	brne	.-14     	; 0x1522 <__addsf3x+0x4e>
    1530:	7e f4       	brtc	.+30     	; 0x1550 <__addsf3x+0x7c>
    1532:	1f 16       	cp	r1, r31
    1534:	ba 0b       	sbc	r27, r26
    1536:	62 0b       	sbc	r22, r18
    1538:	73 0b       	sbc	r23, r19
    153a:	84 0b       	sbc	r24, r20
    153c:	ba f0       	brmi	.+46     	; 0x156c <__addsf3x+0x98>
    153e:	91 50       	subi	r25, 0x01	; 1
    1540:	a1 f0       	breq	.+40     	; 0x156a <__addsf3x+0x96>
    1542:	ff 0f       	add	r31, r31
    1544:	bb 1f       	adc	r27, r27
    1546:	66 1f       	adc	r22, r22
    1548:	77 1f       	adc	r23, r23
    154a:	88 1f       	adc	r24, r24
    154c:	c2 f7       	brpl	.-16     	; 0x153e <__addsf3x+0x6a>
    154e:	0e c0       	rjmp	.+28     	; 0x156c <__addsf3x+0x98>
    1550:	ba 0f       	add	r27, r26
    1552:	62 1f       	adc	r22, r18
    1554:	73 1f       	adc	r23, r19
    1556:	84 1f       	adc	r24, r20
    1558:	48 f4       	brcc	.+18     	; 0x156c <__addsf3x+0x98>
    155a:	87 95       	ror	r24
    155c:	77 95       	ror	r23
    155e:	67 95       	ror	r22
    1560:	b7 95       	ror	r27
    1562:	f7 95       	ror	r31
    1564:	9e 3f       	cpi	r25, 0xFE	; 254
    1566:	08 f0       	brcs	.+2      	; 0x156a <__addsf3x+0x96>
    1568:	b3 cf       	rjmp	.-154    	; 0x14d0 <__addsf3+0x1e>
    156a:	93 95       	inc	r25
    156c:	88 0f       	add	r24, r24
    156e:	08 f0       	brcs	.+2      	; 0x1572 <__addsf3x+0x9e>
    1570:	99 27       	eor	r25, r25
    1572:	ee 0f       	add	r30, r30
    1574:	97 95       	ror	r25
    1576:	87 95       	ror	r24
    1578:	08 95       	ret

0000157a <__cmpsf2>:
    157a:	d4 d0       	rcall	.+424    	; 0x1724 <__fp_cmp>
    157c:	08 f4       	brcc	.+2      	; 0x1580 <__cmpsf2+0x6>
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	08 95       	ret

00001582 <__divsf3>:
    1582:	0c d0       	rcall	.+24     	; 0x159c <__divsf3x>
    1584:	0a c1       	rjmp	.+532    	; 0x179a <__fp_round>
    1586:	02 d1       	rcall	.+516    	; 0x178c <__fp_pscB>
    1588:	40 f0       	brcs	.+16     	; 0x159a <__divsf3+0x18>
    158a:	f9 d0       	rcall	.+498    	; 0x177e <__fp_pscA>
    158c:	30 f0       	brcs	.+12     	; 0x159a <__divsf3+0x18>
    158e:	21 f4       	brne	.+8      	; 0x1598 <__divsf3+0x16>
    1590:	5f 3f       	cpi	r21, 0xFF	; 255
    1592:	19 f0       	breq	.+6      	; 0x159a <__divsf3+0x18>
    1594:	eb c0       	rjmp	.+470    	; 0x176c <__fp_inf>
    1596:	51 11       	cpse	r21, r1
    1598:	34 c1       	rjmp	.+616    	; 0x1802 <__fp_szero>
    159a:	ee c0       	rjmp	.+476    	; 0x1778 <__fp_nan>

0000159c <__divsf3x>:
    159c:	0f d1       	rcall	.+542    	; 0x17bc <__fp_split3>
    159e:	98 f3       	brcs	.-26     	; 0x1586 <__divsf3+0x4>

000015a0 <__divsf3_pse>:
__divsf3_pse():
    15a0:	99 23       	and	r25, r25
    15a2:	c9 f3       	breq	.-14     	; 0x1596 <__divsf3+0x14>
    15a4:	55 23       	and	r21, r21
    15a6:	b1 f3       	breq	.-20     	; 0x1594 <__divsf3+0x12>
    15a8:	95 1b       	sub	r25, r21
    15aa:	55 0b       	sbc	r21, r21
    15ac:	bb 27       	eor	r27, r27
    15ae:	aa 27       	eor	r26, r26
    15b0:	62 17       	cp	r22, r18
    15b2:	73 07       	cpc	r23, r19
    15b4:	84 07       	cpc	r24, r20
    15b6:	38 f0       	brcs	.+14     	; 0x15c6 <__divsf3_pse+0x26>
    15b8:	9f 5f       	subi	r25, 0xFF	; 255
    15ba:	5f 4f       	sbci	r21, 0xFF	; 255
    15bc:	22 0f       	add	r18, r18
    15be:	33 1f       	adc	r19, r19
    15c0:	44 1f       	adc	r20, r20
    15c2:	aa 1f       	adc	r26, r26
    15c4:	a9 f3       	breq	.-22     	; 0x15b0 <__divsf3_pse+0x10>
    15c6:	33 d0       	rcall	.+102    	; 0x162e <__divsf3_pse+0x8e>
    15c8:	0e 2e       	mov	r0, r30
    15ca:	3a f0       	brmi	.+14     	; 0x15da <__divsf3_pse+0x3a>
    15cc:	e0 e8       	ldi	r30, 0x80	; 128
    15ce:	30 d0       	rcall	.+96     	; 0x1630 <__divsf3_pse+0x90>
    15d0:	91 50       	subi	r25, 0x01	; 1
    15d2:	50 40       	sbci	r21, 0x00	; 0
    15d4:	e6 95       	lsr	r30
    15d6:	00 1c       	adc	r0, r0
    15d8:	ca f7       	brpl	.-14     	; 0x15cc <__divsf3_pse+0x2c>
    15da:	29 d0       	rcall	.+82     	; 0x162e <__divsf3_pse+0x8e>
    15dc:	fe 2f       	mov	r31, r30
    15de:	27 d0       	rcall	.+78     	; 0x162e <__divsf3_pse+0x8e>
    15e0:	66 0f       	add	r22, r22
    15e2:	77 1f       	adc	r23, r23
    15e4:	88 1f       	adc	r24, r24
    15e6:	bb 1f       	adc	r27, r27
    15e8:	26 17       	cp	r18, r22
    15ea:	37 07       	cpc	r19, r23
    15ec:	48 07       	cpc	r20, r24
    15ee:	ab 07       	cpc	r26, r27
    15f0:	b0 e8       	ldi	r27, 0x80	; 128
    15f2:	09 f0       	breq	.+2      	; 0x15f6 <__divsf3_pse+0x56>
    15f4:	bb 0b       	sbc	r27, r27
    15f6:	80 2d       	mov	r24, r0
    15f8:	bf 01       	movw	r22, r30
    15fa:	ff 27       	eor	r31, r31
    15fc:	93 58       	subi	r25, 0x83	; 131
    15fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1600:	2a f0       	brmi	.+10     	; 0x160c <__divsf3_pse+0x6c>
    1602:	9e 3f       	cpi	r25, 0xFE	; 254
    1604:	51 05       	cpc	r21, r1
    1606:	68 f0       	brcs	.+26     	; 0x1622 <__divsf3_pse+0x82>
    1608:	b1 c0       	rjmp	.+354    	; 0x176c <__fp_inf>
    160a:	fb c0       	rjmp	.+502    	; 0x1802 <__fp_szero>
    160c:	5f 3f       	cpi	r21, 0xFF	; 255
    160e:	ec f3       	brlt	.-6      	; 0x160a <__divsf3_pse+0x6a>
    1610:	98 3e       	cpi	r25, 0xE8	; 232
    1612:	dc f3       	brlt	.-10     	; 0x160a <__divsf3_pse+0x6a>
    1614:	86 95       	lsr	r24
    1616:	77 95       	ror	r23
    1618:	67 95       	ror	r22
    161a:	b7 95       	ror	r27
    161c:	f7 95       	ror	r31
    161e:	9f 5f       	subi	r25, 0xFF	; 255
    1620:	c9 f7       	brne	.-14     	; 0x1614 <__divsf3_pse+0x74>
    1622:	88 0f       	add	r24, r24
    1624:	91 1d       	adc	r25, r1
    1626:	96 95       	lsr	r25
    1628:	87 95       	ror	r24
    162a:	97 f9       	bld	r25, 7
    162c:	08 95       	ret
    162e:	e1 e0       	ldi	r30, 0x01	; 1
    1630:	66 0f       	add	r22, r22
    1632:	77 1f       	adc	r23, r23
    1634:	88 1f       	adc	r24, r24
    1636:	bb 1f       	adc	r27, r27
    1638:	62 17       	cp	r22, r18
    163a:	73 07       	cpc	r23, r19
    163c:	84 07       	cpc	r24, r20
    163e:	ba 07       	cpc	r27, r26
    1640:	20 f0       	brcs	.+8      	; 0x164a <__divsf3_pse+0xaa>
    1642:	62 1b       	sub	r22, r18
    1644:	73 0b       	sbc	r23, r19
    1646:	84 0b       	sbc	r24, r20
    1648:	ba 0b       	sbc	r27, r26
    164a:	ee 1f       	adc	r30, r30
    164c:	88 f7       	brcc	.-30     	; 0x1630 <__divsf3_pse+0x90>
    164e:	e0 95       	com	r30
    1650:	08 95       	ret

00001652 <__fixunssfsi>:
__fixunssfsi():
    1652:	bc d0       	rcall	.+376    	; 0x17cc <__fp_splitA>
    1654:	88 f0       	brcs	.+34     	; 0x1678 <__fixunssfsi+0x26>
    1656:	9f 57       	subi	r25, 0x7F	; 127
    1658:	90 f0       	brcs	.+36     	; 0x167e <__fixunssfsi+0x2c>
    165a:	b9 2f       	mov	r27, r25
    165c:	99 27       	eor	r25, r25
    165e:	b7 51       	subi	r27, 0x17	; 23
    1660:	a0 f0       	brcs	.+40     	; 0x168a <__fixunssfsi+0x38>
    1662:	d1 f0       	breq	.+52     	; 0x1698 <__fixunssfsi+0x46>
    1664:	66 0f       	add	r22, r22
    1666:	77 1f       	adc	r23, r23
    1668:	88 1f       	adc	r24, r24
    166a:	99 1f       	adc	r25, r25
    166c:	1a f0       	brmi	.+6      	; 0x1674 <__fixunssfsi+0x22>
    166e:	ba 95       	dec	r27
    1670:	c9 f7       	brne	.-14     	; 0x1664 <__fixunssfsi+0x12>
    1672:	12 c0       	rjmp	.+36     	; 0x1698 <__fixunssfsi+0x46>
    1674:	b1 30       	cpi	r27, 0x01	; 1
    1676:	81 f0       	breq	.+32     	; 0x1698 <__fixunssfsi+0x46>
    1678:	c3 d0       	rcall	.+390    	; 0x1800 <__fp_zero>
    167a:	b1 e0       	ldi	r27, 0x01	; 1
    167c:	08 95       	ret
    167e:	c0 c0       	rjmp	.+384    	; 0x1800 <__fp_zero>
    1680:	67 2f       	mov	r22, r23
    1682:	78 2f       	mov	r23, r24
    1684:	88 27       	eor	r24, r24
    1686:	b8 5f       	subi	r27, 0xF8	; 248
    1688:	39 f0       	breq	.+14     	; 0x1698 <__fixunssfsi+0x46>
    168a:	b9 3f       	cpi	r27, 0xF9	; 249
    168c:	cc f3       	brlt	.-14     	; 0x1680 <__fixunssfsi+0x2e>
    168e:	86 95       	lsr	r24
    1690:	77 95       	ror	r23
    1692:	67 95       	ror	r22
    1694:	b3 95       	inc	r27
    1696:	d9 f7       	brne	.-10     	; 0x168e <__fixunssfsi+0x3c>
    1698:	3e f4       	brtc	.+14     	; 0x16a8 <__fixunssfsi+0x56>
    169a:	90 95       	com	r25
    169c:	80 95       	com	r24
    169e:	70 95       	com	r23
    16a0:	61 95       	neg	r22
    16a2:	7f 4f       	sbci	r23, 0xFF	; 255
    16a4:	8f 4f       	sbci	r24, 0xFF	; 255
    16a6:	9f 4f       	sbci	r25, 0xFF	; 255
    16a8:	08 95       	ret

000016aa <__floatunsisf>:
__floatunsisf():
    16aa:	e8 94       	clt
    16ac:	09 c0       	rjmp	.+18     	; 0x16c0 <__floatsisf+0x12>

000016ae <__floatsisf>:
    16ae:	97 fb       	bst	r25, 7
    16b0:	3e f4       	brtc	.+14     	; 0x16c0 <__floatsisf+0x12>
    16b2:	90 95       	com	r25
    16b4:	80 95       	com	r24
    16b6:	70 95       	com	r23
    16b8:	61 95       	neg	r22
    16ba:	7f 4f       	sbci	r23, 0xFF	; 255
    16bc:	8f 4f       	sbci	r24, 0xFF	; 255
    16be:	9f 4f       	sbci	r25, 0xFF	; 255
    16c0:	99 23       	and	r25, r25
    16c2:	a9 f0       	breq	.+42     	; 0x16ee <__floatsisf+0x40>
    16c4:	f9 2f       	mov	r31, r25
    16c6:	96 e9       	ldi	r25, 0x96	; 150
    16c8:	bb 27       	eor	r27, r27
    16ca:	93 95       	inc	r25
    16cc:	f6 95       	lsr	r31
    16ce:	87 95       	ror	r24
    16d0:	77 95       	ror	r23
    16d2:	67 95       	ror	r22
    16d4:	b7 95       	ror	r27
    16d6:	f1 11       	cpse	r31, r1
    16d8:	f8 cf       	rjmp	.-16     	; 0x16ca <__floatsisf+0x1c>
    16da:	fa f4       	brpl	.+62     	; 0x171a <__floatsisf+0x6c>
    16dc:	bb 0f       	add	r27, r27
    16de:	11 f4       	brne	.+4      	; 0x16e4 <__floatsisf+0x36>
    16e0:	60 ff       	sbrs	r22, 0
    16e2:	1b c0       	rjmp	.+54     	; 0x171a <__floatsisf+0x6c>
    16e4:	6f 5f       	subi	r22, 0xFF	; 255
    16e6:	7f 4f       	sbci	r23, 0xFF	; 255
    16e8:	8f 4f       	sbci	r24, 0xFF	; 255
    16ea:	9f 4f       	sbci	r25, 0xFF	; 255
    16ec:	16 c0       	rjmp	.+44     	; 0x171a <__floatsisf+0x6c>
    16ee:	88 23       	and	r24, r24
    16f0:	11 f0       	breq	.+4      	; 0x16f6 <__floatsisf+0x48>
    16f2:	96 e9       	ldi	r25, 0x96	; 150
    16f4:	11 c0       	rjmp	.+34     	; 0x1718 <__floatsisf+0x6a>
    16f6:	77 23       	and	r23, r23
    16f8:	21 f0       	breq	.+8      	; 0x1702 <__floatsisf+0x54>
    16fa:	9e e8       	ldi	r25, 0x8E	; 142
    16fc:	87 2f       	mov	r24, r23
    16fe:	76 2f       	mov	r23, r22
    1700:	05 c0       	rjmp	.+10     	; 0x170c <__floatsisf+0x5e>
    1702:	66 23       	and	r22, r22
    1704:	71 f0       	breq	.+28     	; 0x1722 <__floatsisf+0x74>
    1706:	96 e8       	ldi	r25, 0x86	; 134
    1708:	86 2f       	mov	r24, r22
    170a:	70 e0       	ldi	r23, 0x00	; 0
    170c:	60 e0       	ldi	r22, 0x00	; 0
    170e:	2a f0       	brmi	.+10     	; 0x171a <__floatsisf+0x6c>
    1710:	9a 95       	dec	r25
    1712:	66 0f       	add	r22, r22
    1714:	77 1f       	adc	r23, r23
    1716:	88 1f       	adc	r24, r24
    1718:	da f7       	brpl	.-10     	; 0x1710 <__floatsisf+0x62>
    171a:	88 0f       	add	r24, r24
    171c:	96 95       	lsr	r25
    171e:	87 95       	ror	r24
    1720:	97 f9       	bld	r25, 7
    1722:	08 95       	ret

00001724 <__fp_cmp>:
__fp_cmp():
    1724:	99 0f       	add	r25, r25
    1726:	00 08       	sbc	r0, r0
    1728:	55 0f       	add	r21, r21
    172a:	aa 0b       	sbc	r26, r26
    172c:	e0 e8       	ldi	r30, 0x80	; 128
    172e:	fe ef       	ldi	r31, 0xFE	; 254
    1730:	16 16       	cp	r1, r22
    1732:	17 06       	cpc	r1, r23
    1734:	e8 07       	cpc	r30, r24
    1736:	f9 07       	cpc	r31, r25
    1738:	c0 f0       	brcs	.+48     	; 0x176a <__fp_cmp+0x46>
    173a:	12 16       	cp	r1, r18
    173c:	13 06       	cpc	r1, r19
    173e:	e4 07       	cpc	r30, r20
    1740:	f5 07       	cpc	r31, r21
    1742:	98 f0       	brcs	.+38     	; 0x176a <__fp_cmp+0x46>
    1744:	62 1b       	sub	r22, r18
    1746:	73 0b       	sbc	r23, r19
    1748:	84 0b       	sbc	r24, r20
    174a:	95 0b       	sbc	r25, r21
    174c:	39 f4       	brne	.+14     	; 0x175c <__fp_cmp+0x38>
    174e:	0a 26       	eor	r0, r26
    1750:	61 f0       	breq	.+24     	; 0x176a <__fp_cmp+0x46>
    1752:	23 2b       	or	r18, r19
    1754:	24 2b       	or	r18, r20
    1756:	25 2b       	or	r18, r21
    1758:	21 f4       	brne	.+8      	; 0x1762 <__fp_cmp+0x3e>
    175a:	08 95       	ret
    175c:	0a 26       	eor	r0, r26
    175e:	09 f4       	brne	.+2      	; 0x1762 <__fp_cmp+0x3e>
    1760:	a1 40       	sbci	r26, 0x01	; 1
    1762:	a6 95       	lsr	r26
    1764:	8f ef       	ldi	r24, 0xFF	; 255
    1766:	81 1d       	adc	r24, r1
    1768:	81 1d       	adc	r24, r1
    176a:	08 95       	ret

0000176c <__fp_inf>:
__fp_inf():
    176c:	97 f9       	bld	r25, 7
    176e:	9f 67       	ori	r25, 0x7F	; 127
    1770:	80 e8       	ldi	r24, 0x80	; 128
    1772:	70 e0       	ldi	r23, 0x00	; 0
    1774:	60 e0       	ldi	r22, 0x00	; 0
    1776:	08 95       	ret

00001778 <__fp_nan>:
__fp_nan():
    1778:	9f ef       	ldi	r25, 0xFF	; 255
    177a:	80 ec       	ldi	r24, 0xC0	; 192
    177c:	08 95       	ret

0000177e <__fp_pscA>:
__fp_pscA():
    177e:	00 24       	eor	r0, r0
    1780:	0a 94       	dec	r0
    1782:	16 16       	cp	r1, r22
    1784:	17 06       	cpc	r1, r23
    1786:	18 06       	cpc	r1, r24
    1788:	09 06       	cpc	r0, r25
    178a:	08 95       	ret

0000178c <__fp_pscB>:
__fp_pscB():
    178c:	00 24       	eor	r0, r0
    178e:	0a 94       	dec	r0
    1790:	12 16       	cp	r1, r18
    1792:	13 06       	cpc	r1, r19
    1794:	14 06       	cpc	r1, r20
    1796:	05 06       	cpc	r0, r21
    1798:	08 95       	ret

0000179a <__fp_round>:
__fp_round():
    179a:	09 2e       	mov	r0, r25
    179c:	03 94       	inc	r0
    179e:	00 0c       	add	r0, r0
    17a0:	11 f4       	brne	.+4      	; 0x17a6 <__fp_round+0xc>
    17a2:	88 23       	and	r24, r24
    17a4:	52 f0       	brmi	.+20     	; 0x17ba <__fp_round+0x20>
    17a6:	bb 0f       	add	r27, r27
    17a8:	40 f4       	brcc	.+16     	; 0x17ba <__fp_round+0x20>
    17aa:	bf 2b       	or	r27, r31
    17ac:	11 f4       	brne	.+4      	; 0x17b2 <__fp_round+0x18>
    17ae:	60 ff       	sbrs	r22, 0
    17b0:	04 c0       	rjmp	.+8      	; 0x17ba <__fp_round+0x20>
    17b2:	6f 5f       	subi	r22, 0xFF	; 255
    17b4:	7f 4f       	sbci	r23, 0xFF	; 255
    17b6:	8f 4f       	sbci	r24, 0xFF	; 255
    17b8:	9f 4f       	sbci	r25, 0xFF	; 255
    17ba:	08 95       	ret

000017bc <__fp_split3>:
__fp_split3():
    17bc:	57 fd       	sbrc	r21, 7
    17be:	90 58       	subi	r25, 0x80	; 128
    17c0:	44 0f       	add	r20, r20
    17c2:	55 1f       	adc	r21, r21
    17c4:	59 f0       	breq	.+22     	; 0x17dc <__fp_splitA+0x10>
    17c6:	5f 3f       	cpi	r21, 0xFF	; 255
    17c8:	71 f0       	breq	.+28     	; 0x17e6 <__fp_splitA+0x1a>
    17ca:	47 95       	ror	r20

000017cc <__fp_splitA>:
    17cc:	88 0f       	add	r24, r24
    17ce:	97 fb       	bst	r25, 7
    17d0:	99 1f       	adc	r25, r25
    17d2:	61 f0       	breq	.+24     	; 0x17ec <__fp_splitA+0x20>
    17d4:	9f 3f       	cpi	r25, 0xFF	; 255
    17d6:	79 f0       	breq	.+30     	; 0x17f6 <__fp_splitA+0x2a>
    17d8:	87 95       	ror	r24
    17da:	08 95       	ret
    17dc:	12 16       	cp	r1, r18
    17de:	13 06       	cpc	r1, r19
    17e0:	14 06       	cpc	r1, r20
    17e2:	55 1f       	adc	r21, r21
    17e4:	f2 cf       	rjmp	.-28     	; 0x17ca <__fp_split3+0xe>
    17e6:	46 95       	lsr	r20
    17e8:	f1 df       	rcall	.-30     	; 0x17cc <__fp_splitA>
    17ea:	08 c0       	rjmp	.+16     	; 0x17fc <__fp_splitA+0x30>
    17ec:	16 16       	cp	r1, r22
    17ee:	17 06       	cpc	r1, r23
    17f0:	18 06       	cpc	r1, r24
    17f2:	99 1f       	adc	r25, r25
    17f4:	f1 cf       	rjmp	.-30     	; 0x17d8 <__fp_splitA+0xc>
    17f6:	86 95       	lsr	r24
    17f8:	71 05       	cpc	r23, r1
    17fa:	61 05       	cpc	r22, r1
    17fc:	08 94       	sec
    17fe:	08 95       	ret

00001800 <__fp_zero>:
__fp_zero():
    1800:	e8 94       	clt

00001802 <__fp_szero>:
    1802:	bb 27       	eor	r27, r27
    1804:	66 27       	eor	r22, r22
    1806:	77 27       	eor	r23, r23
    1808:	cb 01       	movw	r24, r22
    180a:	97 f9       	bld	r25, 7
    180c:	08 95       	ret

0000180e <__gesf2>:
__gesf2():
    180e:	8a df       	rcall	.-236    	; 0x1724 <__fp_cmp>
    1810:	08 f4       	brcc	.+2      	; 0x1814 <__gesf2+0x6>
    1812:	8f ef       	ldi	r24, 0xFF	; 255
    1814:	08 95       	ret

00001816 <__mulsf3>:
__mulsf3():
    1816:	0b d0       	rcall	.+22     	; 0x182e <__mulsf3x>
    1818:	c0 cf       	rjmp	.-128    	; 0x179a <__fp_round>
    181a:	b1 df       	rcall	.-158    	; 0x177e <__fp_pscA>
    181c:	28 f0       	brcs	.+10     	; 0x1828 <__mulsf3+0x12>
    181e:	b6 df       	rcall	.-148    	; 0x178c <__fp_pscB>
    1820:	18 f0       	brcs	.+6      	; 0x1828 <__mulsf3+0x12>
    1822:	95 23       	and	r25, r21
    1824:	09 f0       	breq	.+2      	; 0x1828 <__mulsf3+0x12>
    1826:	a2 cf       	rjmp	.-188    	; 0x176c <__fp_inf>
    1828:	a7 cf       	rjmp	.-178    	; 0x1778 <__fp_nan>
    182a:	11 24       	eor	r1, r1
    182c:	ea cf       	rjmp	.-44     	; 0x1802 <__fp_szero>

0000182e <__mulsf3x>:
__mulsf3x():
    182e:	c6 df       	rcall	.-116    	; 0x17bc <__fp_split3>
    1830:	a0 f3       	brcs	.-24     	; 0x181a <__mulsf3+0x4>

00001832 <__mulsf3_pse>:
    1832:	95 9f       	mul	r25, r21
    1834:	d1 f3       	breq	.-12     	; 0x182a <__mulsf3+0x14>
    1836:	95 0f       	add	r25, r21
    1838:	50 e0       	ldi	r21, 0x00	; 0
    183a:	55 1f       	adc	r21, r21
    183c:	62 9f       	mul	r22, r18
    183e:	f0 01       	movw	r30, r0
    1840:	72 9f       	mul	r23, r18
    1842:	bb 27       	eor	r27, r27
    1844:	f0 0d       	add	r31, r0
    1846:	b1 1d       	adc	r27, r1
    1848:	63 9f       	mul	r22, r19
    184a:	aa 27       	eor	r26, r26
    184c:	f0 0d       	add	r31, r0
    184e:	b1 1d       	adc	r27, r1
    1850:	aa 1f       	adc	r26, r26
    1852:	64 9f       	mul	r22, r20
    1854:	66 27       	eor	r22, r22
    1856:	b0 0d       	add	r27, r0
    1858:	a1 1d       	adc	r26, r1
    185a:	66 1f       	adc	r22, r22
    185c:	82 9f       	mul	r24, r18
    185e:	22 27       	eor	r18, r18
    1860:	b0 0d       	add	r27, r0
    1862:	a1 1d       	adc	r26, r1
    1864:	62 1f       	adc	r22, r18
    1866:	73 9f       	mul	r23, r19
    1868:	b0 0d       	add	r27, r0
    186a:	a1 1d       	adc	r26, r1
    186c:	62 1f       	adc	r22, r18
    186e:	83 9f       	mul	r24, r19
    1870:	a0 0d       	add	r26, r0
    1872:	61 1d       	adc	r22, r1
    1874:	22 1f       	adc	r18, r18
    1876:	74 9f       	mul	r23, r20
    1878:	33 27       	eor	r19, r19
    187a:	a0 0d       	add	r26, r0
    187c:	61 1d       	adc	r22, r1
    187e:	23 1f       	adc	r18, r19
    1880:	84 9f       	mul	r24, r20
    1882:	60 0d       	add	r22, r0
    1884:	21 1d       	adc	r18, r1
    1886:	82 2f       	mov	r24, r18
    1888:	76 2f       	mov	r23, r22
    188a:	6a 2f       	mov	r22, r26
    188c:	11 24       	eor	r1, r1
    188e:	9f 57       	subi	r25, 0x7F	; 127
    1890:	50 40       	sbci	r21, 0x00	; 0
    1892:	8a f0       	brmi	.+34     	; 0x18b6 <__mulsf3_pse+0x84>
    1894:	e1 f0       	breq	.+56     	; 0x18ce <__mulsf3_pse+0x9c>
    1896:	88 23       	and	r24, r24
    1898:	4a f0       	brmi	.+18     	; 0x18ac <__mulsf3_pse+0x7a>
    189a:	ee 0f       	add	r30, r30
    189c:	ff 1f       	adc	r31, r31
    189e:	bb 1f       	adc	r27, r27
    18a0:	66 1f       	adc	r22, r22
    18a2:	77 1f       	adc	r23, r23
    18a4:	88 1f       	adc	r24, r24
    18a6:	91 50       	subi	r25, 0x01	; 1
    18a8:	50 40       	sbci	r21, 0x00	; 0
    18aa:	a9 f7       	brne	.-22     	; 0x1896 <__mulsf3_pse+0x64>
    18ac:	9e 3f       	cpi	r25, 0xFE	; 254
    18ae:	51 05       	cpc	r21, r1
    18b0:	70 f0       	brcs	.+28     	; 0x18ce <__mulsf3_pse+0x9c>
    18b2:	5c cf       	rjmp	.-328    	; 0x176c <__fp_inf>
    18b4:	a6 cf       	rjmp	.-180    	; 0x1802 <__fp_szero>
    18b6:	5f 3f       	cpi	r21, 0xFF	; 255
    18b8:	ec f3       	brlt	.-6      	; 0x18b4 <__mulsf3_pse+0x82>
    18ba:	98 3e       	cpi	r25, 0xE8	; 232
    18bc:	dc f3       	brlt	.-10     	; 0x18b4 <__mulsf3_pse+0x82>
    18be:	86 95       	lsr	r24
    18c0:	77 95       	ror	r23
    18c2:	67 95       	ror	r22
    18c4:	b7 95       	ror	r27
    18c6:	f7 95       	ror	r31
    18c8:	e7 95       	ror	r30
    18ca:	9f 5f       	subi	r25, 0xFF	; 255
    18cc:	c1 f7       	brne	.-16     	; 0x18be <__mulsf3_pse+0x8c>
    18ce:	fe 2b       	or	r31, r30
    18d0:	88 0f       	add	r24, r24
    18d2:	91 1d       	adc	r25, r1
    18d4:	96 95       	lsr	r25
    18d6:	87 95       	ror	r24
    18d8:	97 f9       	bld	r25, 7
    18da:	08 95       	ret

000018dc <pow>:
    18dc:	fa 01       	movw	r30, r20
    18de:	ee 0f       	add	r30, r30
    18e0:	ff 1f       	adc	r31, r31
    18e2:	30 96       	adiw	r30, 0x00	; 0
    18e4:	21 05       	cpc	r18, r1
    18e6:	31 05       	cpc	r19, r1
    18e8:	99 f1       	breq	.+102    	; 0x1950 <pow+0x74>
    18ea:	61 15       	cp	r22, r1
    18ec:	71 05       	cpc	r23, r1
    18ee:	61 f4       	brne	.+24     	; 0x1908 <pow+0x2c>
    18f0:	80 38       	cpi	r24, 0x80	; 128
    18f2:	bf e3       	ldi	r27, 0x3F	; 63
    18f4:	9b 07       	cpc	r25, r27
    18f6:	49 f1       	breq	.+82     	; 0x194a <pow+0x6e>
    18f8:	68 94       	set
    18fa:	90 38       	cpi	r25, 0x80	; 128
    18fc:	81 05       	cpc	r24, r1
    18fe:	61 f0       	breq	.+24     	; 0x1918 <pow+0x3c>
pow():
    1900:	80 38       	cpi	r24, 0x80	; 128
    1902:	bf ef       	ldi	r27, 0xFF	; 255
    1904:	9b 07       	cpc	r25, r27
    1906:	41 f0       	breq	.+16     	; 0x1918 <pow+0x3c>
    1908:	99 23       	and	r25, r25
    190a:	42 f5       	brpl	.+80     	; 0x195c <pow+0x80>
    190c:	ff 3f       	cpi	r31, 0xFF	; 255
    190e:	e1 05       	cpc	r30, r1
    1910:	31 05       	cpc	r19, r1
    1912:	21 05       	cpc	r18, r1
    1914:	11 f1       	breq	.+68     	; 0x195a <pow+0x7e>
    1916:	e8 94       	clt
    1918:	08 94       	sec
    191a:	e7 95       	ror	r30
    191c:	d9 01       	movw	r26, r18
    191e:	aa 23       	and	r26, r26
    1920:	29 f4       	brne	.+10     	; 0x192c <pow+0x50>
    1922:	ab 2f       	mov	r26, r27
    1924:	be 2f       	mov	r27, r30
    1926:	f8 5f       	subi	r31, 0xF8	; 248
    1928:	d0 f3       	brcs	.-12     	; 0x191e <pow+0x42>
    192a:	10 c0       	rjmp	.+32     	; 0x194c <pow+0x70>
    192c:	ff 5f       	subi	r31, 0xFF	; 255
    192e:	70 f4       	brcc	.+28     	; 0x194c <pow+0x70>
    1930:	a6 95       	lsr	r26
    1932:	e0 f7       	brcc	.-8      	; 0x192c <pow+0x50>
    1934:	f7 39       	cpi	r31, 0x97	; 151
    1936:	50 f0       	brcs	.+20     	; 0x194c <pow+0x70>
    1938:	19 f0       	breq	.+6      	; 0x1940 <pow+0x64>
    193a:	ff 3a       	cpi	r31, 0xAF	; 175
    193c:	38 f4       	brcc	.+14     	; 0x194c <pow+0x70>
    193e:	9f 77       	andi	r25, 0x7F	; 127
    1940:	9f 93       	push	r25
    1942:	0c d0       	rcall	.+24     	; 0x195c <pow+0x80>
    1944:	0f 90       	pop	r0
    1946:	07 fc       	sbrc	r0, 7
    1948:	90 58       	subi	r25, 0x80	; 128
    194a:	08 95       	ret
    194c:	3e f0       	brts	.+14     	; 0x195c <pow+0x80>
    194e:	14 cf       	rjmp	.-472    	; 0x1778 <__fp_nan>
    1950:	60 e0       	ldi	r22, 0x00	; 0
    1952:	70 e0       	ldi	r23, 0x00	; 0
    1954:	80 e8       	ldi	r24, 0x80	; 128
    1956:	9f e3       	ldi	r25, 0x3F	; 63
    1958:	08 95       	ret
    195a:	4f e7       	ldi	r20, 0x7F	; 127
    195c:	9f 77       	andi	r25, 0x7F	; 127
    195e:	5f 93       	push	r21
    1960:	4f 93       	push	r20
    1962:	3f 93       	push	r19
    1964:	2f 93       	push	r18
    1966:	a2 d0       	rcall	.+324    	; 0x1aac <log>
    1968:	2f 91       	pop	r18
    196a:	3f 91       	pop	r19
    196c:	4f 91       	pop	r20
    196e:	5f 91       	pop	r21
    1970:	52 df       	rcall	.-348    	; 0x1816 <__mulsf3>
    1972:	09 c0       	rjmp	.+18     	; 0x1986 <exp>

00001974 <__unordsf2>:
__unordsf2():
    1974:	d7 de       	rcall	.-594    	; 0x1724 <__fp_cmp>
    1976:	88 0b       	sbc	r24, r24
    1978:	99 0b       	sbc	r25, r25
    197a:	08 95       	ret
    197c:	19 f4       	brne	.+6      	; 0x1984 <__unordsf2+0x10>
    197e:	0e f0       	brts	.+2      	; 0x1982 <__unordsf2+0xe>
    1980:	f5 ce       	rjmp	.-534    	; 0x176c <__fp_inf>
    1982:	3e cf       	rjmp	.-388    	; 0x1800 <__fp_zero>
    1984:	f9 ce       	rjmp	.-526    	; 0x1778 <__fp_nan>

00001986 <exp>:
exp():
    1986:	22 df       	rcall	.-444    	; 0x17cc <__fp_splitA>
    1988:	c8 f3       	brcs	.-14     	; 0x197c <__unordsf2+0x8>
    198a:	96 38       	cpi	r25, 0x86	; 134
    198c:	c0 f7       	brcc	.-16     	; 0x197e <__unordsf2+0xa>
    198e:	07 f8       	bld	r0, 7
    1990:	0f 92       	push	r0
    1992:	e8 94       	clt
    1994:	2b e3       	ldi	r18, 0x3B	; 59
    1996:	3a ea       	ldi	r19, 0xAA	; 170
    1998:	48 eb       	ldi	r20, 0xB8	; 184
    199a:	5f e7       	ldi	r21, 0x7F	; 127
    199c:	4a df       	rcall	.-364    	; 0x1832 <__mulsf3_pse>
    199e:	0f 92       	push	r0
    19a0:	0f 92       	push	r0
    19a2:	0f 92       	push	r0
    19a4:	4d b7       	in	r20, 0x3d	; 61
    19a6:	5e b7       	in	r21, 0x3e	; 62
    19a8:	0f 92       	push	r0
    19aa:	c0 d0       	rcall	.+384    	; 0x1b2c <modf>
    19ac:	e8 e7       	ldi	r30, 0x78	; 120
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	16 d0       	rcall	.+44     	; 0x19de <__fp_powser>
    19b2:	4f 91       	pop	r20
    19b4:	5f 91       	pop	r21
    19b6:	ef 91       	pop	r30
    19b8:	ff 91       	pop	r31
    19ba:	e5 95       	asr	r30
    19bc:	ee 1f       	adc	r30, r30
    19be:	ff 1f       	adc	r31, r31
    19c0:	49 f0       	breq	.+18     	; 0x19d4 <exp+0x4e>
    19c2:	fe 57       	subi	r31, 0x7E	; 126
    19c4:	e0 68       	ori	r30, 0x80	; 128
    19c6:	44 27       	eor	r20, r20
    19c8:	ee 0f       	add	r30, r30
    19ca:	44 1f       	adc	r20, r20
    19cc:	fa 95       	dec	r31
    19ce:	e1 f7       	brne	.-8      	; 0x19c8 <exp+0x42>
    19d0:	41 95       	neg	r20
    19d2:	55 0b       	sbc	r21, r21
    19d4:	32 d0       	rcall	.+100    	; 0x1a3a <ldexp>
    19d6:	0f 90       	pop	r0
    19d8:	07 fe       	sbrs	r0, 7
    19da:	26 c0       	rjmp	.+76     	; 0x1a28 <inverse>
    19dc:	08 95       	ret

000019de <__fp_powser>:
    19de:	df 93       	push	r29
    19e0:	cf 93       	push	r28
    19e2:	1f 93       	push	r17
    19e4:	0f 93       	push	r16
    19e6:	ff 92       	push	r15
    19e8:	ef 92       	push	r14
    19ea:	df 92       	push	r13
    19ec:	7b 01       	movw	r14, r22
    19ee:	8c 01       	movw	r16, r24
    19f0:	68 94       	set
    19f2:	05 c0       	rjmp	.+10     	; 0x19fe <__fp_powser+0x20>
    19f4:	da 2e       	mov	r13, r26
    19f6:	ef 01       	movw	r28, r30
    19f8:	1a df       	rcall	.-460    	; 0x182e <__mulsf3x>
__fp_powser():
    19fa:	fe 01       	movw	r30, r28
    19fc:	e8 94       	clt
    19fe:	a5 91       	lpm	r26, Z+
    1a00:	25 91       	lpm	r18, Z+
    1a02:	35 91       	lpm	r19, Z+
    1a04:	45 91       	lpm	r20, Z+
    1a06:	55 91       	lpm	r21, Z+
    1a08:	ae f3       	brts	.-22     	; 0x19f4 <__fp_powser+0x16>
    1a0a:	ef 01       	movw	r28, r30
    1a0c:	63 dd       	rcall	.-1338   	; 0x14d4 <__addsf3x>
    1a0e:	fe 01       	movw	r30, r28
    1a10:	97 01       	movw	r18, r14
    1a12:	a8 01       	movw	r20, r16
    1a14:	da 94       	dec	r13
    1a16:	79 f7       	brne	.-34     	; 0x19f6 <__fp_powser+0x18>
    1a18:	df 90       	pop	r13
    1a1a:	ef 90       	pop	r14
    1a1c:	ff 90       	pop	r15
    1a1e:	0f 91       	pop	r16
    1a20:	1f 91       	pop	r17
    1a22:	cf 91       	pop	r28
    1a24:	df 91       	pop	r29
    1a26:	08 95       	ret

00001a28 <inverse>:
inverse():
    1a28:	9b 01       	movw	r18, r22
    1a2a:	ac 01       	movw	r20, r24
    1a2c:	60 e0       	ldi	r22, 0x00	; 0
    1a2e:	70 e0       	ldi	r23, 0x00	; 0
    1a30:	80 e8       	ldi	r24, 0x80	; 128
    1a32:	9f e3       	ldi	r25, 0x3F	; 63
    1a34:	a6 cd       	rjmp	.-1204   	; 0x1582 <__divsf3>
    1a36:	9a ce       	rjmp	.-716    	; 0x176c <__fp_inf>
    1a38:	ac c0       	rjmp	.+344    	; 0x1b92 <__fp_mpack>

00001a3a <ldexp>:
ldexp():
    1a3a:	c8 de       	rcall	.-624    	; 0x17cc <__fp_splitA>
    1a3c:	e8 f3       	brcs	.-6      	; 0x1a38 <inverse+0x10>
    1a3e:	99 23       	and	r25, r25
    1a40:	d9 f3       	breq	.-10     	; 0x1a38 <inverse+0x10>
    1a42:	94 0f       	add	r25, r20
    1a44:	51 1d       	adc	r21, r1
    1a46:	bb f3       	brvs	.-18     	; 0x1a36 <inverse+0xe>
    1a48:	91 50       	subi	r25, 0x01	; 1
    1a4a:	50 40       	sbci	r21, 0x00	; 0
    1a4c:	94 f0       	brlt	.+36     	; 0x1a72 <ldexp+0x38>
    1a4e:	59 f0       	breq	.+22     	; 0x1a66 <ldexp+0x2c>
    1a50:	88 23       	and	r24, r24
    1a52:	32 f0       	brmi	.+12     	; 0x1a60 <ldexp+0x26>
    1a54:	66 0f       	add	r22, r22
    1a56:	77 1f       	adc	r23, r23
    1a58:	88 1f       	adc	r24, r24
    1a5a:	91 50       	subi	r25, 0x01	; 1
    1a5c:	50 40       	sbci	r21, 0x00	; 0
    1a5e:	c1 f7       	brne	.-16     	; 0x1a50 <ldexp+0x16>
    1a60:	9e 3f       	cpi	r25, 0xFE	; 254
    1a62:	51 05       	cpc	r21, r1
    1a64:	44 f7       	brge	.-48     	; 0x1a36 <inverse+0xe>
    1a66:	88 0f       	add	r24, r24
    1a68:	91 1d       	adc	r25, r1
    1a6a:	96 95       	lsr	r25
    1a6c:	87 95       	ror	r24
    1a6e:	97 f9       	bld	r25, 7
    1a70:	08 95       	ret
    1a72:	5f 3f       	cpi	r21, 0xFF	; 255
    1a74:	ac f0       	brlt	.+42     	; 0x1aa0 <ldexp+0x66>
    1a76:	98 3e       	cpi	r25, 0xE8	; 232
    1a78:	9c f0       	brlt	.+38     	; 0x1aa0 <ldexp+0x66>
    1a7a:	bb 27       	eor	r27, r27
    1a7c:	86 95       	lsr	r24
    1a7e:	77 95       	ror	r23
    1a80:	67 95       	ror	r22
    1a82:	b7 95       	ror	r27
    1a84:	08 f4       	brcc	.+2      	; 0x1a88 <ldexp+0x4e>
    1a86:	b1 60       	ori	r27, 0x01	; 1
    1a88:	93 95       	inc	r25
    1a8a:	c1 f7       	brne	.-16     	; 0x1a7c <ldexp+0x42>
    1a8c:	bb 0f       	add	r27, r27
    1a8e:	58 f7       	brcc	.-42     	; 0x1a66 <ldexp+0x2c>
    1a90:	11 f4       	brne	.+4      	; 0x1a96 <ldexp+0x5c>
    1a92:	60 ff       	sbrs	r22, 0
    1a94:	e8 cf       	rjmp	.-48     	; 0x1a66 <ldexp+0x2c>
    1a96:	6f 5f       	subi	r22, 0xFF	; 255
    1a98:	7f 4f       	sbci	r23, 0xFF	; 255
    1a9a:	8f 4f       	sbci	r24, 0xFF	; 255
    1a9c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a9e:	e3 cf       	rjmp	.-58     	; 0x1a66 <ldexp+0x2c>
    1aa0:	b0 ce       	rjmp	.-672    	; 0x1802 <__fp_szero>
    1aa2:	0e f0       	brts	.+2      	; 0x1aa6 <ldexp+0x6c>
    1aa4:	76 c0       	rjmp	.+236    	; 0x1b92 <__fp_mpack>
    1aa6:	68 ce       	rjmp	.-816    	; 0x1778 <__fp_nan>
    1aa8:	68 94       	set
    1aaa:	60 ce       	rjmp	.-832    	; 0x176c <__fp_inf>

00001aac <log>:
    1aac:	8f de       	rcall	.-738    	; 0x17cc <__fp_splitA>
log():
    1aae:	c8 f3       	brcs	.-14     	; 0x1aa2 <ldexp+0x68>
    1ab0:	99 23       	and	r25, r25
    1ab2:	d1 f3       	breq	.-12     	; 0x1aa8 <ldexp+0x6e>
    1ab4:	c6 f3       	brts	.-16     	; 0x1aa6 <ldexp+0x6c>
    1ab6:	df 93       	push	r29
    1ab8:	cf 93       	push	r28
    1aba:	1f 93       	push	r17
    1abc:	0f 93       	push	r16
    1abe:	ff 92       	push	r15
    1ac0:	c9 2f       	mov	r28, r25
    1ac2:	dd 27       	eor	r29, r29
    1ac4:	88 23       	and	r24, r24
    1ac6:	2a f0       	brmi	.+10     	; 0x1ad2 <log+0x26>
    1ac8:	21 97       	sbiw	r28, 0x01	; 1
    1aca:	66 0f       	add	r22, r22
    1acc:	77 1f       	adc	r23, r23
    1ace:	88 1f       	adc	r24, r24
    1ad0:	da f7       	brpl	.-10     	; 0x1ac8 <log+0x1c>
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	40 e8       	ldi	r20, 0x80	; 128
    1ad8:	5f eb       	ldi	r21, 0xBF	; 191
    1ada:	9f e3       	ldi	r25, 0x3F	; 63
    1adc:	88 39       	cpi	r24, 0x98	; 152
    1ade:	20 f0       	brcs	.+8      	; 0x1ae8 <log+0x3c>
    1ae0:	80 3e       	cpi	r24, 0xE0	; 224
    1ae2:	30 f0       	brcs	.+12     	; 0x1af0 <log+0x44>
    1ae4:	21 96       	adiw	r28, 0x01	; 1
    1ae6:	8f 77       	andi	r24, 0x7F	; 127
    1ae8:	e4 dc       	rcall	.-1592   	; 0x14b2 <__addsf3>
    1aea:	e0 ea       	ldi	r30, 0xA0	; 160
    1aec:	f0 e0       	ldi	r31, 0x00	; 0
    1aee:	03 c0       	rjmp	.+6      	; 0x1af6 <log+0x4a>
    1af0:	e0 dc       	rcall	.-1600   	; 0x14b2 <__addsf3>
    1af2:	ed ec       	ldi	r30, 0xCD	; 205
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	73 df       	rcall	.-282    	; 0x19de <__fp_powser>
    1af8:	8b 01       	movw	r16, r22
    1afa:	be 01       	movw	r22, r28
    1afc:	ec 01       	movw	r28, r24
    1afe:	fb 2e       	mov	r15, r27
    1b00:	6f 57       	subi	r22, 0x7F	; 127
    1b02:	71 09       	sbc	r23, r1
    1b04:	75 95       	asr	r23
    1b06:	77 1f       	adc	r23, r23
    1b08:	88 0b       	sbc	r24, r24
    1b0a:	99 0b       	sbc	r25, r25
    1b0c:	d0 dd       	rcall	.-1120   	; 0x16ae <__floatsisf>
    1b0e:	28 e1       	ldi	r18, 0x18	; 24
    1b10:	32 e7       	ldi	r19, 0x72	; 114
    1b12:	41 e3       	ldi	r20, 0x31	; 49
    1b14:	5f e3       	ldi	r21, 0x3F	; 63
    1b16:	8b de       	rcall	.-746    	; 0x182e <__mulsf3x>
    1b18:	af 2d       	mov	r26, r15
    1b1a:	98 01       	movw	r18, r16
    1b1c:	ae 01       	movw	r20, r28
    1b1e:	ff 90       	pop	r15
    1b20:	0f 91       	pop	r16
    1b22:	1f 91       	pop	r17
    1b24:	cf 91       	pop	r28
    1b26:	df 91       	pop	r29
    1b28:	d5 dc       	rcall	.-1622   	; 0x14d4 <__addsf3x>
    1b2a:	37 ce       	rjmp	.-914    	; 0x179a <__fp_round>

00001b2c <modf>:
    1b2c:	fa 01       	movw	r30, r20
    1b2e:	dc 01       	movw	r26, r24
    1b30:	aa 0f       	add	r26, r26
    1b32:	bb 1f       	adc	r27, r27
    1b34:	9b 01       	movw	r18, r22
    1b36:	ac 01       	movw	r20, r24
    1b38:	bf 57       	subi	r27, 0x7F	; 127
    1b3a:	28 f4       	brcc	.+10     	; 0x1b46 <modf+0x1a>
    1b3c:	22 27       	eor	r18, r18
    1b3e:	33 27       	eor	r19, r19
    1b40:	44 27       	eor	r20, r20
    1b42:	50 78       	andi	r21, 0x80	; 128
    1b44:	1f c0       	rjmp	.+62     	; 0x1b84 <modf+0x58>
    1b46:	b7 51       	subi	r27, 0x17	; 23
    1b48:	88 f4       	brcc	.+34     	; 0x1b6c <modf+0x40>
    1b4a:	ab 2f       	mov	r26, r27
modf():
    1b4c:	00 24       	eor	r0, r0
    1b4e:	46 95       	lsr	r20
    1b50:	37 95       	ror	r19
    1b52:	27 95       	ror	r18
    1b54:	01 1c       	adc	r0, r1
    1b56:	a3 95       	inc	r26
    1b58:	d2 f3       	brmi	.-12     	; 0x1b4e <modf+0x22>
    1b5a:	00 20       	and	r0, r0
    1b5c:	69 f0       	breq	.+26     	; 0x1b78 <modf+0x4c>
    1b5e:	22 0f       	add	r18, r18
    1b60:	33 1f       	adc	r19, r19
    1b62:	44 1f       	adc	r20, r20
    1b64:	b3 95       	inc	r27
    1b66:	da f3       	brmi	.-10     	; 0x1b5e <modf+0x32>
    1b68:	0d d0       	rcall	.+26     	; 0x1b84 <modf+0x58>
    1b6a:	a2 cc       	rjmp	.-1724   	; 0x14b0 <__subsf3>
    1b6c:	61 30       	cpi	r22, 0x01	; 1
    1b6e:	71 05       	cpc	r23, r1
    1b70:	a0 e8       	ldi	r26, 0x80	; 128
    1b72:	8a 07       	cpc	r24, r26
    1b74:	b9 46       	sbci	r27, 0x69	; 105
    1b76:	30 f4       	brcc	.+12     	; 0x1b84 <modf+0x58>
    1b78:	9b 01       	movw	r18, r22
    1b7a:	ac 01       	movw	r20, r24
    1b7c:	66 27       	eor	r22, r22
    1b7e:	77 27       	eor	r23, r23
    1b80:	88 27       	eor	r24, r24
    1b82:	90 78       	andi	r25, 0x80	; 128
    1b84:	30 96       	adiw	r30, 0x00	; 0
    1b86:	21 f0       	breq	.+8      	; 0x1b90 <modf+0x64>
    1b88:	20 83       	st	Z, r18
    1b8a:	31 83       	std	Z+1, r19	; 0x01
    1b8c:	42 83       	std	Z+2, r20	; 0x02
    1b8e:	53 83       	std	Z+3, r21	; 0x03
    1b90:	08 95       	ret

00001b92 <__fp_mpack>:
__fp_mpack():
    1b92:	9f 3f       	cpi	r25, 0xFF	; 255
    1b94:	31 f0       	breq	.+12     	; 0x1ba2 <__fp_mpack_finite+0xc>

00001b96 <__fp_mpack_finite>:
    1b96:	91 50       	subi	r25, 0x01	; 1
    1b98:	20 f4       	brcc	.+8      	; 0x1ba2 <__fp_mpack_finite+0xc>
    1b9a:	87 95       	ror	r24
    1b9c:	77 95       	ror	r23
    1b9e:	67 95       	ror	r22
    1ba0:	b7 95       	ror	r27
    1ba2:	88 0f       	add	r24, r24
    1ba4:	91 1d       	adc	r25, r1
    1ba6:	96 95       	lsr	r25
    1ba8:	87 95       	ror	r24
    1baa:	97 f9       	bld	r25, 7
    1bac:	08 95       	ret

00001bae <__mulsi3>:
__mulsi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:648
    1bae:	db 01       	movw	r26, r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:649
    1bb0:	8f 93       	push	r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:650
    1bb2:	9f 93       	push	r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:651
    1bb4:	2d d0       	rcall	.+90     	; 0x1c10 <__muluhisi3>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:652
    1bb6:	bf 91       	pop	r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:653
    1bb8:	af 91       	pop	r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:655
    1bba:	a2 9f       	mul	r26, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:656
    1bbc:	80 0d       	add	r24, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:657
    1bbe:	91 1d       	adc	r25, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:658
    1bc0:	a3 9f       	mul	r26, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:659
    1bc2:	90 0d       	add	r25, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:660
    1bc4:	b2 9f       	mul	r27, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:661
    1bc6:	90 0d       	add	r25, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:662
    1bc8:	11 24       	eor	r1, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:663
    1bca:	08 95       	ret

00001bcc <__udivmodsi4>:
__udivmodsi4():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    1bcc:	a1 e2       	ldi	r26, 0x21	; 33
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    1bce:	1a 2e       	mov	r1, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    1bd0:	aa 1b       	sub	r26, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    1bd2:	bb 1b       	sub	r27, r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    1bd4:	fd 01       	movw	r30, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    1bd6:	0d c0       	rjmp	.+26     	; 0x1bf2 <__udivmodsi4_ep>

00001bd8 <__udivmodsi4_loop>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    1bd8:	aa 1f       	adc	r26, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    1bda:	bb 1f       	adc	r27, r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    1bdc:	ee 1f       	adc	r30, r30
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    1bde:	ff 1f       	adc	r31, r31
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    1be0:	a2 17       	cp	r26, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    1be2:	b3 07       	cpc	r27, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    1be4:	e4 07       	cpc	r30, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    1be6:	f5 07       	cpc	r31, r21
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    1be8:	20 f0       	brcs	.+8      	; 0x1bf2 <__udivmodsi4_ep>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    1bea:	a2 1b       	sub	r26, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    1bec:	b3 0b       	sbc	r27, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    1bee:	e4 0b       	sbc	r30, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    1bf0:	f5 0b       	sbc	r31, r21

00001bf2 <__udivmodsi4_ep>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    1bf2:	66 1f       	adc	r22, r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    1bf4:	77 1f       	adc	r23, r23
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    1bf6:	88 1f       	adc	r24, r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    1bf8:	99 1f       	adc	r25, r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    1bfa:	1a 94       	dec	r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    1bfc:	69 f7       	brne	.-38     	; 0x1bd8 <__udivmodsi4_loop>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    1bfe:	60 95       	com	r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    1c00:	70 95       	com	r23
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    1c02:	80 95       	com	r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    1c04:	90 95       	com	r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    1c06:	9b 01       	movw	r18, r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    1c08:	ac 01       	movw	r20, r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    1c0a:	bd 01       	movw	r22, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    1c0c:	cf 01       	movw	r24, r30
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    1c0e:	08 95       	ret

00001c10 <__muluhisi3>:
__muluhisi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    1c10:	52 d1       	rcall	.+676    	; 0x1eb6 <__umulhisi3>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    1c12:	a5 9f       	mul	r26, r21
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    1c14:	90 0d       	add	r25, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    1c16:	b4 9f       	mul	r27, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    1c18:	90 0d       	add	r25, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    1c1a:	a4 9f       	mul	r26, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    1c1c:	80 0d       	add	r24, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    1c1e:	91 1d       	adc	r25, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    1c20:	11 24       	eor	r1, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    1c22:	08 95       	ret

00001c24 <__mulshisi3>:
__mulshisi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:603
    1c24:	b7 ff       	sbrs	r27, 7
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:605
    1c26:	f4 cf       	rjmp	.-24     	; 0x1c10 <__muluhisi3>

00001c28 <__mulohisi3>:
__mulohisi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:613
    1c28:	f3 df       	rcall	.-26     	; 0x1c10 <__muluhisi3>
    1c2a:	82 1b       	sub	r24, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:615
    1c2c:	93 0b       	sbc	r25, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:616
    1c2e:	08 95       	ret

00001c30 <__muldi3>:
__muldi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:617
    1c30:	df 93       	push	r29
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:895
    1c32:	cf 93       	push	r28
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:896
    1c34:	1f 93       	push	r17
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:897
    1c36:	0f 93       	push	r16
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:902
    1c38:	9a 9d       	mul	r25, r10
    1c3a:	f0 2d       	mov	r31, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:903
    1c3c:	21 9f       	mul	r18, r17
    1c3e:	f0 0d       	add	r31, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:904
    1c40:	8b 9d       	mul	r24, r11
    1c42:	f0 0d       	add	r31, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:905
    1c44:	8a 9d       	mul	r24, r10
    1c46:	e0 2d       	mov	r30, r0
    1c48:	f1 0d       	add	r31, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:906
    1c4a:	03 9f       	mul	r16, r19
    1c4c:	f0 0d       	add	r31, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:907
    1c4e:	02 9f       	mul	r16, r18
    1c50:	e0 0d       	add	r30, r0
    1c52:	f1 1d       	adc	r31, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:910
    1c54:	4e 9d       	mul	r20, r14
    1c56:	e0 0d       	add	r30, r0
    1c58:	f1 1d       	adc	r31, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:911
    1c5a:	5e 9d       	mul	r21, r14
    1c5c:	f0 0d       	add	r31, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:912
    1c5e:	4f 9d       	mul	r20, r15
    1c60:	f0 0d       	add	r31, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:914
    1c62:	7f 93       	push	r23
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:915
    1c64:	6f 93       	push	r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:916
    1c66:	bf 92       	push	r11
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:917
    1c68:	af 92       	push	r10
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:918
    1c6a:	5f 93       	push	r21
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:919
    1c6c:	4f 93       	push	r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:922
    1c6e:	d5 01       	movw	r26, r10
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:923
    1c70:	22 d1       	rcall	.+580    	; 0x1eb6 <__umulhisi3>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:924
    1c72:	8b 01       	movw	r16, r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:925
    1c74:	ac 01       	movw	r20, r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:929
    1c76:	d7 01       	movw	r26, r14
    1c78:	1e d1       	rcall	.+572    	; 0x1eb6 <__umulhisi3>
    1c7a:	eb 01       	movw	r28, r22
    1c7c:	e8 0f       	add	r30, r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:931
    1c7e:	f9 1f       	adc	r31, r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:933
    1c80:	d6 01       	movw	r26, r12
    1c82:	1e d0       	rcall	.+60     	; 0x1cc0 <__muldi3_6>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:936
    1c84:	2f 91       	pop	r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:938
    1c86:	3f 91       	pop	r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:939
    1c88:	d6 01       	movw	r26, r12
    1c8a:	15 d1       	rcall	.+554    	; 0x1eb6 <__umulhisi3>
    1c8c:	c6 0f       	add	r28, r22
    1c8e:	d7 1f       	adc	r29, r23
    1c90:	e8 1f       	adc	r30, r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:941
    1c92:	f9 1f       	adc	r31, r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:944
    1c94:	af 91       	pop	r26
    1c96:	bf 91       	pop	r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:946
    1c98:	13 d0       	rcall	.+38     	; 0x1cc0 <__muldi3_6>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:947
    1c9a:	2f 91       	pop	r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:949
    1c9c:	3f 91       	pop	r19
    1c9e:	0b d1       	rcall	.+534    	; 0x1eb6 <__umulhisi3>
    1ca0:	c6 0f       	add	r28, r22
    1ca2:	d7 1f       	adc	r29, r23
    1ca4:	e8 1f       	adc	r30, r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:952
    1ca6:	f9 1f       	adc	r31, r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:953
    1ca8:	d6 01       	movw	r26, r12
    1caa:	05 d1       	rcall	.+522    	; 0x1eb6 <__umulhisi3>
    1cac:	e6 0f       	add	r30, r22
    1cae:	f7 1f       	adc	r31, r23
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:956
    1cb0:	98 01       	movw	r18, r16
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:958
    1cb2:	be 01       	movw	r22, r28
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:959
    1cb4:	cf 01       	movw	r24, r30
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:961
    1cb6:	0f 91       	pop	r16
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:962
    1cb8:	1f 91       	pop	r17
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:963
    1cba:	cf 91       	pop	r28
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:964
    1cbc:	df 91       	pop	r29
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:965
    1cbe:	08 95       	ret

00001cc0 <__muldi3_6>:
__muldi3_6():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:973
    1cc0:	fa d0       	rcall	.+500    	; 0x1eb6 <__umulhisi3>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:974
    1cc2:	46 0f       	add	r20, r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:975
    1cc4:	57 1f       	adc	r21, r23
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:976
    1cc6:	c8 1f       	adc	r28, r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:977
    1cc8:	d9 1f       	adc	r29, r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:978
    1cca:	08 f4       	brcc	.+2      	; 0x1cce <__muldi3_6+0xe>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:979
    1ccc:	31 96       	adiw	r30, 0x01	; 1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:980
    1cce:	08 95       	ret

00001cd0 <__moddi3>:
__moddi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1964
    1cd0:	68 94       	set
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1965
    1cd2:	01 c0       	rjmp	.+2      	; 0x1cd6 <__divdi3_moddi3>

00001cd4 <__divdi3>:
__divdi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1972
    1cd4:	e8 94       	clt

00001cd6 <__divdi3_moddi3>:
__divdi3_moddi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1977
    1cd6:	f9 2f       	mov	r31, r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1978
    1cd8:	f1 2b       	or	r31, r17
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1979
    1cda:	0a f0       	brmi	.+2      	; 0x1cde <__divdi3_moddi3+0x8>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1981
    1cdc:	27 c0       	rjmp	.+78     	; 0x1d2c <__udivdi3_umoddi3>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1987
    1cde:	a0 e0       	ldi	r26, 0x00	; 0
    1ce0:	b0 e0       	ldi	r27, 0x00	; 0
    1ce2:	e4 e7       	ldi	r30, 0x74	; 116
    1ce4:	fe e0       	ldi	r31, 0x0E	; 14
    1ce6:	b9 cb       	rjmp	.-2190   	; 0x145a <__prologue_saves__+0xc>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1991
    1ce8:	09 2e       	mov	r0, r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1997
    1cea:	05 94       	asr	r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2002
    1cec:	1a f4       	brpl	.+6      	; 0x1cf4 <__divdi3_moddi3+0x1e>
    1cee:	79 d0       	rcall	.+242    	; 0x1de2 <__negdi2>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2005
    1cf0:	11 23       	and	r17, r17
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2006
    1cf2:	92 f4       	brpl	.+36     	; 0x1d18 <__divdi3_moddi3+0x42>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2007
    1cf4:	f0 e8       	ldi	r31, 0x80	; 128
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2008
    1cf6:	0f 26       	eor	r0, r31
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2010
    1cf8:	ff ef       	ldi	r31, 0xFF	; 255
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2011
    1cfa:	e0 94       	com	r14
    1cfc:	f0 94       	com	r15
    1cfe:	00 95       	com	r16
    1d00:	10 95       	com	r17
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2012
    1d02:	b0 94       	com	r11
    1d04:	c0 94       	com	r12
    1d06:	d0 94       	com	r13
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2013
    1d08:	a1 94       	neg	r10
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2014
    1d0a:	bf 0a       	sbc	r11, r31
    1d0c:	cf 0a       	sbc	r12, r31
    1d0e:	df 0a       	sbc	r13, r31
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2015
    1d10:	ef 0a       	sbc	r14, r31
    1d12:	ff 0a       	sbc	r15, r31
    1d14:	0f 0b       	sbc	r16, r31
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2018
    1d16:	1f 0b       	sbc	r17, r31
    1d18:	13 d0       	rcall	.+38     	; 0x1d40 <__udivmod64>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2025
    1d1a:	07 fc       	sbrc	r0, 7
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2027
    1d1c:	62 d0       	rcall	.+196    	; 0x1de2 <__negdi2>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2030
    1d1e:	cd b7       	in	r28, 0x3d	; 61
    1d20:	de b7       	in	r29, 0x3e	; 62
    1d22:	ec e0       	ldi	r30, 0x0C	; 12
    1d24:	b3 cb       	rjmp	.-2202   	; 0x148c <__epilogue_restores__+0xc>

00001d26 <__umoddi3>:
__umoddi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1806
    1d26:	68 94       	set
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1807
    1d28:	01 c0       	rjmp	.+2      	; 0x1d2c <__udivdi3_umoddi3>

00001d2a <__udivdi3>:
__udivdi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1814
    1d2a:	e8 94       	clt

00001d2c <__udivdi3_umoddi3>:
__udivdi3_umoddi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1818
    1d2c:	8f 92       	push	r8
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1819
    1d2e:	9f 92       	push	r9
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1820
    1d30:	cf 93       	push	r28
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1821
    1d32:	df 93       	push	r29
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1822
    1d34:	05 d0       	rcall	.+10     	; 0x1d40 <__udivmod64>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1823
    1d36:	df 91       	pop	r29
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1824
    1d38:	cf 91       	pop	r28
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1825
    1d3a:	9f 90       	pop	r9
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1826
    1d3c:	8f 90       	pop	r8
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1827
    1d3e:	08 95       	ret

00001d40 <__udivmod64>:
__udivmod64():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1842
    1d40:	88 24       	eor	r8, r8
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1843
    1d42:	99 24       	eor	r9, r9
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1844
    1d44:	f4 01       	movw	r30, r8
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1845
    1d46:	e4 01       	movw	r28, r8
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1846
    1d48:	b0 e4       	ldi	r27, 0x40	; 64
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1856
    1d4a:	9f 93       	push	r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1857
    1d4c:	aa 27       	eor	r26, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1861
    1d4e:	9a 15       	cp	r25, r10
    1d50:	8b 04       	cpc	r8, r11
    1d52:	9c 04       	cpc	r9, r12
    1d54:	ed 05       	cpc	r30, r13
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1862
    1d56:	fe 05       	cpc	r31, r14
    1d58:	cf 05       	cpc	r28, r15
    1d5a:	d0 07       	cpc	r29, r16
    1d5c:	a1 07       	cpc	r26, r17
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1863
    1d5e:	98 f4       	brcc	.+38     	; 0x1d86 <__udivmod64+0x46>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1866
    1d60:	ad 2f       	mov	r26, r29
    1d62:	dc 2f       	mov	r29, r28
    1d64:	cf 2f       	mov	r28, r31
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1867
    1d66:	fe 2f       	mov	r31, r30
    1d68:	e9 2d       	mov	r30, r9
    1d6a:	98 2c       	mov	r9, r8
    1d6c:	89 2e       	mov	r8, r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1868
    1d6e:	98 2f       	mov	r25, r24
    1d70:	87 2f       	mov	r24, r23
    1d72:	76 2f       	mov	r23, r22
    1d74:	65 2f       	mov	r22, r21
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1869
    1d76:	54 2f       	mov	r21, r20
    1d78:	43 2f       	mov	r20, r19
    1d7a:	32 2f       	mov	r19, r18
    1d7c:	22 27       	eor	r18, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1872
    1d7e:	b8 50       	subi	r27, 0x08	; 8
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1873
    1d80:	31 f7       	brne	.-52     	; 0x1d4e <__udivmod64+0xe>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1876
    1d82:	bf 91       	pop	r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1881
    1d84:	27 c0       	rjmp	.+78     	; 0x1dd4 <__udivmod64+0x94>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1884
    1d86:	1b 2e       	mov	r1, r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1887
    1d88:	bf 91       	pop	r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1888
    1d8a:	bb 27       	eor	r27, r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1916
    1d8c:	22 0f       	add	r18, r18
    1d8e:	33 1f       	adc	r19, r19
    1d90:	44 1f       	adc	r20, r20
    1d92:	55 1f       	adc	r21, r21
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1917
    1d94:	66 1f       	adc	r22, r22
    1d96:	77 1f       	adc	r23, r23
    1d98:	88 1f       	adc	r24, r24
    1d9a:	99 1f       	adc	r25, r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1920
    1d9c:	88 1c       	adc	r8, r8
    1d9e:	99 1c       	adc	r9, r9
    1da0:	ee 1f       	adc	r30, r30
    1da2:	ff 1f       	adc	r31, r31
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1921
    1da4:	cc 1f       	adc	r28, r28
    1da6:	dd 1f       	adc	r29, r29
    1da8:	aa 1f       	adc	r26, r26
    1daa:	bb 1f       	adc	r27, r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1924
    1dac:	8a 14       	cp	r8, r10
    1dae:	9b 04       	cpc	r9, r11
    1db0:	ec 05       	cpc	r30, r12
    1db2:	fd 05       	cpc	r31, r13
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1925
    1db4:	ce 05       	cpc	r28, r14
    1db6:	df 05       	cpc	r29, r15
    1db8:	a0 07       	cpc	r26, r16
    1dba:	b1 07       	cpc	r27, r17
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1927
    1dbc:	48 f0       	brcs	.+18     	; 0x1dd0 <__udivmod64+0x90>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1930
    1dbe:	8a 18       	sub	r8, r10
    1dc0:	9b 08       	sbc	r9, r11
    1dc2:	ec 09       	sbc	r30, r12
    1dc4:	fd 09       	sbc	r31, r13
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1931
    1dc6:	ce 09       	sbc	r28, r14
    1dc8:	df 09       	sbc	r29, r15
    1dca:	a0 0b       	sbc	r26, r16
    1dcc:	b1 0b       	sbc	r27, r17
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1935
    1dce:	21 60       	ori	r18, 0x01	; 1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1938
    1dd0:	1a 94       	dec	r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1939
    1dd2:	e1 f6       	brne	.-72     	; 0x1d8c <__udivmod64+0x4c>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1944
    1dd4:	2e f4       	brtc	.+10     	; 0x1de0 <__udivmod64+0xa0>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1945
    1dd6:	94 01       	movw	r18, r8
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1946
    1dd8:	af 01       	movw	r20, r30
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1947
    1dda:	be 01       	movw	r22, r28
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1948
    1ddc:	cd 01       	movw	r24, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1950
    1dde:	00 0c       	add	r0, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1952
    1de0:	08 95       	ret

00001de2 <__negdi2>:
__negdi2():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2117
    1de2:	60 95       	com	r22
    1de4:	70 95       	com	r23
    1de6:	80 95       	com	r24
    1de8:	90 95       	com	r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2118
    1dea:	30 95       	com	r19
    1dec:	40 95       	com	r20
    1dee:	50 95       	com	r21
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2119
    1df0:	21 95       	neg	r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2120
    1df2:	3f 4f       	sbci	r19, 0xFF	; 255
    1df4:	4f 4f       	sbci	r20, 0xFF	; 255
    1df6:	5f 4f       	sbci	r21, 0xFF	; 255
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2121
    1df8:	6f 4f       	sbci	r22, 0xFF	; 255
    1dfa:	7f 4f       	sbci	r23, 0xFF	; 255
    1dfc:	8f 4f       	sbci	r24, 0xFF	; 255
    1dfe:	9f 4f       	sbci	r25, 0xFF	; 255
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2122
    1e00:	08 95       	ret

00001e02 <__ashldi3>:
__ashldi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3169
    1e02:	00 2e       	mov	r0, r16
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3170
    1e04:	08 30       	cpi	r16, 0x08	; 8
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3171
    1e06:	90 f0       	brcs	.+36     	; 0x1e2c <__ashldi3+0x2a>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3172
    1e08:	98 2f       	mov	r25, r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3173
    1e0a:	87 2f       	mov	r24, r23
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3174
    1e0c:	76 2f       	mov	r23, r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3175
    1e0e:	65 2f       	mov	r22, r21
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3176
    1e10:	54 2f       	mov	r21, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3177
    1e12:	43 2f       	mov	r20, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3178
    1e14:	32 2f       	mov	r19, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3179
    1e16:	22 27       	eor	r18, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3180
    1e18:	08 50       	subi	r16, 0x08	; 8
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3181
    1e1a:	f4 cf       	rjmp	.-24     	; 0x1e04 <__ashldi3+0x2>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3182
    1e1c:	22 0f       	add	r18, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3183
    1e1e:	33 1f       	adc	r19, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3184
    1e20:	44 1f       	adc	r20, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3185
    1e22:	55 1f       	adc	r21, r21
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3186
    1e24:	66 1f       	adc	r22, r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3187
    1e26:	77 1f       	adc	r23, r23
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3188
    1e28:	88 1f       	adc	r24, r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3189
    1e2a:	99 1f       	adc	r25, r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3190
    1e2c:	0a 95       	dec	r16
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3191
    1e2e:	b2 f7       	brpl	.-20     	; 0x1e1c <__ashldi3+0x1a>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3192
    1e30:	00 2d       	mov	r16, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3193
    1e32:	08 95       	ret

00001e34 <__ashrdi3>:
__ashrdi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3122
    1e34:	97 fd       	sbrc	r25, 7
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3123
    1e36:	10 94       	com	r1

00001e38 <__lshrdi3>:
__lshrdi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3131
    1e38:	00 2e       	mov	r0, r16
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3132
    1e3a:	08 30       	cpi	r16, 0x08	; 8
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3133
    1e3c:	98 f0       	brcs	.+38     	; 0x1e64 <__lshrdi3+0x2c>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3134
    1e3e:	08 50       	subi	r16, 0x08	; 8
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3135
    1e40:	23 2f       	mov	r18, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3136
    1e42:	34 2f       	mov	r19, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3137
    1e44:	45 2f       	mov	r20, r21
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3138
    1e46:	56 2f       	mov	r21, r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3139
    1e48:	67 2f       	mov	r22, r23
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3140
    1e4a:	78 2f       	mov	r23, r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3141
    1e4c:	89 2f       	mov	r24, r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3142
    1e4e:	91 2d       	mov	r25, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3143
    1e50:	f4 cf       	rjmp	.-24     	; 0x1e3a <__lshrdi3+0x2>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3144
    1e52:	15 94       	asr	r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3145
    1e54:	97 95       	ror	r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3146
    1e56:	87 95       	ror	r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3147
    1e58:	77 95       	ror	r23
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3148
    1e5a:	67 95       	ror	r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3149
    1e5c:	57 95       	ror	r21
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3150
    1e5e:	47 95       	ror	r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3151
    1e60:	37 95       	ror	r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3152
    1e62:	27 95       	ror	r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3153
    1e64:	0a 95       	dec	r16
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3154
    1e66:	aa f7       	brpl	.-22     	; 0x1e52 <__lshrdi3+0x1a>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3155
    1e68:	11 24       	eor	r1, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3156
    1e6a:	00 2d       	mov	r16, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3157
    1e6c:	08 95       	ret

00001e6e <__adddi3>:
__adddi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2051
    1e6e:	2a 0d       	add	r18, r10
    1e70:	3b 1d       	adc	r19, r11
    1e72:	4c 1d       	adc	r20, r12
    1e74:	5d 1d       	adc	r21, r13
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2052
    1e76:	6e 1d       	adc	r22, r14
    1e78:	7f 1d       	adc	r23, r15
    1e7a:	80 1f       	adc	r24, r16
    1e7c:	91 1f       	adc	r25, r17
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2053
    1e7e:	08 95       	ret

00001e80 <__subdi3>:
__subdi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2080
    1e80:	2a 19       	sub	r18, r10
    1e82:	3b 09       	sbc	r19, r11
    1e84:	4c 09       	sbc	r20, r12
    1e86:	5d 09       	sbc	r21, r13
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2081
    1e88:	6e 09       	sbc	r22, r14
    1e8a:	7f 09       	sbc	r23, r15
    1e8c:	80 0b       	sbc	r24, r16
    1e8e:	91 0b       	sbc	r25, r17
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2082
    1e90:	08 95       	ret

00001e92 <__cmpdi2_s8>:
__cmpdi2_s8():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2102
    1e92:	00 24       	eor	r0, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2103
    1e94:	a7 fd       	sbrc	r26, 7
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2104
    1e96:	00 94       	com	r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2105
    1e98:	2a 17       	cp	r18, r26
    1e9a:	30 05       	cpc	r19, r0
    1e9c:	40 05       	cpc	r20, r0
    1e9e:	50 05       	cpc	r21, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2106
    1ea0:	60 05       	cpc	r22, r0
    1ea2:	70 05       	cpc	r23, r0
    1ea4:	80 05       	cpc	r24, r0
    1ea6:	90 05       	cpc	r25, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2107
    1ea8:	08 95       	ret

00001eaa <__tablejump2__>:
__tablejump2__():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    1eaa:	ee 0f       	add	r30, r30
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    1eac:	ff 1f       	adc	r31, r31
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    1eae:	05 90       	lpm	r0, Z+
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    1eb0:	f4 91       	lpm	r31, Z
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    1eb2:	e0 2d       	mov	r30, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    1eb4:	09 94       	ijmp

00001eb6 <__umulhisi3>:
__umulhisi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    1eb6:	a2 9f       	mul	r26, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    1eb8:	b0 01       	movw	r22, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    1eba:	b3 9f       	mul	r27, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    1ebc:	c0 01       	movw	r24, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    1ebe:	a3 9f       	mul	r26, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    1ec0:	70 0d       	add	r23, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    1ec2:	81 1d       	adc	r24, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    1ec4:	11 24       	eor	r1, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    1ec6:	91 1d       	adc	r25, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    1ec8:	b2 9f       	mul	r27, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    1eca:	70 0d       	add	r23, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    1ecc:	81 1d       	adc	r24, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    1ece:	11 24       	eor	r1, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    1ed0:	91 1d       	adc	r25, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    1ed2:	08 95       	ret

00001ed4 <_exit>:
exit():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    1ed4:	f8 94       	cli

00001ed6 <__stop_program>:
__stop_program():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    1ed6:	ff cf       	rjmp	.-2      	; 0x1ed6 <__stop_program>
