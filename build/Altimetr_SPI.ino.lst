
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI\build/Altimetr_SPI.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
../../../../crt1/gcrt1.S:61
       0:	7d c0       	rjmp	.+250    	; 0xfc <__ctors_end>
       2:	00 00       	nop
../../../../crt1/gcrt1.S:67
       4:	a3 c0       	rjmp	.+326    	; 0x14c <__bad_interrupt>
       6:	00 00       	nop
../../../../crt1/gcrt1.S:68
       8:	a1 c0       	rjmp	.+322    	; 0x14c <__bad_interrupt>
       a:	00 00       	nop
../../../../crt1/gcrt1.S:69
       c:	9f c0       	rjmp	.+318    	; 0x14c <__bad_interrupt>
       e:	00 00       	nop
../../../../crt1/gcrt1.S:70
      10:	9d c0       	rjmp	.+314    	; 0x14c <__bad_interrupt>
      12:	00 00       	nop
../../../../crt1/gcrt1.S:71
      14:	9b c0       	rjmp	.+310    	; 0x14c <__bad_interrupt>
      16:	00 00       	nop
../../../../crt1/gcrt1.S:72
      18:	99 c0       	rjmp	.+306    	; 0x14c <__bad_interrupt>
      1a:	00 00       	nop
../../../../crt1/gcrt1.S:73
      1c:	97 c0       	rjmp	.+302    	; 0x14c <__bad_interrupt>
      1e:	00 00       	nop
../../../../crt1/gcrt1.S:74
      20:	95 c0       	rjmp	.+298    	; 0x14c <__bad_interrupt>
      22:	00 00       	nop
../../../../crt1/gcrt1.S:75
      24:	93 c0       	rjmp	.+294    	; 0x14c <__bad_interrupt>
      26:	00 00       	nop
../../../../crt1/gcrt1.S:76
      28:	91 c0       	rjmp	.+290    	; 0x14c <__bad_interrupt>
      2a:	00 00       	nop
../../../../crt1/gcrt1.S:77
      2c:	8f c0       	rjmp	.+286    	; 0x14c <__bad_interrupt>
      2e:	00 00       	nop
../../../../crt1/gcrt1.S:78
      30:	8d c0       	rjmp	.+282    	; 0x14c <__bad_interrupt>
      32:	00 00       	nop
../../../../crt1/gcrt1.S:79
      34:	8b c0       	rjmp	.+278    	; 0x14c <__bad_interrupt>
      36:	00 00       	nop
../../../../crt1/gcrt1.S:80
      38:	89 c0       	rjmp	.+274    	; 0x14c <__bad_interrupt>
      3a:	00 00       	nop
../../../../crt1/gcrt1.S:81
      3c:	87 c0       	rjmp	.+270    	; 0x14c <__bad_interrupt>
      3e:	00 00       	nop
../../../../crt1/gcrt1.S:82
      40:	85 c0       	rjmp	.+266    	; 0x14c <__bad_interrupt>
      42:	00 00       	nop
../../../../crt1/gcrt1.S:83
      44:	6a c4       	rjmp	.+2260   	; 0x91a <__vector_17>
      46:	00 00       	nop
../../../../crt1/gcrt1.S:84
      48:	63 c4       	rjmp	.+2246   	; 0x910 <__vector_18>
      4a:	00 00       	nop
../../../../crt1/gcrt1.S:85
      4c:	6b c4       	rjmp	.+2262   	; 0x924 <__vector_19>
      4e:	00 00       	nop
../../../../crt1/gcrt1.S:86
      50:	7d c0       	rjmp	.+250    	; 0x14c <__bad_interrupt>
      52:	00 00       	nop
../../../../crt1/gcrt1.S:87
      54:	7b c0       	rjmp	.+246    	; 0x14c <__bad_interrupt>
      56:	00 00       	nop
../../../../crt1/gcrt1.S:88
      58:	79 c0       	rjmp	.+242    	; 0x14c <__bad_interrupt>
      5a:	00 00       	nop
../../../../crt1/gcrt1.S:89
      5c:	77 c0       	rjmp	.+238    	; 0x14c <__bad_interrupt>
      5e:	00 00       	nop
../../../../crt1/gcrt1.S:90
      60:	75 c0       	rjmp	.+234    	; 0x14c <__bad_interrupt>
      62:	00 00       	nop
../../../../crt1/gcrt1.S:91
      64:	c7 c4       	rjmp	.+2446   	; 0x9f4 <__vector_25>
      66:	00 00       	nop
../../../../crt1/gcrt1.S:92
      68:	71 c0       	rjmp	.+226    	; 0x14c <__bad_interrupt>
      6a:	00 00       	nop
../../../../crt1/gcrt1.S:93
      6c:	6f c0       	rjmp	.+222    	; 0x14c <__bad_interrupt>
      6e:	00 00       	nop
../../../../crt1/gcrt1.S:94
      70:	6d c0       	rjmp	.+218    	; 0x14c <__bad_interrupt>
      72:	00 00       	nop
../../../../crt1/gcrt1.S:95
      74:	6b c0       	rjmp	.+214    	; 0x14c <__bad_interrupt>
      76:	00 00       	nop
      78:	07 63       	ori	r16, 0x37	; 55
      7a:	42 36       	cpi	r20, 0x62	; 98
      7c:	b7 9b       	sbis	0x16, 7	; 22
      7e:	d8 a7       	std	Y+40, r29	; 0x28
      80:	1a 39       	cpi	r17, 0x9A	; 154
      82:	68 56       	subi	r22, 0x68	; 104
      84:	18 ae       	std	Y+56, r1	; 0x38
      86:	ba ab       	std	Y+50, r27	; 0x32
      88:	55 8c       	ldd	r5, Z+29	; 0x1d
      8a:	1d 3c       	cpi	r17, 0xCD	; 205
      8c:	b7 cc       	rjmp	.-1682   	; 0xfffff9fc <__eeprom_end+0xff7ef9fc>
      8e:	57 63       	ori	r21, 0x37	; 55
      90:	bd 6d       	ori	r27, 0xDD	; 221
      92:	ed fd       	.word	0xfded	; ????
      94:	75 3e       	cpi	r23, 0xE5	; 229
      96:	f6 17       	cp	r31, r22
      98:	72 31       	cpi	r23, 0x12	; 18
      9a:	bf 00       	.word	0x00bf	; ????
      9c:	00 00       	nop
      9e:	80 3f       	cpi	r24, 0xF0	; 240
      a0:	08 00       	.word	0x0008	; ????
      a2:	00 00       	nop
      a4:	be 92       	st	-X, r11
      a6:	24 49       	sbci	r18, 0x94	; 148
      a8:	12 3e       	cpi	r17, 0xE2	; 226
      aa:	ab aa       	std	Y+51, r10	; 0x33
      ac:	aa 2a       	or	r10, r26
      ae:	be cd       	rjmp	.-1156   	; 0xfffffc2c <__eeprom_end+0xff7efc2c>
      b0:	cc cc       	rjmp	.-1640   	; 0xfffffa4a <__eeprom_end+0xff7efa4a>
      b2:	4c 3e       	cpi	r20, 0xEC	; 236
      b4:	00 00       	nop
      b6:	00 80       	ld	r0, Z
      b8:	be ab       	std	Y+54, r27	; 0x36
      ba:	aa aa       	std	Y+50, r10	; 0x32
      bc:	aa 3e       	cpi	r26, 0xEA	; 234
      be:	00 00       	nop
      c0:	00 00       	nop
      c2:	bf 00       	.word	0x00bf	; ????
      c4:	00 00       	nop
      c6:	80 3f       	cpi	r24, 0xF0	; 240
      c8:	00 00       	nop
      ca:	00 00       	nop
      cc:	00 08       	sbc	r0, r0
      ce:	41 78       	andi	r20, 0x81	; 129
      d0:	d3 bb       	out	0x13, r29	; 19
      d2:	43 87       	std	Z+11, r20	; 0x0b
      d4:	d1 13       	cpse	r29, r17
      d6:	3d 19       	sub	r19, r13
      d8:	0e 3c       	cpi	r16, 0xCE	; 206
      da:	c3 bd       	out	0x23, r28	; 35
      dc:	42 82       	std	Z+2, r4	; 0x02
      de:	ad 2b       	or	r26, r29
      e0:	3e 68       	ori	r19, 0x8E	; 142
      e2:	ec 82       	std	Y+4, r14	; 0x04
      e4:	76 be       	out	0x36, r7	; 54
      e6:	d9 8f       	std	Y+25, r29	; 0x19
      e8:	e1 a9       	ldd	r30, Z+49	; 0x31
      ea:	3e 4c       	sbci	r19, 0xCE	; 206
      ec:	80 ef       	ldi	r24, 0xF0	; 240
      ee:	ff be       	out	0x3f, r15	; 63
      f0:	01 c4       	rjmp	.+2050   	; 0x8f4 <__DATA_REGION_LENGTH__+0xf4>
      f2:	ff 7f       	andi	r31, 0xFF	; 255
      f4:	3f 00       	.word	0x003f	; ????
      f6:	00 00       	nop
	...

000000fa <__ctors_start>:
__trampolines_start():
      fa:	22 05       	cpc	r18, r2

000000fc <__ctors_end>:
__dtors_end():
../../../../crt1/gcrt1.S:230
      fc:	11 24       	eor	r1, r1
../../../../crt1/gcrt1.S:231
      fe:	1f be       	out	0x3f, r1	; 63
../../../../crt1/gcrt1.S:232
     100:	cf ef       	ldi	r28, 0xFF	; 255
../../../../crt1/gcrt1.S:234
     102:	cd bf       	out	0x3d, r28	; 61
../../../../crt1/gcrt1.S:236
     104:	df e3       	ldi	r29, 0x3F	; 63
../../../../crt1/gcrt1.S:237
     106:	de bf       	out	0x3e, r29	; 62

00000108 <_initThreeStuff()>:
_Z15_initThreeStuffv():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/main.cpp:95
 * (many are available reasonably cheaply on aliexpress et al.) end up being very useful        *
 * for this sort of thing.                                                                      */

  void __attribute__((weak)) init_reset_flags();
  void __attribute__((weak)) init_reset_flags() {
    uint8_t flags = RSTCTRL.RSTFR;
     108:	80 91 40 00 	lds	r24, 0x0040	; 0x800040 <vtable for UartClass+0x7f6176>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/main.cpp:96
    RSTCTRL.RSTFR = flags;
     10c:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <vtable for UartClass+0x7f6176>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/main.cpp:97
    if (flags == 0) {
     110:	81 11       	cpse	r24, r1
     112:	05 c0       	rjmp	.+10     	; 0x11e <_initThreeStuff()+0x16>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/main.cpp:98
      _PROTECTED_WRITE(RSTCTRL.SWRR, 1);
     114:	98 ed       	ldi	r25, 0xD8	; 216
     116:	21 e0       	ldi	r18, 0x01	; 1
     118:	94 bf       	out	0x34, r25	; 52
     11a:	20 93 41 00 	sts	0x0041, r18	; 0x800041 <vtable for UartClass+0x7f6177>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/main.cpp:100
    }
    GPIOR0 = flags;
     11e:	8c bb       	out	0x1c, r24	; 28

00000120 <__do_clear_bss>:
__do_clear_bss():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     120:	28 e3       	ldi	r18, 0x38	; 56
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     122:	a0 e0       	ldi	r26, 0x00	; 0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     124:	b8 e3       	ldi	r27, 0x38	; 56
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     126:	01 c0       	rjmp	.+2      	; 0x12a <.do_clear_bss_start>

00000128 <.do_clear_bss_loop>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     128:	1d 92       	st	X+, r1

0000012a <.do_clear_bss_start>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     12a:	a7 3d       	cpi	r26, 0xD7	; 215
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     12c:	b2 07       	cpc	r27, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     12e:	e1 f7       	brne	.-8      	; 0x128 <.do_clear_bss_loop>

00000130 <__do_global_ctors>:
__do_global_ctors():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     130:	10 e0       	ldi	r17, 0x00	; 0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     132:	ce e7       	ldi	r28, 0x7E	; 126
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     134:	d0 e0       	ldi	r29, 0x00	; 0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     136:	04 c0       	rjmp	.+8      	; 0x140 <__do_global_ctors+0x10>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     138:	21 97       	sbiw	r28, 0x01	; 1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     13a:	fe 01       	movw	r30, r28
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     13c:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <__tablejump2__>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     140:	cd 37       	cpi	r28, 0x7D	; 125
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     142:	d1 07       	cpc	r29, r17
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     144:	c9 f7       	brne	.-14     	; 0x138 <__do_global_ctors+0x8>
../../../../crt1/gcrt1.S:314
     146:	c7 d4       	rcall	.+2446   	; 0xad6 <main>
../../../../crt1/gcrt1.S:315
     148:	0c 94 4d 0f 	jmp	0x1e9a	; 0x1e9a <_exit>

0000014c <__bad_interrupt>:
__vector_22():
../../../../crt1/gcrt1.S:209
     14c:	59 cf       	rjmp	.-334    	; 0x0 <__vectors>

0000014e <SPIClass::transfer(unsigned char) [clone .constprop.29]>:
_ZN8SPIClass8transferEh.constprop.29():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\libraries\SPI\src/SPI.cpp:310
    The following NOP introduces a small delay that can prevent the wait
    loop from iterating when running at the maximum speed. This gives
    about 10% more speed, even if it seems counter-intuitive. At lower
    speeds it is unnoticed.
  */
  asm volatile("nop");
     14e:	00 00       	nop
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\libraries\SPI\src/SPI.cpp:312

  SPI0.DATA = data;
     150:	80 93 c4 08 	sts	0x08C4, r24	; 0x8008c4 <vtable for UartClass+0x7f69fa>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\libraries\SPI\src/SPI.cpp:313
  while ((SPI0.INTFLAGS & SPI_RXCIF_bm) == 0);  // wait for complete send
     154:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <vtable for UartClass+0x7f69f9>
     158:	87 ff       	sbrs	r24, 7
     15a:	fc cf       	rjmp	.-8      	; 0x154 <SPIClass::transfer(unsigned char) [clone .constprop.29]+0x6>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\libraries\SPI\src/SPI.cpp:314
  return SPI0.DATA;                             // read data back
     15c:	80 91 c4 08 	lds	r24, 0x08C4	; 0x8008c4 <vtable for UartClass+0x7f69fa>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\libraries\SPI\src/SPI.cpp:315
}
     160:	08 95       	ret

00000162 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:29
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size) {
     162:	af 92       	push	r10
     164:	bf 92       	push	r11
     166:	cf 92       	push	r12
     168:	df 92       	push	r13
     16a:	ef 92       	push	r14
     16c:	ff 92       	push	r15
     16e:	0f 93       	push	r16
     170:	1f 93       	push	r17
     172:	cf 93       	push	r28
     174:	df 93       	push	r29
     176:	6c 01       	movw	r12, r24
     178:	7b 01       	movw	r14, r22
     17a:	8b 01       	movw	r16, r22
     17c:	04 0f       	add	r16, r20
     17e:	15 1f       	adc	r17, r21
     180:	eb 01       	movw	r28, r22
     182:	5e 01       	movw	r10, r28
     184:	ae 18       	sub	r10, r14
     186:	bf 08       	sbc	r11, r15
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:31
  size_t n = 0;
  while (size--) {
     188:	c0 17       	cp	r28, r16
     18a:	d1 07       	cpc	r29, r17
     18c:	59 f0       	breq	.+22     	; 0x1a4 <Print::write(unsigned char const*, unsigned int)+0x42>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:32
    if (write(*buffer++)) {
     18e:	69 91       	ld	r22, Y+
     190:	d6 01       	movw	r26, r12
     192:	ed 91       	ld	r30, X+
     194:	fc 91       	ld	r31, X
     196:	01 90       	ld	r0, Z+
     198:	f0 81       	ld	r31, Z
     19a:	e0 2d       	mov	r30, r0
     19c:	c6 01       	movw	r24, r12
     19e:	09 95       	icall
     1a0:	89 2b       	or	r24, r25
     1a2:	79 f7       	brne	.-34     	; 0x182 <Print::write(unsigned char const*, unsigned int)+0x20>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:39
    } else {
      break;
    }
  }
  return n;
}
     1a4:	c5 01       	movw	r24, r10
     1a6:	df 91       	pop	r29
     1a8:	cf 91       	pop	r28
     1aa:	1f 91       	pop	r17
     1ac:	0f 91       	pop	r16
     1ae:	ff 90       	pop	r15
     1b0:	ef 90       	pop	r14
     1b2:	df 90       	pop	r13
     1b4:	cf 90       	pop	r12
     1b6:	bf 90       	pop	r11
     1b8:	af 90       	pop	r10
     1ba:	08 95       	ret

000001bc <UartClass::availableForWrite()>:
_ZN9UartClass17availableForWriteEv():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:642
  int UartClass::availableForWrite(void) {
    tx_buffer_index_t head;
    tx_buffer_index_t tail;

    TX_BUFFER_ATOMIC {
      head = _tx_buffer_head;
     1bc:	fc 01       	movw	r30, r24
     1be:	53 89       	ldd	r21, Z+19	; 0x13
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:643
      tail = _tx_buffer_tail;
     1c0:	44 89       	ldd	r20, Z+20	; 0x14
     1c2:	25 2f       	mov	r18, r21
     1c4:	30 e0       	ldi	r19, 0x00	; 0
     1c6:	84 2f       	mov	r24, r20
     1c8:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:646
    }
    if (head >= tail) {
      return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     1ca:	82 1b       	sub	r24, r18
     1cc:	93 0b       	sbc	r25, r19
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:645

    TX_BUFFER_ATOMIC {
      head = _tx_buffer_head;
      tail = _tx_buffer_tail;
    }
    if (head >= tail) {
     1ce:	54 17       	cp	r21, r20
     1d0:	10 f0       	brcs	.+4      	; 0x1d6 <UartClass::availableForWrite()+0x1a>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:646
      return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     1d2:	cf 96       	adiw	r24, 0x3f	; 63
     1d4:	08 95       	ret
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:648
    }
    return tail - head - 1;
     1d6:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:649
  }
     1d8:	08 95       	ret

000001da <UartClass::read()>:
_ZN9UartClass4readEv():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:626
    } else {
      return _rx_buffer[_rx_buffer_tail];
    }
  }

  int UartClass::read(void) {
     1da:	fc 01       	movw	r30, r24
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:628
    // if the head isn't ahead of the tail, we don't have any characters
    if (_rx_buffer_head == _rx_buffer_tail) {
     1dc:	91 89       	ldd	r25, Z+17	; 0x11
     1de:	82 89       	ldd	r24, Z+18	; 0x12
     1e0:	98 17       	cp	r25, r24
     1e2:	61 f0       	breq	.+24     	; 0x1fc <UartClass::read()+0x22>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:631
      return -1;
    } else {
      unsigned char c = _rx_buffer[_rx_buffer_tail];
     1e4:	a2 89       	ldd	r26, Z+18	; 0x12
     1e6:	ae 0f       	add	r26, r30
     1e8:	bf 2f       	mov	r27, r31
     1ea:	b1 1d       	adc	r27, r1
     1ec:	55 96       	adiw	r26, 0x15	; 21
     1ee:	8c 91       	ld	r24, X
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:632
      _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) & (SERIAL_RX_BUFFER_SIZE - 1); // % SERIAL_RX_BUFFER_SIZE;
     1f0:	92 89       	ldd	r25, Z+18	; 0x12
     1f2:	9f 5f       	subi	r25, 0xFF	; 255
     1f4:	9f 73       	andi	r25, 0x3F	; 63
     1f6:	92 8b       	std	Z+18, r25	; 0x12
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:633
      return c;
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	08 95       	ret
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:629
  }

  int UartClass::read(void) {
    // if the head isn't ahead of the tail, we don't have any characters
    if (_rx_buffer_head == _rx_buffer_tail) {
      return -1;
     1fc:	8f ef       	ldi	r24, 0xFF	; 255
     1fe:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:635
    } else {
      unsigned char c = _rx_buffer[_rx_buffer_tail];
      _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) & (SERIAL_RX_BUFFER_SIZE - 1); // % SERIAL_RX_BUFFER_SIZE;
      return c;
    }
  }
     200:	08 95       	ret

00000202 <UartClass::peek()>:
_ZN9UartClass4peekEv():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:618
}
  int UartClass::available(void) {
    return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) & (SERIAL_RX_BUFFER_SIZE - 1); //% SERIAL_RX_BUFFER_SIZE;
  }

  int UartClass::peek(void) {
     202:	fc 01       	movw	r30, r24
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:619
    if (_rx_buffer_head == _rx_buffer_tail) {
     204:	91 89       	ldd	r25, Z+17	; 0x11
     206:	82 89       	ldd	r24, Z+18	; 0x12
     208:	98 17       	cp	r25, r24
     20a:	31 f0       	breq	.+12     	; 0x218 <UartClass::peek()+0x16>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:622
      return -1;
    } else {
      return _rx_buffer[_rx_buffer_tail];
     20c:	82 89       	ldd	r24, Z+18	; 0x12
     20e:	e8 0f       	add	r30, r24
     210:	f1 1d       	adc	r31, r1
     212:	85 89       	ldd	r24, Z+21	; 0x15
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	08 95       	ret
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:620
    return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) & (SERIAL_RX_BUFFER_SIZE - 1); //% SERIAL_RX_BUFFER_SIZE;
  }

  int UartClass::peek(void) {
    if (_rx_buffer_head == _rx_buffer_tail) {
      return -1;
     218:	8f ef       	ldi	r24, 0xFF	; 255
     21a:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:624
    } else {
      return _rx_buffer[_rx_buffer_tail];
    }
  }
     21c:	08 95       	ret

0000021e <UartClass::available()>:
_ZN9UartClass9availableEv():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:614

  // Note: Does not change output pins
  // though the datasheetsays turning the TX module sets it to input.
  _state = 0;
}
  int UartClass::available(void) {
     21e:	fc 01       	movw	r30, r24
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:615
    return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) & (SERIAL_RX_BUFFER_SIZE - 1); //% SERIAL_RX_BUFFER_SIZE;
     220:	91 89       	ldd	r25, Z+17	; 0x11
     222:	22 89       	ldd	r18, Z+18	; 0x12
     224:	89 2f       	mov	r24, r25
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	80 5c       	subi	r24, 0xC0	; 192
     22a:	9f 4f       	sbci	r25, 0xFF	; 255
     22c:	82 1b       	sub	r24, r18
     22e:	91 09       	sbc	r25, r1
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:616
  }
     230:	8f 73       	andi	r24, 0x3F	; 63
     232:	99 27       	eor	r25, r25
     234:	08 95       	ret

00000236 <UartClass::end()>:
_ZN9UartClass3endEv():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:598
    pinMode(_usart_pins[muxrow][3], OUTPUT); // make XDIR output.
  }
  */
}

void UartClass::end() {
     236:	cf 93       	push	r28
     238:	df 93       	push	r29
     23a:	ec 01       	movw	r28, r24
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:600
  // wait for transmission of outgoing data
  flush();
     23c:	e8 81       	ld	r30, Y
     23e:	f9 81       	ldd	r31, Y+1	; 0x01
     240:	06 80       	ldd	r0, Z+6	; 0x06
     242:	f7 81       	ldd	r31, Z+7	; 0x07
     244:	e0 2d       	mov	r30, r0
     246:	09 95       	icall
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:603
  // Disable receiver and transmitter as well as the RX complete and the data register empty interrupts.
  // TXCIE only used in half duplex - we can just turn the damned thing off yo!
  volatile USART_t * temp = _hwserial_module; /* compiler does a slightly better job with this. */
     248:	ec 85       	ldd	r30, Y+12	; 0x0c
     24a:	fd 85       	ldd	r31, Y+13	; 0x0d
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:604
  temp -> CTRLB &= 0; //~(USART_RXEN_bm | USART_TXEN_bm);
     24c:	86 81       	ldd	r24, Z+6	; 0x06
     24e:	16 82       	std	Z+6, r1	; 0x06
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:605
  temp -> CTRLA &= 0; //~(USART_RXCIE_bm | USART_DREIE_bm | USART_TXCIE_bm);
     250:	85 81       	ldd	r24, Z+5	; 0x05
     252:	15 82       	std	Z+5, r1	; 0x05
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:606
  temp -> STATUS =  USART_TXCIF_bm; // want to make sure no chanceofthat firing in error.
     254:	80 e4       	ldi	r24, 0x40	; 64
     256:	84 83       	std	Z+4, r24	; 0x04
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:608
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
     258:	8a 89       	ldd	r24, Y+18	; 0x12
     25a:	89 8b       	std	Y+17, r24	; 0x11
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:612

  // Note: Does not change output pins
  // though the datasheetsays turning the TX module sets it to input.
  _state = 0;
     25c:	18 8a       	std	Y+16, r1	; 0x10
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:613
}
     25e:	df 91       	pop	r29
     260:	cf 91       	pop	r28
     262:	08 95       	ret

00000264 <UartClass::_poll_tx_data_empty()>:
_ZN9UartClass19_poll_tx_data_emptyEv():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:352
    uartClass._tx_buffer_tail = txTail;
  }
#endif

// To invoke data empty "interrupt" via a call, use this method
void UartClass::_poll_tx_data_empty(void) {
     264:	fc 01       	movw	r30, r24
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:353
  if ((!(SREG & CPU_I_bm)) ||  CPUINT.STATUS) {
     266:	0f b6       	in	r0, 0x3f	; 63
     268:	07 fe       	sbrs	r0, 7
     26a:	04 c0       	rjmp	.+8      	; 0x274 <UartClass::_poll_tx_data_empty()+0x10>
     26c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <vtable for UartClass+0x7f6247>
     270:	88 23       	and	r24, r24
     272:	a1 f0       	breq	.+40     	; 0x29c <_poll_dre_done>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:370
    // so we'll have to poll the "data register empty" flag ourselves.
    // If it is set, pretend an interrupt has happened and call the handler
    // to free up space for us.
    // -Spence 10/23/20
    // Invoke interrupt handler only if conditions data register is empty
    if ((*_hwserial_module).STATUS & USART_DREIF_bm) {
     274:	a4 85       	ldd	r26, Z+12	; 0x0c
     276:	b5 85       	ldd	r27, Z+13	; 0x0d
     278:	14 96       	adiw	r26, 0x04	; 4
     27a:	8c 91       	ld	r24, X
     27c:	14 97       	sbiw	r26, 0x04	; 4
     27e:	85 ff       	sbrs	r24, 5
     280:	0d c0       	rjmp	.+26     	; 0x29c <_poll_dre_done>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:371
      if (_tx_buffer_head != _tx_buffer_tail) {
     282:	93 89       	ldd	r25, Z+19	; 0x13
     284:	84 89       	ldd	r24, Z+20	; 0x14
     286:	98 17       	cp	r25, r24
     288:	39 f0       	breq	.+14     	; 0x298 <UartClass::_poll_tx_data_empty()+0x34>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:373
        // Buffer empty, so disable "data register empty" interrupt
        (*_hwserial_module).CTRLA &= (~USART_DREIE_bm);
     28a:	15 96       	adiw	r26, 0x05	; 5
     28c:	8c 91       	ld	r24, X
     28e:	15 97       	sbiw	r26, 0x05	; 5
     290:	8f 7d       	andi	r24, 0xDF	; 223
     292:	15 96       	adiw	r26, 0x05	; 5
     294:	8c 93       	st	X, r24
     296:	08 95       	ret
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:397
#ifdef USART1
                ::"z"((uint16_t)thisSerial)
#else
                ::"z"(&Serial)
#endif
                : "r18","r19","r24","r25","r26","r27");
     298:	e8 94       	clt
     29a:	4f c3       	rjmp	.+1694   	; 0x93a <_poll_dre>

0000029c <_poll_dre_done>:
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:404
    }
  }
  // In case interrupts are enabled, the interrupt routine will be invoked by itself
  // Note that this currently does not handle cases where the DRE interruopt becomes
  // disabled, yet you are actually attempting to send. I don't think it can happen.
}
     29c:	08 95       	ret

0000029e <UartClass::write(unsigned char)>:
_ZN9UartClass5writeEh():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:682
    // When we get here, nothing is queued anymore (DREIE is disabled) and
    // the hardware finished transmission (TXCIF is set).
  }


  size_t UartClass::write(uint8_t c) {
     29e:	0f 93       	push	r16
     2a0:	1f 93       	push	r17
     2a2:	cf 93       	push	r28
     2a4:	df 93       	push	r29
     2a6:	ec 01       	movw	r28, r24
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:683
    _state |= 1; // Record that we have written to serial since it was begun.
     2a8:	88 89       	ldd	r24, Y+16	; 0x10
     2aa:	98 2f       	mov	r25, r24
     2ac:	91 60       	ori	r25, 0x01	; 1
     2ae:	98 8b       	std	Y+16, r25	; 0x10
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:688
    // If the buffer and the data register is empty, just write the byte
    // to the data register and be done. This shortcut helps
    // significantly improve the effective data rate at high (>
    // 500kbit/s) bit rates, where interrupt overhead becomes a slowdown.
    if ((_tx_buffer_head == _tx_buffer_tail) && ((*_hwserial_module).STATUS & USART_DREIF_bm)) {
     2b0:	2b 89       	ldd	r18, Y+19	; 0x13
     2b2:	9c 89       	ldd	r25, Y+20	; 0x14
     2b4:	29 13       	cpse	r18, r25
     2b6:	0a c0       	rjmp	.+20     	; 0x2cc <UartClass::write(unsigned char)+0x2e>
     2b8:	ec 85       	ldd	r30, Y+12	; 0x0c
     2ba:	fd 85       	ldd	r31, Y+13	; 0x0d
     2bc:	94 81       	ldd	r25, Z+4	; 0x04
     2be:	95 ff       	sbrs	r25, 5
     2c0:	05 c0       	rjmp	.+10     	; 0x2cc <UartClass::write(unsigned char)+0x2e>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:689
      if (_state & 2) { // in half duplex mode, we turn off RXC interrupt
     2c2:	81 fd       	sbrc	r24, 1
     2c4:	0d c0       	rjmp	.+26     	; 0x2e0 <UartClass::write(unsigned char)+0x42>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:696
        ctrla &= ~USART_RXCIE_bm;
        ctrla |=  USART_TXCIE_bm;
        (*_hwserial_module).STATUS = USART_TXCIF_bm;
        (*_hwserial_module).CTRLA = ctrla;
      } else {
        (*_hwserial_module).STATUS = USART_TXCIF_bm;
     2c6:	80 e4       	ldi	r24, 0x40	; 64
     2c8:	84 83       	std	Z+4, r24	; 0x04
     2ca:	12 c0       	rjmp	.+36     	; 0x2f0 <UartClass::write(unsigned char)+0x52>
     2cc:	06 2f       	mov	r16, r22
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:714
       * // that the interrupt handler is called in this situation
       * (*_hwserial_module).CTRLA &= (~USART_DREIE_bm);
       */
      return 1;
    }
    tx_buffer_index_t i = (_tx_buffer_head + 1) & (SERIAL_TX_BUFFER_SIZE - 1);  // % SERIAL_TX_BUFFER_SIZE;
     2ce:	1b 89       	ldd	r17, Y+19	; 0x13
     2d0:	1f 5f       	subi	r17, 0xFF	; 255
     2d2:	1f 73       	andi	r17, 0x3F	; 63
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:718

    // If the output buffer is full, there's nothing we can do other than to
    // wait for the interrupt handler to empty it a bit (or emulate interrupts)
    while (i == _tx_buffer_tail) {
     2d4:	8c 89       	ldd	r24, Y+20	; 0x14
     2d6:	81 13       	cpse	r24, r17
     2d8:	15 c0       	rjmp	.+42     	; 0x304 <UartClass::write(unsigned char)+0x66>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:719
      _poll_tx_data_empty();
     2da:	ce 01       	movw	r24, r28
     2dc:	c3 df       	rcall	.-122    	; 0x264 <UartClass::_poll_tx_data_empty()>
     2de:	fa cf       	rjmp	.-12     	; 0x2d4 <UartClass::write(unsigned char)+0x36>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:690
    // to the data register and be done. This shortcut helps
    // significantly improve the effective data rate at high (>
    // 500kbit/s) bit rates, where interrupt overhead becomes a slowdown.
    if ((_tx_buffer_head == _tx_buffer_tail) && ((*_hwserial_module).STATUS & USART_DREIF_bm)) {
      if (_state & 2) { // in half duplex mode, we turn off RXC interrupt
        uint8_t ctrla = (*_hwserial_module).CTRLA;
     2e0:	85 81       	ldd	r24, Z+5	; 0x05
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:691
        ctrla &= ~USART_RXCIE_bm;
     2e2:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:692
        ctrla |=  USART_TXCIE_bm;
     2e4:	80 64       	ori	r24, 0x40	; 64
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:693
        (*_hwserial_module).STATUS = USART_TXCIF_bm;
     2e6:	90 e4       	ldi	r25, 0x40	; 64
     2e8:	94 83       	std	Z+4, r25	; 0x04
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:694
        (*_hwserial_module).CTRLA = ctrla;
     2ea:	ec 85       	ldd	r30, Y+12	; 0x0c
     2ec:	fd 85       	ldd	r31, Y+13	; 0x0d
     2ee:	85 83       	std	Z+5, r24	; 0x05
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:699
      } else {
        (*_hwserial_module).STATUS = USART_TXCIF_bm;
      }
      // MUST clear TXCIF **before** writing new char, otherwise ill-timed interrupt can cause it to erase the flag after the new charchter has been sent!
      (*_hwserial_module).TXDATAL = c;
     2f0:	ec 85       	ldd	r30, Y+12	; 0x0c
     2f2:	fd 85       	ldd	r31, Y+13	; 0x0d
     2f4:	62 83       	std	Z+2, r22	; 0x02
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:734
    } else {
      // Enable "data register empty interrupt"
      (*_hwserial_module).CTRLA |= USART_DREIE_bm;
    }
    return 1;
  }
     2f6:	81 e0       	ldi	r24, 0x01	; 1
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	df 91       	pop	r29
     2fc:	cf 91       	pop	r28
     2fe:	1f 91       	pop	r17
     300:	0f 91       	pop	r16
     302:	08 95       	ret
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:721
    // If the output buffer is full, there's nothing we can do other than to
    // wait for the interrupt handler to empty it a bit (or emulate interrupts)
    while (i == _tx_buffer_tail) {
      _poll_tx_data_empty();
    }
    _tx_buffer[_tx_buffer_head] = c;
     304:	eb 89       	ldd	r30, Y+19	; 0x13
     306:	ec 0f       	add	r30, r28
     308:	fd 2f       	mov	r31, r29
     30a:	f1 1d       	adc	r31, r1
     30c:	eb 5a       	subi	r30, 0xAB	; 171
     30e:	ff 4f       	sbci	r31, 0xFF	; 255
     310:	00 83       	st	Z, r16
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:722
    _tx_buffer_head = i;
     312:	1b 8b       	std	Y+19, r17	; 0x13
     314:	ec 85       	ldd	r30, Y+12	; 0x0c
     316:	fd 85       	ldd	r31, Y+13	; 0x0d
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:723
    if (_state & 2) { // in half duplex mode, we turn off RXC interrupt
     318:	88 89       	ldd	r24, Y+16	; 0x10
     31a:	81 ff       	sbrs	r24, 1
     31c:	09 c0       	rjmp	.+18     	; 0x330 <UartClass::write(unsigned char)+0x92>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:724
      uint8_t ctrla = (*_hwserial_module).CTRLA;
     31e:	85 81       	ldd	r24, Z+5	; 0x05
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:725
      ctrla &= ~USART_RXCIE_bm;
     320:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:726
      ctrla |= USART_TXCIE_bm | USART_DREIE_bm;
     322:	80 66       	ori	r24, 0x60	; 96
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:727
      (*_hwserial_module).STATUS = USART_TXCIF_bm;
     324:	90 e4       	ldi	r25, 0x40	; 64
     326:	94 83       	std	Z+4, r25	; 0x04
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:728
      (*_hwserial_module).CTRLA = ctrla;
     328:	ec 85       	ldd	r30, Y+12	; 0x0c
     32a:	fd 85       	ldd	r31, Y+13	; 0x0d
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:731
    } else {
      // Enable "data register empty interrupt"
      (*_hwserial_module).CTRLA |= USART_DREIE_bm;
     32c:	85 83       	std	Z+5, r24	; 0x05
     32e:	e3 cf       	rjmp	.-58     	; 0x2f6 <UartClass::write(unsigned char)+0x58>
     330:	85 81       	ldd	r24, Z+5	; 0x05
     332:	80 62       	ori	r24, 0x20	; 32
     334:	fb cf       	rjmp	.-10     	; 0x32c <UartClass::write(unsigned char)+0x8e>

00000336 <UartClass::flush()>:
_ZN9UartClass5flushEv():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:651
      return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    }
    return tail - head - 1;
  }

  void UartClass::flush() {
     336:	cf 93       	push	r28
     338:	df 93       	push	r29
     33a:	ec 01       	movw	r28, r24
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:655
    // If we have never written a byte, no need to flush. This special
    // case is needed since there is no way to force the TXCIF (transmit
    // complete) bit to 1 during initialization
    if (!_state & 1) {
     33c:	88 89       	ldd	r24, Y+16	; 0x10
     33e:	88 23       	and	r24, r24
     340:	59 f0       	breq	.+22     	; 0x358 <UartClass::flush()+0x22>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:670
    // it's appropriate to use for applications where it has only very small benefits, and significant risk of surprising the user and causing
    // breakage of code that would otherwise work. Finally, the previous implementation didn't check if it was called from the current lvl1 ISR
    // and in that case flush(), and write() with full buffer would just straight up hang...

    // Spin until the data-register-empty-interrupt is disabled and TX complete interrupt flag is raised
    while (((*_hwserial_module).CTRLA & USART_DREIE_bm) || (!((*_hwserial_module).STATUS & USART_TXCIF_bm))) {
     342:	ec 85       	ldd	r30, Y+12	; 0x0c
     344:	fd 85       	ldd	r31, Y+13	; 0x0d
     346:	85 81       	ldd	r24, Z+5	; 0x05
     348:	85 fd       	sbrc	r24, 5
     34a:	03 c0       	rjmp	.+6      	; 0x352 <UartClass::flush()+0x1c>
     34c:	84 81       	ldd	r24, Z+4	; 0x04
     34e:	86 fd       	sbrc	r24, 6
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:675

      // If interrupts are globally disabled or the and DR empty interrupt is disabled,
      // poll the "data register empty" interrupt flag to prevent deadlock

      _poll_tx_data_empty();
     350:	03 c0       	rjmp	.+6      	; 0x358 <UartClass::flush()+0x22>
     352:	ce 01       	movw	r24, r28
     354:	87 df       	rcall	.-242    	; 0x264 <UartClass::_poll_tx_data_empty()>
     356:	f5 cf       	rjmp	.-22     	; 0x342 <UartClass::flush()+0xc>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:679
    }
    // When we get here, nothing is queued anymore (DREIE is disabled) and
    // the hardware finished transmission (TXCIF is set).
  }
     358:	df 91       	pop	r29
     35a:	cf 91       	pop	r28
     35c:	08 95       	ret

0000035e <UartClass::operator bool()>:
_ZN9UartClasscvbEv():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.h:293
    inline   size_t write(unsigned int n)   {return write((uint8_t)n);}
    inline   size_t write(int n)            {return write((uint8_t)n);}
    using Print::write; // pull in write(str) and write(buf, size) from Print
    explicit operator bool() {
      return true;
    }
     35e:	81 e0       	ldi	r24, 0x01	; 1
     360:	08 95       	ret

00000362 <micros>:
micros():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:271
    #else
      uint8_t ticks;
    #endif
    uint8_t flags;
    /* Save current state and disable interrupts */
    uint8_t oldSREG = SREG;
     362:	9f b7       	in	r25, 0x3f	; 63
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:272
    cli(); /* INTERRUPTS OFF */
     364:	f8 94       	cli
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:282
      TCD0.CTRLE = TCD_SCAPTUREA_bm;
      while (!(TCD0.STATUS & TCD_CMDRDY_bm)); // wait for sync - should be only one iteration of this loop
      flags = TCD0.INTFLAGS;
      ticks = TCD0.CAPTUREA;
    #else
      ticks = _timer->CNT;
     366:	e0 91 9a 0a 	lds	r30, 0x0A9A	; 0x800a9a <vtable for UartClass+0x7f6bd0>
     36a:	f0 91 9b 0a 	lds	r31, 0x0A9B	; 0x800a9b <vtable for UartClass+0x7f6bd1>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:283
      flags = _timer->INTFLAGS;
     36e:	80 91 96 0a 	lds	r24, 0x0A96	; 0x800a96 <vtable for UartClass+0x7f6bcc>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:293
     * doesn't matter.
     * Get current number of overflows and timer count */
    #if !(defined(MILLIS_USE_TIMERB0) || defined(MILLIS_USE_TIMERB1))
      overflows = timer_overflow_count;
    #else
      overflows = timer_millis;
     372:	20 91 00 38 	lds	r18, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
     376:	30 91 01 38 	lds	r19, 0x3801	; 0x803801 <__DATA_REGION_ORIGIN__+0x1>
     37a:	40 91 02 38 	lds	r20, 0x3802	; 0x803802 <__DATA_REGION_ORIGIN__+0x2>
     37e:	50 91 03 38 	lds	r21, 0x3803	; 0x803803 <__DATA_REGION_ORIGIN__+0x3>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:296
    #endif
    /* Turn interrupts back on, assuming they were on when micros was called. */
    SREG = oldSREG; /* INTERRUPTS ON */
     382:	9f bf       	out	0x3f, r25	; 63
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:303
      if ((flags & TCD_OVF_bm) && (ticks < 0x07)) {
    #elif defined(MILLIS_USE_TIMERA0)
      ticks = (TIME_TRACKING_TIMER_PERIOD) - ticks;
      if ((flags & TCA_SPLIT_HUNF_bm) && (ticks < 0x4)) {
    #else // timerb
      if ((flags & TCB_CAPT_bm) && !(ticks & 0xFF00)) {
     384:	80 ff       	sbrs	r24, 0
     386:	08 c0       	rjmp	.+16     	; 0x398 <micros+0x36>
     388:	cf 01       	movw	r24, r30
     38a:	88 27       	eor	r24, r24
     38c:	89 2b       	or	r24, r25
     38e:	21 f4       	brne	.+8      	; 0x398 <micros+0x36>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:308
    #endif
      #if ((defined(MILLIS_USE_TIMERB0) || defined(MILLIS_USE_TIMERB1)) && (F_CPU <= 1000000))
        overflows += 2;
      #else
        overflows++;
     390:	2f 5f       	subi	r18, 0xFF	; 255
     392:	3f 4f       	sbci	r19, 0xFF	; 255
     394:	4f 4f       	sbci	r20, 0xFF	; 255
     396:	5f 4f       	sbci	r21, 0xFF	; 255
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:530
       * 46 replaced with 25 save 21 clocks @ 10 = 2.5 us saved
       * 56 replaced with 27 save 29 clocks @ 20 = 1.5 us saved
       * 66 replaced with 29 save 37 clocks @ 40 = 1 us saved
       */
      #elif (F_CPU == 40000000UL || F_CPU == 20000000UL || F_CPU == 10000000UL || F_CPU == 5000000UL)
        __asm__ __volatile__(
     398:	0f 01       	movw	r0, r30
     39a:	16 94       	lsr	r1
     39c:	07 94       	ror	r0
     39e:	16 94       	lsr	r1
     3a0:	07 94       	ror	r0
     3a2:	16 94       	lsr	r1
     3a4:	07 94       	ror	r0
     3a6:	f0 01       	movw	r30, r0
     3a8:	16 94       	lsr	r1
     3aa:	07 94       	ror	r0
     3ac:	16 94       	lsr	r1
     3ae:	07 94       	ror	r0
     3b0:	e0 19       	sub	r30, r0
     3b2:	f1 09       	sbc	r31, r1
     3b4:	16 94       	lsr	r1
     3b6:	07 94       	ror	r0
     3b8:	06 94       	lsr	r0
     3ba:	10 2c       	mov	r1, r0
     3bc:	16 94       	lsr	r1
     3be:	16 94       	lsr	r1
     3c0:	01 18       	sub	r0, r1
     3c2:	16 94       	lsr	r1
     3c4:	16 94       	lsr	r1
     3c6:	01 0c       	add	r0, r1
     3c8:	11 24       	eor	r1, r1
     3ca:	e0 0d       	add	r30, r0
     3cc:	f1 1d       	adc	r31, r1
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:567
          "add r0,r1"     "\n\t"  // + ticks >> 8
          "eor r1,r1"     "\n\t"  // restore zero_reg
          "add %A0,r0"    "\n\t"  // add to the shifted ticks
          "adc %B0,r1"    "\n"    // carry
          : "+r" (ticks));        // Do the rest in C
        microseconds = overflows * 1000 + ticks;
     3ce:	a8 ee       	ldi	r26, 0xE8	; 232
     3d0:	b3 e0       	ldi	r27, 0x03	; 3
     3d2:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <__muluhisi3>
     3d6:	6e 0f       	add	r22, r30
     3d8:	7f 1f       	adc	r23, r31
     3da:	81 1d       	adc	r24, r1
     3dc:	91 1d       	adc	r25, r1
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:656
        microseconds = ((overflows * millisClockCyclesToMicroseconds(TIME_TRACKING_CYCLES_PER_OVF))
                      + (ticks * (millisClockCyclesToMicroseconds(TIME_TRACKING_CYCLES_PER_OVF) / TIME_TRACKING_TIMER_PERIOD)));
      #endif
    #endif // end of timer-specific part of micros calculations
    return microseconds;
  }
     3de:	08 95       	ret

000003e0 <delay>:
delay():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:724
        _delay_ms(1);
      }
    }
  }
#elif (PROGMEM_SIZE >= 16384 && !defined(MILLIS_USE_TIMERRTC))
  void delay(uint32_t ms) { /* Interrupts will not prolong this less flash-efficient delay */
     3e0:	cf 92       	push	r12
     3e2:	df 92       	push	r13
     3e4:	ef 92       	push	r14
     3e6:	ff 92       	push	r15
     3e8:	cf 93       	push	r28
     3ea:	df 93       	push	r29
     3ec:	6b 01       	movw	r12, r22
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:725
    uint16_t start = (uint16_t) micros();
     3ee:	7c 01       	movw	r14, r24
     3f0:	b8 df       	rcall	.-144    	; 0x362 <micros>
     3f2:	eb 01       	movw	r28, r22
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:727
    while (ms > 0) {
      while (((uint16_t) micros() - start) >= 1000 && ms) {
     3f4:	b6 df       	rcall	.-148    	; 0x362 <micros>
     3f6:	6c 1b       	sub	r22, r28
     3f8:	7d 0b       	sbc	r23, r29
     3fa:	68 3e       	cpi	r22, 0xE8	; 232
     3fc:	73 40       	sbci	r23, 0x03	; 3
     3fe:	a0 f0       	brcs	.+40     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     400:	c1 14       	cp	r12, r1
     402:	d1 04       	cpc	r13, r1
     404:	e1 04       	cpc	r14, r1
     406:	f1 04       	cpc	r15, r1
     408:	39 f4       	brne	.+14     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     40a:	df 91       	pop	r29
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:732
        ms-- ;
        start += 1000;
      }
    }
  }
     40c:	cf 91       	pop	r28
     40e:	ff 90       	pop	r15
     410:	ef 90       	pop	r14
     412:	df 90       	pop	r13
     414:	cf 90       	pop	r12
     416:	08 95       	ret
     418:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:728
#elif (PROGMEM_SIZE >= 16384 && !defined(MILLIS_USE_TIMERRTC))
  void delay(uint32_t ms) { /* Interrupts will not prolong this less flash-efficient delay */
    uint16_t start = (uint16_t) micros();
    while (ms > 0) {
      while (((uint16_t) micros() - start) >= 1000 && ms) {
        ms-- ;
     41a:	c8 1a       	sub	r12, r24
     41c:	d1 08       	sbc	r13, r1
     41e:	e1 08       	sbc	r14, r1
     420:	f1 08       	sbc	r15, r1
     422:	c8 51       	subi	r28, 0x18	; 24
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:729
        start += 1000;
     424:	dc 4f       	sbci	r29, 0xFC	; 252
     426:	e6 cf       	rjmp	.-52     	; 0x3f4 <delay+0x14>
     428:	c1 14       	cp	r12, r1
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:726
    }
  }
#elif (PROGMEM_SIZE >= 16384 && !defined(MILLIS_USE_TIMERRTC))
  void delay(uint32_t ms) { /* Interrupts will not prolong this less flash-efficient delay */
    uint16_t start = (uint16_t) micros();
    while (ms > 0) {
     42a:	d1 04       	cpc	r13, r1
     42c:	e1 04       	cpc	r14, r1
     42e:	f1 04       	cpc	r15, r1
     430:	09 f7       	brne	.-62     	; 0x3f4 <delay+0x14>
     432:	eb cf       	rjmp	.-42     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>

00000434 <UartClass::begin(unsigned long)>:
_ZN9UartClass5beginEm():
     434:	dc 01       	movw	r26, r24
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.h:257

  public:
    inline             UartClass(volatile USART_t *hwserial_module, uint8_t module_number, uint8_t default_pinset);
    bool                    pins(uint8_t tx, uint8_t rx);
    bool                    swap(uint8_t mux_level = 1);
    void                   begin(uint32_t baud) {begin(baud, SERIAL_8N1);}
     436:	ed 91       	ld	r30, X+
     438:	fc 91       	ld	r31, X
     43a:	00 88       	ldd	r0, Z+16	; 0x10
     43c:	f1 89       	ldd	r31, Z+17	; 0x11
     43e:	e0 2d       	mov	r30, r0
     440:	23 e0       	ldi	r18, 0x03	; 3
     442:	30 e0       	ldi	r19, 0x00	; 0
     444:	09 94       	ijmp

00000446 <digitalWrite.constprop.30>:
digitalWrite.constprop.30():
     446:	91 e0       	ldi	r25, 0x01	; 1
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:279
  that the value of the port was set correctly when it was
  changed to an output. Code in the wild relies on this behavior.
  */

  if (val == LOW) { /* If LOW */
    port->OUTCLR = bit_mask;
     448:	81 11       	cpse	r24, r1
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:278
  you could digitalWrite() a pin while it's an input, to ensure
  that the value of the port was set correctly when it was
  changed to an output. Code in the wild relies on this behavior.
  */

  if (val == LOW) { /* If LOW */
     44a:	16 c0       	rjmp	.+44     	; 0x478 <digitalWrite.constprop.30+0x32>
     44c:	90 93 26 04 	sts	0x0426, r25	; 0x800426 <vtable for UartClass+0x7f655c>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:279
    port->OUTCLR = bit_mask;
     450:	90 91 20 04 	lds	r25, 0x0420	; 0x800420 <vtable for UartClass+0x7f6556>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:296
  } else {
    port->OUTSET = bit_mask;
  }

  /* Input direction */
  if (!(port->DIR & bit_mask)) {
     454:	90 fd       	sbrc	r25, 0
     456:	0a c0       	rjmp	.+20     	; 0x46c <digitalWrite.constprop.30+0x26>
     458:	9f b7       	in	r25, 0x3f	; 63
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:309

    /* Calculate where pin control register is */
    volatile uint8_t *pin_ctrl_reg = getPINnCTRLregister(port, bit_pos);

    /* Save system status and disable interrupts */
    uint8_t status = SREG;
     45a:	f8 94       	cli
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:310
    cli();
     45c:	81 11       	cpse	r24, r1
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:312

    if (val == LOW) {
     45e:	0f c0       	rjmp	.+30     	; 0x47e <digitalWrite.constprop.30+0x38>
     460:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <vtable for UartClass+0x7f6566>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:314
      /* Disable pullup */
      *pin_ctrl_reg &= ~PORT_PULLUPEN_bm;
     464:	87 7f       	andi	r24, 0xF7	; 247
     466:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <vtable for UartClass+0x7f6566>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:317
    } else {
      /* Enable pull-up */
      *pin_ctrl_reg |= PORT_PULLUPEN_bm;
     46a:	9f bf       	out	0x3f, r25	; 63
turnOffPWM():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:321
    }

    /* Restore system status */
    SREG = status;
     46c:	80 91 01 0a 	lds	r24, 0x0A01	; 0x800a01 <vtable for UartClass+0x7f6b37>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:201
      #endif
      if (bit_mask > 0x04) { // -> bit_pos > 2 -> output channel controlled by HCMP
        bit_mask <<= 1;      // mind the gap (between LCMP and HCMP)
      }
      // since we're turning it off, we don't need to change the CMP register
      TCA0.SPLIT.CTRLB &= ~bit_mask;
     470:	8e 7f       	andi	r24, 0xFE	; 254
     472:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <vtable for UartClass+0x7f6b37>
digitalWrite.constprop.30():
     476:	08 95       	ret
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:334
   * analogWritten() 255, then digitallyWritten() to HIGH, which
   * would turn it off for the time between turnOffPWM() and
   * PORT->OUTCLR)
   * Since there's no penalty, why make a glitch we don't have to? */
  turnOffPWM(pin);
}
     478:	90 93 25 04 	sts	0x0425, r25	; 0x800425 <vtable for UartClass+0x7f655b>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:292
    // val will now be 0 (LOW) if the toggling made it LOW
    // or bit_mask if not. And further down, we only need to
    // know if it's
  /* If HIGH OR  > TOGGLE  */
  } else {
    port->OUTSET = bit_mask;
     47c:	e9 cf       	rjmp	.-46     	; 0x450 <digitalWrite.constprop.30+0xa>
     47e:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <vtable for UartClass+0x7f6566>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:317
    if (val == LOW) {
      /* Disable pullup */
      *pin_ctrl_reg &= ~PORT_PULLUPEN_bm;
    } else {
      /* Enable pull-up */
      *pin_ctrl_reg |= PORT_PULLUPEN_bm;
     482:	88 60       	ori	r24, 0x08	; 8
     484:	f0 cf       	rjmp	.-32     	; 0x466 <digitalWrite.constprop.30+0x20>

00000486 <pinMode>:
pinMode():
     486:	8c 30       	cpi	r24, 0x0C	; 12
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:136
  return port << 1;
}
void pinMode(uint8_t pin, uint8_t mode) {
  check_valid_digital_pin(pin);         /* generate compile error if a constant that is not a valid pin is used as the pin */
  check_valid_pin_mode(mode);           /* generate compile error if a constant that is not a valid pin mode is used as the mode */
  uint8_t bit_mask = digitalPinToBitMask(pin);
     488:	f0 f4       	brcc	.+60     	; 0x4c6 <pinMode+0x40>
check_valid_digital_pin():
     48a:	90 e0       	ldi	r25, 0x00	; 0
pinMode():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:32
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

inline __attribute__((always_inline)) void check_valid_digital_pin(pin_size_t pin) {
  if (__builtin_constant_p(pin))
     48c:	fc 01       	movw	r30, r24
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:136
  return port << 1;
}
void pinMode(uint8_t pin, uint8_t mode) {
  check_valid_digital_pin(pin);         /* generate compile error if a constant that is not a valid pin is used as the pin */
  check_valid_pin_mode(mode);           /* generate compile error if a constant that is not a valid pin mode is used as the mode */
  uint8_t bit_mask = digitalPinToBitMask(pin);
     48e:	e2 54       	subi	r30, 0x42	; 66
     490:	f1 46       	sbci	r31, 0x61	; 97
     492:	20 81       	ld	r18, Z
     494:	2f 3f       	cpi	r18, 0xFF	; 255
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:137
  if ((bit_mask == NOT_A_PIN) || (mode > 3)) {
     496:	b9 f0       	breq	.+46     	; 0x4c6 <pinMode+0x40>
     498:	fc 01       	movw	r30, r24
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:140
    return;                             /* ignore invalid pins passed at runtime */
  }
  volatile uint8_t * port_base = ((volatile uint8_t *) (uint16_t)(0x0400 | portToPortBaseOffset(digitalPinToPort(pin))));
     49a:	ee 54       	subi	r30, 0x4E	; 78
     49c:	f1 46       	sbci	r31, 0x61	; 97
portToPortBaseOffset():
     49e:	e0 81       	ld	r30, Z
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:130
  SREG = oldSREG; // re-enable interrupts
}

static inline uint8_t portToPortBaseOffset(uint8_t port);
static inline uint8_t portToPortBaseOffset(uint8_t port) {
  _SWAP(port);
     4a0:	e2 95       	swap	r30
     4a2:	ee 0f       	add	r30, r30
pinMode():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:131
  return port << 1;
     4a4:	f0 e0       	ldi	r31, 0x00	; 0
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:140
  check_valid_pin_mode(mode);           /* generate compile error if a constant that is not a valid pin mode is used as the mode */
  uint8_t bit_mask = digitalPinToBitMask(pin);
  if ((bit_mask == NOT_A_PIN) || (mode > 3)) {
    return;                             /* ignore invalid pins passed at runtime */
  }
  volatile uint8_t * port_base = ((volatile uint8_t *) (uint16_t)(0x0400 | portToPortBaseOffset(digitalPinToPort(pin))));
     4a6:	f4 60       	ori	r31, 0x04	; 4
     4a8:	61 30       	cpi	r22, 0x01	; 1
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:141
  if (mode & 0x01) {
     4aa:	71 f4       	brne	.+28     	; 0x4c8 <pinMode+0x42>
     4ac:	21 83       	std	Z+1, r18	; 0x01
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:143
    // OUTPUT mode, so write DIRSET with the mask.
    *(port_base + 1) = bit_mask;
     4ae:	8a 55       	subi	r24, 0x5A	; 90
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:152
      *(port_base + 5) = bit_mask;
    } else if (mode == 0) {
      *(port_base + 6) = bit_mask;
    }
  }
  port_base +=(uint8_t) digitalPinToBitPosition(pin) | (uint8_t) 0x10;
     4b0:	91 46       	sbci	r25, 0x61	; 97
     4b2:	dc 01       	movw	r26, r24
     4b4:	8c 91       	ld	r24, X
     4b6:	80 61       	ori	r24, 0x10	; 16
     4b8:	e8 0f       	add	r30, r24
     4ba:	f1 1d       	adc	r31, r1
     4bc:	80 81       	ld	r24, Z
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:153
  bit_mask = *port_base;
     4be:	61 30       	cpi	r22, 0x01	; 1
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:154
  if (mode & 2) {
     4c0:	31 f0       	breq	.+12     	; 0x4ce <pinMode+0x48>
     4c2:	88 60       	ori	r24, 0x08	; 8
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:155
    bit_mask |= 0x08;
     4c4:	80 83       	st	Z, r24
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:159
  } else {
    bit_mask &= 0xF7;
  }
  *port_base = bit_mask;
     4c6:	08 95       	ret
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:160
}
     4c8:	22 83       	std	Z+2, r18	; 0x02
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:145
  volatile uint8_t * port_base = ((volatile uint8_t *) (uint16_t)(0x0400 | portToPortBaseOffset(digitalPinToPort(pin))));
  if (mode & 0x01) {
    // OUTPUT mode, so write DIRSET with the mask.
    *(port_base + 1) = bit_mask;
  } else {
    *(port_base + 2) = bit_mask;
     4ca:	25 83       	std	Z+5, r18	; 0x05
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:147
    if (mode == 2) {
      *(port_base + 5) = bit_mask;
     4cc:	f0 cf       	rjmp	.-32     	; 0x4ae <pinMode+0x28>
     4ce:	87 7f       	andi	r24, 0xF7	; 247
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:157
  port_base +=(uint8_t) digitalPinToBitPosition(pin) | (uint8_t) 0x10;
  bit_mask = *port_base;
  if (mode & 2) {
    bit_mask |= 0x08;
  } else {
    bit_mask &= 0xF7;
     4d0:	f9 cf       	rjmp	.-14     	; 0x4c4 <pinMode+0x3e>

000004d2 <UartClass::begin(unsigned long, unsigned int)>:
_ZN9UartClass5beginEmj():
     4d2:	8f 92       	push	r8
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:470
    _pin_set = 0;
  }
  return false;
}

void UartClass::begin(unsigned long baud, uint16_t options) {
     4d4:	9f 92       	push	r9
     4d6:	af 92       	push	r10
     4d8:	bf 92       	push	r11
     4da:	ef 92       	push	r14
     4dc:	ff 92       	push	r15
     4de:	0f 93       	push	r16
     4e0:	1f 93       	push	r17
     4e2:	cf 93       	push	r28
     4e4:	df 93       	push	r29
     4e6:	8c 01       	movw	r16, r24
     4e8:	4a 01       	movw	r8, r20
     4ea:	5b 01       	movw	r10, r22
     4ec:	e9 01       	movw	r28, r18
     4ee:	dc 01       	movw	r26, r24
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:473
  // Make sure no transmissions are ongoing and USART is disabled in case begin() is called by accident
  // without first calling end()
  if (_state & 1) {
     4f0:	50 96       	adiw	r26, 0x10	; 16
     4f2:	8c 91       	ld	r24, X
     4f4:	50 97       	sbiw	r26, 0x10	; 16
     4f6:	80 ff       	sbrs	r24, 0
     4f8:	07 c0       	rjmp	.+14     	; 0x508 <UartClass::begin(unsigned long, unsigned int)+0x36>
     4fa:	ed 91       	ld	r30, X+
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:474
    this->end();
     4fc:	fc 91       	ld	r31, X
     4fe:	02 88       	ldd	r0, Z+18	; 0x12
     500:	f3 89       	ldd	r31, Z+19	; 0x13
     502:	e0 2d       	mov	r30, r0
     504:	c8 01       	movw	r24, r16
     506:	09 95       	icall
     508:	c1 11       	cpse	r28, r1
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:478
  }

  uint8_t ctrlc = (uint8_t) options;
  if (ctrlc == 0) {                         // see if they passed anything in low byte or SERIAL_CONFIG_VALID.
     50a:	01 c0       	rjmp	.+2      	; 0x50e <UartClass::begin(unsigned long, unsigned int)+0x3c>
     50c:	c3 e0       	ldi	r28, 0x03	; 3
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:479
    ctrlc = (uint8_t)SERIAL_8N1;            // low byte of 0 could mean they want SERIAL_5N1. Or that they thought they'd
     50e:	ec 2e       	mov	r14, r28
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:481
  }
  ctrlc &= ~0x04; // Now unset that 0x04 bit if it's set, because none of the values with it set are supported. We use that to smuggle in a "this constant was specified" for 5N1
     510:	e8 94       	clt
     512:	e2 f8       	bld	r14, 2
     514:	fd 2e       	mov	r15, r29
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:482
  uint8_t ctrla = (uint8_t) (options >> 8);// CTRLA will get the remains of the options high byte.
     516:	cd 2f       	mov	r28, r29
     518:	d0 95       	com	r29
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:484
  uint16_t baud_setting = 0;                // at this point it should be able to reuse those 2 registers that it received options in!
  uint8_t   ctrlb = (~ctrla & 0xC0);        // Top two bits (TXEN RXEN), inverted so they match he sense in the registers.
     51a:	d0 7c       	andi	r29, 0xC0	; 192
     51c:	b1 ed       	ldi	r27, 0xD1	; 209
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:485
  if (baud   > F_CPU / 16) {            // if this baud is too fast for non-U2X
     51e:	8b 16       	cp	r8, r27
     520:	b2 e1       	ldi	r27, 0x12	; 18
     522:	9b 06       	cpc	r9, r27
     524:	b3 e1       	ldi	r27, 0x13	; 19
     526:	ab 06       	cpc	r10, r27
     528:	b1 04       	cpc	r11, r1
     52a:	28 f0       	brcs	.+10     	; 0x536 <UartClass::begin(unsigned long, unsigned int)+0x64>
     52c:	d2 60       	ori	r29, 0x02	; 2
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:486
        ctrlb   |= USART_RXMODE0_bm;        // set the U2X bit in what will become CTRLB
     52e:	b6 94       	lsr	r11
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:487
        baud   >>= 1;                       // And lower the baud rate by haldf
     530:	a7 94       	ror	r10
     532:	97 94       	ror	r9
     534:	87 94       	ror	r8
     536:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:489
  }
  baud_setting = (((4 * F_CPU) / baud));  // And now the registers that baud was passed in are done.
     538:	74 eb       	ldi	r23, 0xB4	; 180
     53a:	84 ec       	ldi	r24, 0xC4	; 196
     53c:	94 e0       	ldi	r25, 0x04	; 4
     53e:	a5 01       	movw	r20, r10
     540:	94 01       	movw	r18, r8
     542:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__udivmodsi4>
     546:	20 34       	cpi	r18, 0x40	; 64
     548:	31 05       	cpc	r19, r1
     54a:	10 f4       	brcc	.+4      	; 0x550 <UartClass::begin(unsigned long, unsigned int)+0x7e>
     54c:	20 e4       	ldi	r18, 0x40	; 64
     54e:	30 e0       	ldi	r19, 0x00	; 0
     550:	f2 fc       	sbrc	r15, 2
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:495
  if (baud_setting < 64)                      // so set to the maximum baud rate setting.
    baud_setting= 64;       // set the U2X bit in what will become CTRLB
  //} else if (baud < (F_CPU / 16800)) {      // Baud rate is too low
  //  baud_setting = 65535;                   // minimum baud rate.'
                                            // Baud setting done now we do the other options not in CTRLC;
  if (ctrla & 0x04) {                       // is ODME option set?
     552:	d8 60       	ori	r29, 0x08	; 8
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:496
    ctrlb |= USART_ODME_bm;                 // set the bit in what will become CTRLB
     554:	8c 2f       	mov	r24, r28
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:498
  }
  ctrla &= 0x2B;                            // Only LBME and RS485 (both of them); will get written to CTRLA, but we leave the event bit.
     556:	8b 72       	andi	r24, 0x2B	; 43
     558:	d7 fd       	sbrc	r29, 7
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:499
  if (ctrlb & USART_RXEN_bm) {              // if RX is to be enabled
     55a:	80 68       	ori	r24, 0x80	; 128
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:500
    ctrla  |= USART_RXCIE_bm;               // we will want to enable the ISR.
     55c:	cd 2f       	mov	r28, r29
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:502
  }
  uint8_t setpinmask = ctrlb & 0xC8;        // ODME in bit 3, TX and RX enabled in bit 6, 7
     55e:	c8 7c       	andi	r28, 0xC8	; 200
     560:	83 ff       	sbrs	r24, 3
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:503
  if ((ctrla & USART_LBME_bm) && (setpinmask == 0xC8)) { // if it's open-drain and loopback, need to set state bit 2.
     562:	07 c0       	rjmp	.+14     	; 0x572 <UartClass::begin(unsigned long, unsigned int)+0xa0>
     564:	c8 3c       	cpi	r28, 0xC8	; 200
     566:	29 f4       	brne	.+10     	; 0x572 <UartClass::begin(unsigned long, unsigned int)+0xa0>
     568:	f8 01       	movw	r30, r16
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:504
    _state                 |= 2;            // since that changes some behavior (RXC disabled while sending) // Now we should be able to ST _state.
     56a:	90 89       	ldd	r25, Z+16	; 0x10
     56c:	92 60       	ori	r25, 0x02	; 2
     56e:	90 8b       	std	Z+16, r25	; 0x10
     570:	c8 ed       	ldi	r28, 0xD8	; 216
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:505
    setpinmask             |= 0x10;         // this tells _set_pins not to disturb the configuration on the RX pin.
     572:	80 fd       	sbrc	r24, 0
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:507
  }
  if (ctrla & USART_RS485_bm) {             // RS485 mode recorded here too... because we need to set
     574:	c1 60       	ori	r28, 0x01	; 1
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:508
    setpinmask             |= 0x01;         // set pin output if we need to do that. Datasheet isn't clear
     576:	ff b6       	in	r15, 0x3f	; 63
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:510
  }
  uint8_t oldSREG = SREG;
     578:	f8 94       	cli
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:511
  cli();
     57a:	d8 01       	movw	r26, r16
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:512
  volatile USART_t* MyUSART = _hwserial_module;
     57c:	1c 96       	adiw	r26, 0x0c	; 12
     57e:	ed 91       	ld	r30, X+
     580:	fc 91       	ld	r31, X
     582:	16 82       	std	Z+6, r1	; 0x06
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:513
  (*MyUSART).CTRLB          = 0;            // gotta disable first - some things are enable-locked.
     584:	e7 82       	std	Z+7, r14	; 0x07
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:514
  (*MyUSART).CTRLC          = ctrlc;        // No reason not to set first.
     586:	20 87       	std	Z+8, r18	; 0x08
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:515
  (*MyUSART).BAUD           = baud_setting; // Wish I could have set it long ago
     588:	31 87       	std	Z+9, r19	; 0x09
     58a:	85 ff       	sbrs	r24, 5
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:516
  if (ctrla & 0x20) {                       // Now we have to do a bit of work
     58c:	4d c0       	rjmp	.+154    	; 0x628 <UartClass::begin(unsigned long, unsigned int)+0x156>
     58e:	cf 77       	andi	r28, 0x7F	; 127
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:517
    setpinmask             &= 0x7F;         // Remove the RX pin in this case because we get the input from elsewhere.
     590:	91 e0       	ldi	r25, 0x01	; 1
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:518
    (*MyUSART).EVCTRL       = 1;            // enable event input - not clear from datasheet what's needed to
     592:	94 87       	std	Z+12, r25	; 0x0c
     594:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:519
    (*MyUSART).TXPLCTRL     = 0xFF;         // Disable pulse length encoding.
     596:	95 87       	std	Z+13, r25	; 0x0d
     598:	8f 7d       	andi	r24, 0xDF	; 223
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:523
  } else {
    (*MyUSART).EVCTRL       = 0;            // This needs to be turned off when not in use.
  }                                         // finally strip out the SERIAL_EVENT_RX bit which is in the DREIE
  (*MyUSART).CTRLA          = ctrla & 0xDF; // position, which we never set in begin.
     59a:	85 83       	std	Z+5, r24	; 0x05
     59c:	d6 83       	std	Z+6, r29	; 0x06
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:524
  (*MyUSART).CTRLB          = ctrlb;        // Set the all important CTRLB...
     59e:	f8 01       	movw	r30, r16
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:525
  _set_pins(_module_number, _pin_set, setpinmask); // set up the pin(s)
     5a0:	47 85       	ldd	r20, Z+15	; 0x0f
     5a2:	86 85       	ldd	r24, Z+14	; 0x0e
_set_pins():
     5a4:	90 91 e2 05 	lds	r25, 0x05E2	; 0x8005e2 <vtable for UartClass+0x7f6718>
_ZN9UartClass5beginEmj():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:532
}

void UartClass::_set_pins(uint8_t mod_nbr, uint8_t mux_set, uint8_t enmask) {
  // Set the mux register
  #if defined(PORTMUX_USARTROUTEA)
    uint8_t muxregval    = PORTMUX.USARTROUTEA;
     5a8:	2c ef       	ldi	r18, 0xFC	; 252
_set_pins():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:533
    muxregval           &= ~(mod_nbr ? 0x0C : 0x03);
     5aa:	81 11       	cpse	r24, r1
_ZN9UartClass5beginEmj():
     5ac:	23 ef       	ldi	r18, 0xF3	; 243
_set_pins():
     5ae:	92 23       	and	r25, r18
     5b0:	24 2f       	mov	r18, r20
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:534
    PORTMUX.USARTROUTEA  = (muxregval) | (mux_set << (mod_nbr ? 2 : 0)); // shift muxset left if needed.
     5b2:	30 e0       	ldi	r19, 0x00	; 0
_ZN9UartClass5beginEmj():
     5b4:	50 e0       	ldi	r21, 0x00	; 0
_set_pins():
     5b6:	81 11       	cpse	r24, r1
_ZN9UartClass5beginEmj():
     5b8:	52 e0       	ldi	r21, 0x02	; 2
_set_pins():
     5ba:	b9 01       	movw	r22, r18
     5bc:	01 c0       	rjmp	.+2      	; 0x5c0 <UartClass::begin(unsigned long, unsigned int)+0xee>
     5be:	66 0f       	add	r22, r22
     5c0:	5a 95       	dec	r21
     5c2:	ea f7       	brpl	.-6      	; 0x5be <UartClass::begin(unsigned long, unsigned int)+0xec>
     5c4:	96 2b       	or	r25, r22
     5c6:	90 93 e2 05 	sts	0x05E2, r25	; 0x8005e2 <vtable for UartClass+0x7f6718>
     5ca:	43 30       	cpi	r20, 0x03	; 3
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:544
    } else {
      PORTMUX.CTRLB       &= 0xFE;
    }
  #endif
  #if MEGATINYCORE_SERIES == 2
    if (mux_set == 3) { // not connected to pins...
     5cc:	09 f1       	breq	.+66     	; 0x610 <UartClass::begin(unsigned long, unsigned int)+0x13e>
     5ce:	82 0f       	add	r24, r18
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:548
      return;           // so we are done!
    }
  #endif
  const uint8_t* muxrow = &(_usart_pins[mod_nbr + mux_set][0]);
     5d0:	93 2f       	mov	r25, r19
     5d2:	91 1d       	adc	r25, r1
     5d4:	88 0f       	add	r24, r24
     5d6:	99 1f       	adc	r25, r25
     5d8:	88 0f       	add	r24, r24
     5da:	99 1f       	adc	r25, r25
     5dc:	8c 01       	movw	r16, r24
     5de:	02 56       	subi	r16, 0x62	; 98
     5e0:	11 46       	sbci	r17, 0x61	; 97
     5e2:	c6 ff       	sbrs	r28, 6
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:549
  if ((enmask & 0x40 && !(enmask & 0x08))) {
     5e4:	23 c0       	rjmp	.+70     	; 0x62c <UartClass::begin(unsigned long, unsigned int)+0x15a>
     5e6:	c3 fd       	sbrc	r28, 3
     5e8:	21 c0       	rjmp	.+66     	; 0x62c <UartClass::begin(unsigned long, unsigned int)+0x15a>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:550
    pinMode(muxrow[0], OUTPUT); // If and only if TX is enabled and open drain isn't should the TX pin be output.
     5ea:	61 e0       	ldi	r22, 0x01	; 1
     5ec:	d8 01       	movw	r26, r16
     5ee:	8c 91       	ld	r24, X
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:553
  } else if (enmask & 0x50) { // if it is enabled but is in open drain mode, or is disabled, but loopback is enabled
    // TX should be INPUT_PULLUP.
    pinMode(muxrow[0], INPUT_PULLUP);
     5f0:	4a df       	rcall	.-364    	; 0x486 <pinMode>
     5f2:	c7 ff       	sbrs	r28, 7
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:555
  }
  if (enmask & 0x80 && !(enmask & 0x10)) {
     5f4:	07 c0       	rjmp	.+14     	; 0x604 <UartClass::begin(unsigned long, unsigned int)+0x132>
     5f6:	c4 fd       	sbrc	r28, 4
     5f8:	05 c0       	rjmp	.+10     	; 0x604 <UartClass::begin(unsigned long, unsigned int)+0x132>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:557
    // Likewise if RX is enabled, unless loopback mode is too (in which case we caught it above, it should be pulled up
    pinMode(muxrow[1], INPUT_PULLUP);
     5fa:	62 e0       	ldi	r22, 0x02	; 2
     5fc:	d8 01       	movw	r26, r16
     5fe:	11 96       	adiw	r26, 0x01	; 1
     600:	8c 91       	ld	r24, X
     602:	41 df       	rcall	.-382    	; 0x486 <pinMode>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:559
  }
  if (enmask & 0x01) { // finally if RS485 mode is enabled, we make XDIR output, otherwise it can't drive the pin.
     604:	c0 ff       	sbrs	r28, 0
     606:	04 c0       	rjmp	.+8      	; 0x610 <UartClass::begin(unsigned long, unsigned int)+0x13e>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:560
    pinMode(muxrow[3], OUTPUT); // make XDIR output.
     608:	61 e0       	ldi	r22, 0x01	; 1
     60a:	f8 01       	movw	r30, r16
     60c:	83 81       	ldd	r24, Z+3	; 0x03
     60e:	3b df       	rcall	.-394    	; 0x486 <pinMode>
_ZN9UartClass5beginEmj():
     610:	ff be       	out	0x3f, r15	; 63
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:526
    (*MyUSART).EVCTRL       = 0;            // This needs to be turned off when not in use.
  }                                         // finally strip out the SERIAL_EVENT_RX bit which is in the DREIE
  (*MyUSART).CTRLA          = ctrla & 0xDF; // position, which we never set in begin.
  (*MyUSART).CTRLB          = ctrlb;        // Set the all important CTRLB...
  _set_pins(_module_number, _pin_set, setpinmask); // set up the pin(s)
  SREG = oldSREG;                             // re-enable interrupts, and we're done.
     612:	df 91       	pop	r29
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:527
}
     614:	cf 91       	pop	r28
     616:	1f 91       	pop	r17
     618:	0f 91       	pop	r16
     61a:	ff 90       	pop	r15
     61c:	ef 90       	pop	r14
     61e:	bf 90       	pop	r11
     620:	af 90       	pop	r10
     622:	9f 90       	pop	r9
     624:	8f 90       	pop	r8
     626:	08 95       	ret
     628:	14 86       	std	Z+12, r1	; 0x0c
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:521
  if (ctrla & 0x20) {                       // Now we have to do a bit of work
    setpinmask             &= 0x7F;         // Remove the RX pin in this case because we get the input from elsewhere.
    (*MyUSART).EVCTRL       = 1;            // enable event input - not clear from datasheet what's needed to
    (*MyUSART).TXPLCTRL     = 0xFF;         // Disable pulse length encoding.
  } else {
    (*MyUSART).EVCTRL       = 0;            // This needs to be turned off when not in use.
     62a:	b6 cf       	rjmp	.-148    	; 0x598 <UartClass::begin(unsigned long, unsigned int)+0xc6>
_set_pins():
     62c:	2c 2f       	mov	r18, r28
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:551
    }
  #endif
  const uint8_t* muxrow = &(_usart_pins[mod_nbr + mux_set][0]);
  if ((enmask & 0x40 && !(enmask & 0x08))) {
    pinMode(muxrow[0], OUTPUT); // If and only if TX is enabled and open drain isn't should the TX pin be output.
  } else if (enmask & 0x50) { // if it is enabled but is in open drain mode, or is disabled, but loopback is enabled
     62e:	20 75       	andi	r18, 0x50	; 80
     630:	01 f3       	breq	.-64     	; 0x5f2 <UartClass::begin(unsigned long, unsigned int)+0x120>
     632:	82 56       	subi	r24, 0x62	; 98
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:553
    // TX should be INPUT_PULLUP.
    pinMode(muxrow[0], INPUT_PULLUP);
     634:	91 46       	sbci	r25, 0x61	; 97
     636:	62 e0       	ldi	r22, 0x02	; 2
     638:	fc 01       	movw	r30, r24
     63a:	80 81       	ld	r24, Z
     63c:	d9 cf       	rjmp	.-78     	; 0x5f0 <UartClass::begin(unsigned long, unsigned int)+0x11e>

0000063e <Print::write(char const*) [clone .part.2] [clone .constprop.28]>:
_ZN5Print5writeEPKc.part.2.constprop.28():
     63e:	fc 01       	movw	r30, r24
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.h:56
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) {
        return 0;
      }
      return write((const uint8_t *)str, strlen(str));
     640:	01 90       	ld	r0, Z+
     642:	00 20       	and	r0, r0
     644:	e9 f7       	brne	.-6      	; 0x640 <Print::write(char const*) [clone .part.2] [clone .constprop.28]+0x2>
     646:	31 97       	sbiw	r30, 0x01	; 1
     648:	af 01       	movw	r20, r30
     64a:	48 1b       	sub	r20, r24
     64c:	59 0b       	sbc	r21, r25
     64e:	bc 01       	movw	r22, r24
     650:	84 e2       	ldi	r24, 0x24	; 36
     652:	98 e3       	ldi	r25, 0x38	; 56
     654:	86 cd       	rjmp	.-1268   	; 0x162 <Print::write(unsigned char const*, unsigned int)>

00000656 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.25]>:
_ZN5Print11printNumberEmh.constprop.25():
     656:	8f 92       	push	r8
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:215
  return vfprintf_P(&f, (const char *)format, ap);
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
     658:	9f 92       	push	r9
     65a:	af 92       	push	r10
     65c:	bf 92       	push	r11
     65e:	0f 93       	push	r16
     660:	1f 93       	push	r17
     662:	cf 93       	push	r28
     664:	df 93       	push	r29
     666:	cd b7       	in	r28, 0x3d	; 61
     668:	de b7       	in	r29, 0x3e	; 62
     66a:	a1 97       	sbiw	r28, 0x21	; 33
     66c:	cd bf       	out	0x3d, r28	; 61
     66e:	de bf       	out	0x3e, r29	; 62
     670:	19 a2       	std	Y+33, r1	; 0x21
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:219
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     672:	42 30       	cpi	r20, 0x02	; 2
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:222

  // prevent crash if called with base == 1
  if (base < 2) {
     674:	08 f4       	brcc	.+2      	; 0x678 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.25]+0x22>
     676:	4a e0       	ldi	r20, 0x0A	; 10
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:223
    base = 10;
     678:	8e 01       	movw	r16, r28
     67a:	0f 5d       	subi	r16, 0xDF	; 223
     67c:	1f 4f       	sbci	r17, 0xFF	; 255
     67e:	84 2e       	mov	r8, r20
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:227
  }

  do {
    char c = n % base;
     680:	91 2c       	mov	r9, r1
     682:	b1 2c       	mov	r11, r1
     684:	a1 2c       	mov	r10, r1
     686:	a5 01       	movw	r20, r10
     688:	94 01       	movw	r18, r8
     68a:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__udivmodsi4>
     68e:	e6 2f       	mov	r30, r22
     690:	b9 01       	movw	r22, r18
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:228
    n /= base;
     692:	ca 01       	movw	r24, r20
     694:	ea 30       	cpi	r30, 0x0A	; 10
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:230

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     696:	d4 f4       	brge	.+52     	; 0x6cc <Print::printNumber(unsigned long, unsigned char) [clone .constprop.25]+0x76>
     698:	e0 5d       	subi	r30, 0xD0	; 208
     69a:	d8 01       	movw	r26, r16
     69c:	ee 93       	st	-X, r30
     69e:	8d 01       	movw	r16, r26
     6a0:	23 2b       	or	r18, r19
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:231
  } while (n);
     6a2:	24 2b       	or	r18, r20
     6a4:	25 2b       	or	r18, r21
     6a6:	79 f7       	brne	.-34     	; 0x686 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.25]+0x30>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.h:54
    }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) {
        return 0;
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	80 e0       	ldi	r24, 0x00	; 0
write():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.h:53
      setWriteError(0);
    }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) {
     6ac:	10 97       	sbiw	r26, 0x00	; 0
     6ae:	11 f0       	breq	.+4      	; 0x6b4 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.25]+0x5e>
     6b0:	cd 01       	movw	r24, r26
     6b2:	c5 df       	rcall	.-118    	; 0x63e <Print::write(char const*) [clone .part.2] [clone .constprop.28]>
_ZN5Print11printNumberEmh.constprop.25():
     6b4:	a1 96       	adiw	r28, 0x21	; 33
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:234

  return write(str);
}
     6b6:	cd bf       	out	0x3d, r28	; 61
     6b8:	de bf       	out	0x3e, r29	; 62
     6ba:	df 91       	pop	r29
     6bc:	cf 91       	pop	r28
     6be:	1f 91       	pop	r17
     6c0:	0f 91       	pop	r16
     6c2:	bf 90       	pop	r11
     6c4:	af 90       	pop	r10
     6c6:	9f 90       	pop	r9
     6c8:	8f 90       	pop	r8
     6ca:	08 95       	ret
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:230

  do {
    char c = n % base;
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     6cc:	e9 5c       	subi	r30, 0xC9	; 201
     6ce:	e5 cf       	rjmp	.-54     	; 0x69a <Print::printNumber(unsigned long, unsigned char) [clone .constprop.25]+0x44>

000006d0 <Print::println(unsigned char, int) [clone .constprop.21]>:
_ZN5Print7printlnEhi.constprop.21():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:145
  size_t n = print(c);
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base) {
     6d0:	cf 93       	push	r28
     6d2:	df 93       	push	r29
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:75
size_t Print::print(char c) {
  return write(c);
}

size_t Print::print(unsigned char b, int base) {
  return print((unsigned long) b, base);
     6d4:	46 2f       	mov	r20, r22
print():
     6d6:	68 2f       	mov	r22, r24
     6d8:	70 e0       	ldi	r23, 0x00	; 0
     6da:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:105

size_t Print::print(unsigned long n, int base) {
  if (base == 0) {
    return write(n);
  } else {
    return printNumber(n, base);
     6dc:	80 e0       	ldi	r24, 0x00	; 0
     6de:	bb df       	rcall	.-138    	; 0x656 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.25]>
     6e0:	ec 01       	movw	r28, r24
write():
     6e2:	84 ee       	ldi	r24, 0xE4	; 228
     6e4:	9e e9       	ldi	r25, 0x9E	; 158
     6e6:	ab df       	rcall	.-170    	; 0x63e <Print::write(char const*) [clone .part.2] [clone .constprop.28]>
_ZN5Print7printlnEhi.constprop.21():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:149

size_t Print::println(unsigned char b, int base) {
  size_t n = print(b, base);
  n += println();
  return n;
}
     6e8:	8c 0f       	add	r24, r28
     6ea:	9d 1f       	adc	r25, r29
     6ec:	df 91       	pop	r29
     6ee:	cf 91       	pop	r28
     6f0:	08 95       	ret

000006f2 <Print::print(char const*) [clone .constprop.20]>:
_ZN5Print5printEPKc.constprop.20():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:66

size_t Print::print(const String &s) {
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[]) {
     6f2:	a5 cf       	rjmp	.-182    	; 0x63e <Print::write(char const*) [clone .part.2] [clone .constprop.28]>

000006f4 <ReadRegisterToUintArray(unsigned char, unsigned char, unsigned char, unsigned char*) [clone .constprop.17]>:
_Z23ReadRegisterToUintArrayhhhPh.constprop.17():
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:250
    array[i] = SPI.transfer(0x00);
  }
  // take the chip select high to de-select:
  digitalWrite(chipSelectPin, HIGH);
}
void ReadRegisterToUintArray(uint8_t thisRegister, uint8_t bytesToRead, uint8_t chipSelectPin, uint8_t *array)
     6f4:	ef 92       	push	r14
     6f6:	ff 92       	push	r15
     6f8:	0f 93       	push	r16
     6fa:	1f 93       	push	r17
     6fc:	cf 93       	push	r28
     6fe:	df 93       	push	r29
     700:	c8 2f       	mov	r28, r24
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:252
{
  Serial.print("From register:\t");
     702:	06 2f       	mov	r16, r22
     704:	7a 01       	movw	r14, r20
     706:	87 ee       	ldi	r24, 0xE7	; 231
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:75
size_t Print::print(char c) {
  return write(c);
}

size_t Print::print(unsigned char b, int base) {
  return print((unsigned long) b, base);
     708:	9e e9       	ldi	r25, 0x9E	; 158
     70a:	f3 df       	rcall	.-26     	; 0x6f2 <Print::print(char const*) [clone .constprop.20]>
print():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:105

size_t Print::print(unsigned long n, int base) {
  if (base == 0) {
    return write(n);
  } else {
    return printNumber(n, base);
     70c:	6c 2f       	mov	r22, r28
     70e:	70 e0       	ldi	r23, 0x00	; 0
     710:	90 e0       	ldi	r25, 0x00	; 0
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:254
  Serial.print(thisRegister, HEX);
  Serial.print("\t");
     712:	80 e0       	ldi	r24, 0x00	; 0
     714:	40 e1       	ldi	r20, 0x10	; 16
     716:	9f df       	rcall	.-194    	; 0x656 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.25]>
_Z23ReadRegisterToUintArrayhhhPh.constprop.17():
     718:	89 e4       	ldi	r24, 0x49	; 73
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:256
  uint8_t readRegister = READ_REGISTER(thisRegister);
  Serial.println(readRegister, HEX);
     71a:	9f e9       	ldi	r25, 0x9F	; 159
     71c:	ea df       	rcall	.-44     	; 0x6f2 <Print::print(char const*) [clone .constprop.20]>
     71e:	60 e1       	ldi	r22, 0x10	; 16
     720:	70 e0       	ldi	r23, 0x00	; 0
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:259

  // take the chip select low to select the device:
  digitalWrite(chipSelectPin, LOW);
     722:	8c 2f       	mov	r24, r28
     724:	d5 df       	rcall	.-86     	; 0x6d0 <Print::println(unsigned char, int) [clone .constprop.21]>
     726:	80 e0       	ldi	r24, 0x00	; 0
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:261
  // send the device the register you want to read:
  SPI.transfer(readRegister);
     728:	8e de       	rcall	.-740    	; 0x446 <digitalWrite.constprop.30>
     72a:	8c 2f       	mov	r24, r28
     72c:	10 dd       	rcall	.-1504   	; 0x14e <SPIClass::transfer(unsigned char) [clone .constprop.29]>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:262
  for (int i = 0; i < bytesToRead; i++)
     72e:	e7 01       	movw	r28, r14
     730:	10 e0       	ldi	r17, 0x00	; 0
     732:	ce 01       	movw	r24, r28
     734:	8e 19       	sub	r24, r14
     736:	9f 09       	sbc	r25, r15
     738:	80 17       	cp	r24, r16
     73a:	91 07       	cpc	r25, r17
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:265
  {
    // send a value of 0 to read the first byte returned:
    array[i] = SPI.transfer(0x00);
     73c:	24 f4       	brge	.+8      	; 0x746 <ReadRegisterToUintArray(unsigned char, unsigned char, unsigned char, unsigned char*) [clone .constprop.17]+0x52>
     73e:	80 e0       	ldi	r24, 0x00	; 0
     740:	06 dd       	rcall	.-1524   	; 0x14e <SPIClass::transfer(unsigned char) [clone .constprop.29]>
     742:	89 93       	st	Y+, r24
     744:	f6 cf       	rjmp	.-20     	; 0x732 <ReadRegisterToUintArray(unsigned char, unsigned char, unsigned char, unsigned char*) [clone .constprop.17]+0x3e>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:268
  }
  // take the chip select high to de-select:
  digitalWrite(chipSelectPin, HIGH);
     746:	81 e0       	ldi	r24, 0x01	; 1
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:269
}
     748:	df 91       	pop	r29
     74a:	cf 91       	pop	r28
     74c:	1f 91       	pop	r17
     74e:	0f 91       	pop	r16
     750:	ff 90       	pop	r15
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:268
  {
    // send a value of 0 to read the first byte returned:
    array[i] = SPI.transfer(0x00);
  }
  // take the chip select high to de-select:
  digitalWrite(chipSelectPin, HIGH);
     752:	ef 90       	pop	r14
     754:	78 ce       	rjmp	.-784    	; 0x446 <digitalWrite.constprop.30>

00000756 <Print::print(long, int) [clone .constprop.13]>:
_ZN5Print5printEli.constprop.13():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:86

size_t Print::print(unsigned int n, int base) {
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base) {
     756:	cf 92       	push	r12
     758:	df 92       	push	r13
     75a:	ef 92       	push	r14
     75c:	ff 92       	push	r15
     75e:	cf 93       	push	r28
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:90
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
     760:	df 93       	push	r29
     762:	97 ff       	sbrs	r25, 7
     764:	19 c0       	rjmp	.+50     	; 0x798 <Print::print(long, int) [clone .constprop.13]+0x42>
     766:	6b 01       	movw	r12, r22
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:71
size_t Print::print(const char str[]) {
  return write(str);
}

size_t Print::print(char c) {
  return write(c);
     768:	7c 01       	movw	r14, r24
print():
     76a:	6d e2       	ldi	r22, 0x2D	; 45
     76c:	84 e2       	ldi	r24, 0x24	; 36
     76e:	98 e3       	ldi	r25, 0x38	; 56
     770:	96 dd       	rcall	.-1236   	; 0x29e <UartClass::write(unsigned char)>
     772:	ec 01       	movw	r28, r24
_ZN5Print5printEli.constprop.13():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:92
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
     774:	66 27       	eor	r22, r22
     776:	77 27       	eor	r23, r23
     778:	cb 01       	movw	r24, r22
     77a:	6c 19       	sub	r22, r12
     77c:	7d 09       	sbc	r23, r13
     77e:	8e 09       	sbc	r24, r14
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:93
      return printNumber(n, 10) + t;
     780:	9f 09       	sbc	r25, r15
     782:	4a e0       	ldi	r20, 0x0A	; 10
     784:	68 df       	rcall	.-304    	; 0x656 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.25]>
     786:	8c 0f       	add	r24, r28
     788:	9d 1f       	adc	r25, r29
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:99
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     78a:	df 91       	pop	r29
     78c:	cf 91       	pop	r28
     78e:	ff 90       	pop	r15
     790:	ef 90       	pop	r14
     792:	df 90       	pop	r13
     794:	cf 90       	pop	r12
     796:	08 95       	ret
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:95
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
     798:	4a e0       	ldi	r20, 0x0A	; 10
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:99
  } else {
    return printNumber(n, base);
  }
}
     79a:	df 91       	pop	r29
     79c:	cf 91       	pop	r28
     79e:	ff 90       	pop	r15
     7a0:	ef 90       	pop	r14
     7a2:	df 90       	pop	r13
     7a4:	cf 90       	pop	r12
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:95
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
     7a6:	57 cf       	rjmp	.-338    	; 0x656 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.25]>

000007a8 <Print::println(double, int) [clone .constprop.2]>:
_ZN5Print7printlnEdi.constprop.2():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:175
  size_t n = print(num, base);
  n += println();
  return n;
}

size_t Print::println(double num, int digits) {
     7a8:	4f 92       	push	r4
     7aa:	5f 92       	push	r5
     7ac:	6f 92       	push	r6
     7ae:	7f 92       	push	r7
     7b0:	8f 92       	push	r8
     7b2:	9f 92       	push	r9
     7b4:	af 92       	push	r10
     7b6:	bf 92       	push	r11
     7b8:	cf 92       	push	r12
     7ba:	df 92       	push	r13
     7bc:	ef 92       	push	r14
     7be:	ff 92       	push	r15
     7c0:	6b 01       	movw	r12, r22
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:239
}

size_t Print::printFloat(double number, uint8_t digits) {
  size_t n = 0;

  if (isnan(number)) {
     7c2:	7c 01       	movw	r14, r24
printFloat():
     7c4:	ac 01       	movw	r20, r24
     7c6:	9b 01       	movw	r18, r22
     7c8:	0e 94 9d 0c 	call	0x193a	; 0x193a <__unordsf2>
     7cc:	88 23       	and	r24, r24
     7ce:	b1 f0       	breq	.+44     	; 0x7fc <Print::println(double, int) [clone .constprop.2]+0x54>
write():
     7d0:	87 ef       	ldi	r24, 0xF7	; 247
     7d2:	9e e9       	ldi	r25, 0x9E	; 158
     7d4:	34 df       	rcall	.-408    	; 0x63e <Print::write(char const*) [clone .part.2] [clone .constprop.28]>
     7d6:	7c 01       	movw	r14, r24
     7d8:	84 ee       	ldi	r24, 0xE4	; 228
     7da:	9e e9       	ldi	r25, 0x9E	; 158
     7dc:	30 df       	rcall	.-416    	; 0x63e <Print::write(char const*) [clone .part.2] [clone .constprop.28]>
_ZN5Print7printlnEdi.constprop.2():
     7de:	8e 0d       	add	r24, r14
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:179

size_t Print::println(double num, int digits) {
  size_t n = print(num, digits);
  n += println();
  return n;
}
     7e0:	9f 1d       	adc	r25, r15
     7e2:	ff 90       	pop	r15
     7e4:	ef 90       	pop	r14
     7e6:	df 90       	pop	r13
     7e8:	cf 90       	pop	r12
     7ea:	bf 90       	pop	r11
     7ec:	af 90       	pop	r10
     7ee:	9f 90       	pop	r9
     7f0:	8f 90       	pop	r8
     7f2:	7f 90       	pop	r7
     7f4:	6f 90       	pop	r6
     7f6:	5f 90       	pop	r5
     7f8:	4f 90       	pop	r4
     7fa:	08 95       	ret
printFloat():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:242
  size_t n = 0;

  if (isnan(number)) {
    return print("nan");
  }
  if (isinf(number)) {
     7fc:	46 01       	movw	r8, r12
     7fe:	57 01       	movw	r10, r14
     800:	e8 94       	clt
     802:	b7 f8       	bld	r11, 7
     804:	2f ef       	ldi	r18, 0xFF	; 255
     806:	3f ef       	ldi	r19, 0xFF	; 255
     808:	4f e7       	ldi	r20, 0x7F	; 127
     80a:	5f e7       	ldi	r21, 0x7F	; 127
     80c:	c5 01       	movw	r24, r10
     80e:	b4 01       	movw	r22, r8
     810:	0e 94 9d 0c 	call	0x193a	; 0x193a <__unordsf2>
     814:	81 11       	cpse	r24, r1
     816:	0c c0       	rjmp	.+24     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
     818:	2f ef       	ldi	r18, 0xFF	; 255
     81a:	3f ef       	ldi	r19, 0xFF	; 255
     81c:	4f e7       	ldi	r20, 0x7F	; 127
     81e:	5f e7       	ldi	r21, 0x7F	; 127
     820:	c5 01       	movw	r24, r10
     822:	b4 01       	movw	r22, r8
     824:	8d d6       	rcall	.+3354   	; 0x1540 <__cmpsf2>
     826:	18 16       	cp	r1, r24
     828:	1c f4       	brge	.+6      	; 0x830 <__DATA_REGION_LENGTH__+0x30>
write():
     82a:	8b ef       	ldi	r24, 0xFB	; 251
     82c:	9e e9       	ldi	r25, 0x9E	; 158
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:245
    return print("inf");
  }
  if (number > 4294967040.0) {
     82e:	d2 cf       	rjmp	.-92     	; 0x7d4 <Print::println(double, int) [clone .constprop.2]+0x2c>
printFloat():
     830:	2f ef       	ldi	r18, 0xFF	; 255
     832:	3f ef       	ldi	r19, 0xFF	; 255
     834:	4f e7       	ldi	r20, 0x7F	; 127
     836:	5f e4       	ldi	r21, 0x4F	; 79
     838:	c7 01       	movw	r24, r14
     83a:	b6 01       	movw	r22, r12
     83c:	cb d7       	rcall	.+3990   	; 0x17d4 <__gesf2>
     83e:	18 16       	cp	r1, r24
     840:	1c f4       	brge	.+6      	; 0x848 <__DATA_REGION_LENGTH__+0x48>
write():
     842:	8f ef       	ldi	r24, 0xFF	; 255
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:248
    return print("ovf");  // constant determined empirically
  }
  if (number < -4294967040.0) {
     844:	9e e9       	ldi	r25, 0x9E	; 158
     846:	c6 cf       	rjmp	.-116    	; 0x7d4 <Print::println(double, int) [clone .constprop.2]+0x2c>
printFloat():
     848:	2f ef       	ldi	r18, 0xFF	; 255
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	4f e7       	ldi	r20, 0x7F	; 127
     84e:	5f ec       	ldi	r21, 0xCF	; 207
     850:	c7 01       	movw	r24, r14
     852:	b6 01       	movw	r22, r12
     854:	75 d6       	rcall	.+3306   	; 0x1540 <__cmpsf2>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:253
    return print("ovf");  // constant determined empirically
  }

  // Handle negative numbers
  if (number < 0.0) {
     856:	87 fd       	sbrc	r24, 7
     858:	f4 cf       	rjmp	.-24     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
     85a:	20 e0       	ldi	r18, 0x00	; 0
     85c:	30 e0       	ldi	r19, 0x00	; 0
     85e:	a9 01       	movw	r20, r18
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:237

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) {
  size_t n = 0;
     860:	c7 01       	movw	r24, r14
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:253
  if (number < -4294967040.0) {
    return print("ovf");  // constant determined empirically
  }

  // Handle negative numbers
  if (number < 0.0) {
     862:	b6 01       	movw	r22, r12
     864:	6d d6       	rcall	.+3290   	; 0x1540 <__cmpsf2>
_ZN5Print7printlnEdi.constprop.2():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:71
size_t Print::print(const char str[]) {
  return write(str);
}

size_t Print::print(char c) {
  return write(c);
     866:	b1 2c       	mov	r11, r1
     868:	a1 2c       	mov	r10, r1
printFloat():
     86a:	87 ff       	sbrs	r24, 7
     86c:	09 c0       	rjmp	.+18     	; 0x880 <__DATA_REGION_LENGTH__+0x80>
print():
     86e:	6d e2       	ldi	r22, 0x2D	; 45
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:255
  }

  // Handle negative numbers
  if (number < 0.0) {
    n += print('-');
    number = -number;
     870:	84 e2       	ldi	r24, 0x24	; 36
     872:	98 e3       	ldi	r25, 0x38	; 56
     874:	14 dd       	rcall	.-1496   	; 0x29e <UartClass::write(unsigned char)>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:264
  double rounding = 0.5;
  for (uint8_t i = 0; i < digits; ++i) {
    rounding /= 10.0;
  }

  number += rounding;
     876:	5c 01       	movw	r10, r24
printFloat():
     878:	f7 fa       	bst	r15, 7
     87a:	f0 94       	com	r15
     87c:	f7 f8       	bld	r15, 7
     87e:	f0 94       	com	r15
     880:	2a e0       	ldi	r18, 0x0A	; 10
     882:	37 ed       	ldi	r19, 0xD7	; 215
     884:	43 ea       	ldi	r20, 0xA3	; 163
     886:	5b e3       	ldi	r21, 0x3B	; 59
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:267

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
     888:	c7 01       	movw	r24, r14
     88a:	b6 01       	movw	r22, r12
     88c:	f5 d5       	rcall	.+3050   	; 0x1478 <__addsf3>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:268
  double remainder = number - (double)int_part;
     88e:	2b 01       	movw	r4, r22
     890:	3c 01       	movw	r6, r24
     892:	c2 d6       	rcall	.+3460   	; 0x1618 <__fixunssfsi>
     894:	6b 01       	movw	r12, r22
     896:	7c 01       	movw	r14, r24
     898:	eb d6       	rcall	.+3542   	; 0x1670 <__floatunsisf>
     89a:	9b 01       	movw	r18, r22
     89c:	ac 01       	movw	r20, r24
     89e:	c3 01       	movw	r24, r6
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:105

size_t Print::print(unsigned long n, int base) {
  if (base == 0) {
    return write(n);
  } else {
    return printNumber(n, base);
     8a0:	b2 01       	movw	r22, r4
     8a2:	e9 d5       	rcall	.+3026   	; 0x1476 <__subsf3>
     8a4:	2b 01       	movw	r4, r22
     8a6:	3c 01       	movw	r6, r24
print():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:269
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
     8a8:	4a e0       	ldi	r20, 0x0A	; 10
     8aa:	c7 01       	movw	r24, r14
     8ac:	b6 01       	movw	r22, r12
     8ae:	d3 de       	rcall	.-602    	; 0x656 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.25]>
printFloat():
     8b0:	7c 01       	movw	r14, r24
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:273

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
     8b2:	ea 0c       	add	r14, r10
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:278
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0) {
    remainder *= 10.0;
     8b4:	fb 1c       	adc	r15, r11
write():
     8b6:	83 e0       	ldi	r24, 0x03	; 3
     8b8:	9f e9       	ldi	r25, 0x9F	; 159
     8ba:	c1 de       	rcall	.-638    	; 0x63e <Print::write(char const*) [clone .part.2] [clone .constprop.28]>
printFloat():
     8bc:	e8 0e       	add	r14, r24
     8be:	f9 1e       	adc	r15, r25
     8c0:	20 e0       	ldi	r18, 0x00	; 0
     8c2:	30 e0       	ldi	r19, 0x00	; 0
     8c4:	40 e2       	ldi	r20, 0x20	; 32
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:279
    unsigned int toPrint = (unsigned int)remainder;
     8c6:	51 e4       	ldi	r21, 0x41	; 65
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:83
size_t Print::print(int n, int base) {
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base) {
  return print((unsigned long) n, base);
     8c8:	c3 01       	movw	r24, r6
     8ca:	b2 01       	movw	r22, r4
     8cc:	87 d7       	rcall	.+3854   	; 0x17dc <__mulsf3>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:105

size_t Print::print(unsigned long n, int base) {
  if (base == 0) {
    return write(n);
  } else {
    return printNumber(n, base);
     8ce:	2b 01       	movw	r4, r22
     8d0:	3c 01       	movw	r6, r24
     8d2:	a2 d6       	rcall	.+3396   	; 0x1618 <__fixunssfsi>
print():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:280

  // Extract digits from the remainder one at a time
  while (digits-- > 0) {
    remainder *= 10.0;
    unsigned int toPrint = (unsigned int)remainder;
    n += print(toPrint);
     8d4:	4b 01       	movw	r8, r22
     8d6:	b1 2c       	mov	r11, r1
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:281
    remainder -= toPrint;
     8d8:	a1 2c       	mov	r10, r1
     8da:	4a e0       	ldi	r20, 0x0A	; 10
     8dc:	c5 01       	movw	r24, r10
     8de:	b4 01       	movw	r22, r8
     8e0:	ba de       	rcall	.-652    	; 0x656 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.25]>
printFloat():
     8e2:	e8 0e       	add	r14, r24
     8e4:	f9 1e       	adc	r15, r25
     8e6:	c5 01       	movw	r24, r10
     8e8:	b4 01       	movw	r22, r8
     8ea:	c2 d6       	rcall	.+3460   	; 0x1670 <__floatunsisf>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:278
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0) {
    remainder *= 10.0;
     8ec:	9b 01       	movw	r18, r22
     8ee:	ac 01       	movw	r20, r24
     8f0:	c3 01       	movw	r24, r6
     8f2:	b2 01       	movw	r22, r4
     8f4:	c0 d5       	rcall	.+2944   	; 0x1476 <__subsf3>
     8f6:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:279
    unsigned int toPrint = (unsigned int)remainder;
     8f8:	30 e0       	ldi	r19, 0x00	; 0
     8fa:	40 e2       	ldi	r20, 0x20	; 32
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:83
size_t Print::print(int n, int base) {
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base) {
  return print((unsigned long) n, base);
     8fc:	51 e4       	ldi	r21, 0x41	; 65
     8fe:	6e d7       	rcall	.+3804   	; 0x17dc <__mulsf3>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:105

size_t Print::print(unsigned long n, int base) {
  if (base == 0) {
    return write(n);
  } else {
    return printNumber(n, base);
     900:	8b d6       	rcall	.+3350   	; 0x1618 <__fixunssfsi>
print():
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:280

  // Extract digits from the remainder one at a time
  while (digits-- > 0) {
    remainder *= 10.0;
    unsigned int toPrint = (unsigned int)remainder;
    n += print(toPrint);
     906:	4a e0       	ldi	r20, 0x0A	; 10
     908:	a6 de       	rcall	.-692    	; 0x656 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.25]>
printFloat():
     90a:	e8 0e       	add	r14, r24
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART0.cpp:73
  #else
    ISR(USART0_DRE_vect, ISR_NAKED) {
      __asm__ __volatile__(
                "push  r30"    "\n\t"
                "push  r31"    "\n\t"
                :::);
     90c:	f9 1e       	adc	r15, r25
     90e:	64 cf       	rjmp	.-312    	; 0x7d8 <Print::println(double, int) [clone .constprop.2]+0x30>

00000910 <__vector_18>:
__vector_18():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART0.cpp:76
      __asm__ __volatile__(
                "jmp _do_dre"  "\n"
                ::"z"(&Serial));
     910:	ef 93       	push	r30
     912:	ff 93       	push	r31
     914:	e4 e2       	ldi	r30, 0x24	; 36
     916:	f8 e3       	ldi	r31, 0x38	; 56
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART0.cpp:55
  #else
    ISR(USART0_RXC_vect, ISR_NAKED) {
      __asm__ __volatile__(
            "push      r30"     "\n\t"
            "push      r31"     "\n\t"
            :::);
     918:	08 c0       	rjmp	.+16     	; 0x92a <_do_dre()>

0000091a <__vector_17>:
__vector_17():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART0.cpp:58
      __asm__ __volatile__(
            "jmp   _do_rxc"     "\n\t"
            ::"z"(&Serial));
     91a:	ef 93       	push	r30
     91c:	ff 93       	push	r31
     91e:	e4 e2       	ldi	r30, 0x24	; 36
     920:	f8 e3       	ldi	r31, 0x38	; 56
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART0.cpp:31
    ISR(USART0_TXC_vect, ISR_NAKED) {
      __asm__ __volatile__(
            "push  r30"         "\n\t" // push the low byte of Z
            "ldi r30, 0x00"     "\n\t" // and put the low bit of this USART there - 0x20 * n
            "jmp _do_txc"      "\n\t" // _do_txc pushes the other necessary registers and loads 0x08 into the high byte.
            :::);
     922:	31 c0       	rjmp	.+98     	; 0x986 <_do_rxc()>

00000924 <__vector_19>:
__vector_19():
     924:	ef 93       	push	r30
     926:	e0 e0       	ldi	r30, 0x00	; 0
     928:	52 c0       	rjmp	.+164    	; 0x9ce <_do_txc()>

0000092a <_do_dre()>:
_Z7_do_drev():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:307
      "out        0x3f,     r18"      "\n\t"  // restore SREG
      "pop         r18"               "\n\t"  // pop old r18
      "pop         r31"               "\n\t"  // pop the Z that the isr pushed.
      "pop         r30"               "\n\t"
      "reti"                        "\n"   // and RETI!
      ::);
     92a:	2f 93       	push	r18
     92c:	2f b7       	in	r18, 0x3f	; 63
     92e:	2f 93       	push	r18
     930:	8f 93       	push	r24
     932:	9f 93       	push	r25
     934:	af 93       	push	r26
     936:	bf 93       	push	r27
     938:	68 94       	set

0000093a <_poll_dre>:
     93a:	cf 93       	push	r28
     93c:	df 93       	push	r29
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	c4 85       	ldd	r28, Z+12	; 0x0c
     942:	d8 e0       	ldi	r29, 0x08	; 8
     944:	94 89       	ldd	r25, Z+20	; 0x14
     946:	df 01       	movw	r26, r30
     948:	a9 0f       	add	r26, r25
     94a:	b2 1f       	adc	r27, r18
     94c:	ab 5a       	subi	r26, 0xAB	; 171
     94e:	bf 4f       	sbci	r27, 0xFF	; 255
     950:	8c 91       	ld	r24, X
     952:	20 e4       	ldi	r18, 0x40	; 64
     954:	2c 83       	std	Y+4, r18	; 0x04
     956:	8a 83       	std	Y+2, r24	; 0x02
     958:	9f 5f       	subi	r25, 0xFF	; 255
     95a:	9f 73       	andi	r25, 0x3F	; 63
     95c:	8d 81       	ldd	r24, Y+5	; 0x05
     95e:	23 89       	ldd	r18, Z+19	; 0x13
     960:	29 13       	cpse	r18, r25
     962:	02 c0       	rjmp	.+4      	; 0x968 <_done_dre_irq>
     964:	8f 7d       	andi	r24, 0xDF	; 223
     966:	8d 83       	std	Y+5, r24	; 0x05

00000968 <_done_dre_irq>:
     968:	94 8b       	std	Z+20, r25	; 0x14
     96a:	df 91       	pop	r29
     96c:	cf 91       	pop	r28
     96e:	0e f0       	brts	.+2      	; 0x972 <_done_dre_irq+0xa>
     970:	95 cc       	rjmp	.-1750   	; 0x29c <_poll_dre_done>
     972:	bf 91       	pop	r27
     974:	af 91       	pop	r26
     976:	9f 91       	pop	r25
     978:	8f 91       	pop	r24
     97a:	2f 91       	pop	r18
     97c:	2f bf       	out	0x3f, r18	; 63
     97e:	2f 91       	pop	r18
     980:	ff 91       	pop	r31
     982:	ef 91       	pop	r30
     984:	18 95       	reti

00000986 <_do_rxc()>:
_Z7_do_rxcv():
     986:	2f 93       	push	r18
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:175
        "out       0x3f,       r18"   "\n\t" // and write back
        "pop        r18"              "\n\t" // used as tail pointer and z known zero.
        "pop        r31"              "\n\t" // end with Z which the isr pushed to make room for
        "pop        r30"              "\n\t" // pointer to serial instance
        "reti"                        "\n"   // return
        ::);
     988:	2f b7       	in	r18, 0x3f	; 63
     98a:	2f 93       	push	r18
     98c:	8f 93       	push	r24
     98e:	9f 93       	push	r25
     990:	cf 93       	push	r28
     992:	df 93       	push	r29
     994:	c4 85       	ldd	r28, Z+12	; 0x0c
     996:	d8 e0       	ldi	r29, 0x08	; 8
     998:	89 81       	ldd	r24, Y+1	; 0x01
     99a:	98 81       	ld	r25, Y
     99c:	81 fd       	sbrc	r24, 1
     99e:	0d c0       	rjmp	.+26     	; 0x9ba <_end_rxc>
     9a0:	c1 89       	ldd	r28, Z+17	; 0x11
     9a2:	81 e0       	ldi	r24, 0x01	; 1
     9a4:	8c 0f       	add	r24, r28
     9a6:	8f 73       	andi	r24, 0x3F	; 63
     9a8:	22 89       	ldd	r18, Z+18	; 0x12
     9aa:	28 17       	cp	r18, r24
     9ac:	31 f0       	breq	.+12     	; 0x9ba <_end_rxc>
     9ae:	ce 0f       	add	r28, r30
     9b0:	df 2f       	mov	r29, r31
     9b2:	20 e0       	ldi	r18, 0x00	; 0
     9b4:	d2 1f       	adc	r29, r18
     9b6:	9d 8b       	std	Y+21, r25	; 0x15
     9b8:	81 8b       	std	Z+17, r24	; 0x11

000009ba <_end_rxc>:
     9ba:	df 91       	pop	r29
     9bc:	cf 91       	pop	r28
     9be:	9f 91       	pop	r25
     9c0:	8f 91       	pop	r24
     9c2:	2f 91       	pop	r18
     9c4:	2f bf       	out	0x3f, r18	; 63
     9c6:	2f 91       	pop	r18
     9c8:	ff 91       	pop	r31
     9ca:	ef 91       	pop	r30
     9cc:	18 95       	reti

000009ce <_do_txc()>:
_Z7_do_txcv():
     9ce:	ff 93       	push	r31
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/UART.cpp:105
        "out     0x3f,      r24"  "\n\t"  // restore it
        "pop      r24"            "\n\t"  // pop r24 to get it's old value back
        "pop      r31"            "\n\t"  // and r31
        "pop      r30"            "\n\t"  // Pop the register the ISR did
        "reti"                    "\n"    // return from the interrupt.
        ::);
     9d0:	8f 93       	push	r24
     9d2:	8f b7       	in	r24, 0x3f	; 63
     9d4:	8f 93       	push	r24
     9d6:	f8 e0       	ldi	r31, 0x08	; 8

000009d8 <_txc_flush_rx>:
     9d8:	80 81       	ld	r24, Z
     9da:	84 81       	ldd	r24, Z+4	; 0x04
     9dc:	87 ff       	sbrs	r24, 7
     9de:	fc cf       	rjmp	.-8      	; 0x9d8 <_txc_flush_rx>
     9e0:	85 81       	ldd	r24, Z+5	; 0x05
     9e2:	8f 7b       	andi	r24, 0xBF	; 191
     9e4:	80 68       	ori	r24, 0x80	; 128
     9e6:	85 83       	std	Z+5, r24	; 0x05
     9e8:	8f 91       	pop	r24
     9ea:	8f bf       	out	0x3f, r24	; 63
     9ec:	8f 91       	pop	r24
     9ee:	ff 91       	pop	r31
     9f0:	ef 91       	pop	r30
     9f2:	18 95       	reti

000009f4 <__vector_25>:
__vector_25():
     9f4:	1f 92       	push	r1
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:142
#elif defined(MILLIS_USE_TIMERB1)
  ISR(TCB1_INT_vect)
#else
  #error "No millis timer selected, but not disabled - cannot determine millis vector"
#endif
{
     9f6:	0f 92       	push	r0
     9f8:	0f b6       	in	r0, 0x3f	; 63
     9fa:	0f 92       	push	r0
     9fc:	11 24       	eor	r1, r1
     9fe:	8f 93       	push	r24
     a00:	9f 93       	push	r25
     a02:	af 93       	push	r26
     a04:	bf 93       	push	r27
     a06:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:148
  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access)

  #if (defined(MILLIS_USE_TIMERB0)|defined(MILLIS_USE_TIMERB1))
    #if (F_CPU>1000000)
      timer_millis++; // that's all we need to do!
     a0a:	90 91 01 38 	lds	r25, 0x3801	; 0x803801 <__DATA_REGION_ORIGIN__+0x1>
     a0e:	a0 91 02 38 	lds	r26, 0x3802	; 0x803802 <__DATA_REGION_ORIGIN__+0x2>
     a12:	b0 91 03 38 	lds	r27, 0x3803	; 0x803803 <__DATA_REGION_ORIGIN__+0x3>
     a16:	01 96       	adiw	r24, 0x01	; 1
     a18:	a1 1d       	adc	r26, r1
     a1a:	b1 1d       	adc	r27, r1
     a1c:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__DATA_REGION_ORIGIN__>
     a20:	90 93 01 38 	sts	0x3801, r25	; 0x803801 <__DATA_REGION_ORIGIN__+0x1>
     a24:	a0 93 02 38 	sts	0x3802, r26	; 0x803802 <__DATA_REGION_ORIGIN__+0x2>
     a28:	b0 93 03 38 	sts	0x3803, r27	; 0x803803 <__DATA_REGION_ORIGIN__+0x3>
     a2c:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:177
  #elif defined(MILLIS_USE_TIMERD0)
    TCD0.INTFLAGS = TCD_OVF_bm;
  #elif defined(MILLIS_USE_TIMERRTC)
    RTC.INTFLAGS = RTC_OVF_bm;
  #else // timerb
    _timer->INTFLAGS = TCB_CAPT_bm;
     a2e:	80 93 96 0a 	sts	0x0A96, r24	; 0x800a96 <vtable for UartClass+0x7f6bcc>
     a32:	bf 91       	pop	r27
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:179
  #endif
}
     a34:	af 91       	pop	r26
     a36:	9f 91       	pop	r25
     a38:	8f 91       	pop	r24
     a3a:	0f 90       	pop	r0
     a3c:	0f be       	out	0x3f, r0	; 63
     a3e:	0f 90       	pop	r0
     a40:	1f 90       	pop	r1
     a42:	18 95       	reti

00000a44 <global constructors keyed to 65535_0_Altimetr_SPI.cpp.o.2458>:
_GLOBAL__I_65535_0_Altimetr_SPI.cpp.o.2458():
     a44:	10 92 26 38 	sts	0x3826, r1	; 0x803826 <Serial+0x2>
     a48:	10 92 27 38 	sts	0x3827, r1	; 0x803827 <Serial+0x3>
     a4c:	88 ee       	ldi	r24, 0xE8	; 232
     a4e:	93 e0       	ldi	r25, 0x03	; 3
     a50:	a0 e0       	ldi	r26, 0x00	; 0
     a52:	b0 e0       	ldi	r27, 0x00	; 0
     a54:	80 93 28 38 	sts	0x3828, r24	; 0x803828 <Serial+0x4>
     a58:	90 93 29 38 	sts	0x3829, r25	; 0x803829 <Serial+0x5>
     a5c:	a0 93 2a 38 	sts	0x382A, r26	; 0x80382a <Serial+0x6>
     a60:	b0 93 2b 38 	sts	0x382B, r27	; 0x80382b <Serial+0x7>
     a64:	8e ec       	ldi	r24, 0xCE	; 206
     a66:	9e e9       	ldi	r25, 0x9E	; 158
     a68:	80 93 24 38 	sts	0x3824, r24	; 0x803824 <Serial>
     a6c:	90 93 25 38 	sts	0x3825, r25	; 0x803825 <Serial+0x1>
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	98 e0       	ldi	r25, 0x08	; 8
     a74:	80 93 30 38 	sts	0x3830, r24	; 0x803830 <Serial+0xc>
     a78:	90 93 31 38 	sts	0x3831, r25	; 0x803831 <Serial+0xd>
     a7c:	10 92 32 38 	sts	0x3832, r1	; 0x803832 <Serial+0xe>
     a80:	10 92 33 38 	sts	0x3833, r1	; 0x803833 <Serial+0xf>
     a84:	40 e8       	ldi	r20, 0x80	; 128
     a86:	56 e9       	ldi	r21, 0x96	; 150
     a88:	68 e9       	ldi	r22, 0x98	; 152
     a8a:	70 e0       	ldi	r23, 0x00	; 0
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	8f 5f       	subi	r24, 0xFF	; 255
     a90:	86 30       	cpi	r24, 0x06	; 6
     a92:	11 f4       	brne	.+4      	; 0xa98 <global constructors keyed to 65535_0_Altimetr_SPI.cpp.o.2458+0x54>
     a94:	87 e0       	ldi	r24, 0x07	; 7
     a96:	0b c0       	rjmp	.+22     	; 0xaae <global constructors keyed to 65535_0_Altimetr_SPI.cpp.o.2458+0x6a>
     a98:	76 95       	lsr	r23
     a9a:	67 95       	ror	r22
     a9c:	57 95       	ror	r21
     a9e:	47 95       	ror	r20
     aa0:	41 30       	cpi	r20, 0x01	; 1
     aa2:	99 e0       	ldi	r25, 0x09	; 9
     aa4:	59 07       	cpc	r21, r25
     aa6:	9d e3       	ldi	r25, 0x3D	; 61
     aa8:	69 07       	cpc	r22, r25
     aaa:	71 05       	cpc	r23, r1
     aac:	80 f7       	brcc	.-32     	; 0xa8e <global constructors keyed to 65535_0_Altimetr_SPI.cpp.o.2458+0x4a>
     aae:	94 e0       	ldi	r25, 0x04	; 4
     ab0:	90 93 d6 38 	sts	0x38D6, r25	; 0x8038d6 <DEFAULT_SPI_SETTINGS+0x1>
     ab4:	98 2f       	mov	r25, r24
     ab6:	90 95       	com	r25
     ab8:	29 2f       	mov	r18, r25
     aba:	21 70       	andi	r18, 0x01	; 1
     abc:	30 e0       	ldi	r19, 0x00	; 0
     abe:	94 e0       	ldi	r25, 0x04	; 4
     ac0:	22 0f       	add	r18, r18
     ac2:	33 1f       	adc	r19, r19
     ac4:	9a 95       	dec	r25
     ac6:	e1 f7       	brne	.-8      	; 0xac0 <global constructors keyed to 65535_0_Altimetr_SPI.cpp.o.2458+0x7c>
     ac8:	81 62       	ori	r24, 0x21	; 33
     aca:	82 2b       	or	r24, r18
     acc:	80 93 d5 38 	sts	0x38D5, r24	; 0x8038d5 <DEFAULT_SPI_SETTINGS>
     ad0:	10 92 be 38 	sts	0x38BE, r1	; 0x8038be <SPI+0x5>
     ad4:	08 95       	ret

00000ad6 <main>:
main():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/main.cpp:49
 * called first in non-optiboot configurations (neither is needed on Optibooot configurations() *
 * an extra bit of initialization code in .init3 to fix the vectors and still happen if user    *
 * overrides main. In the past there was a USB-related function here, that is removed, as work  *
 * will be needed in any event at the core level if VUSB-based "stuff" arrives, but really I'm  *
 * just waiting for the DU-series now                                                           */
int main() {
     ad6:	cf 93       	push	r28
     ad8:	df 93       	push	r29
     ada:	cd b7       	in	r28, 0x3d	; 61
     adc:	de b7       	in	r29, 0x3e	; 62
     ade:	c7 55       	subi	r28, 0x57	; 87
     ae0:	d1 09       	sbc	r29, r1
     ae2:	cd bf       	out	0x3d, r28	; 61
     ae4:	de bf       	out	0x3e, r29	; 62
init_clock():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:1275
    #if (defined(CLOCK_TUNE_INTERNAL))
      tune_internal(); // Will be inlined as only called once. Just too long and ugly to put two implementations in middle of this.
    #else
      #if (F_CPU == 20000000)
        /* No division on clock */
        _PROTECTED_WRITE(CLKCTRL_MCLKCTRLB, 0x00);
     ae6:	88 ed       	ldi	r24, 0xD8	; 216
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	84 bf       	out	0x34, r24	; 52
     aec:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <vtable for UartClass+0x7f6197>
init_ADC0():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:1407
    #elif F_CPU  >= 30000000            // 32 MHz /12 = 2.67 MHz
      ADC0.CTRLB  = ADC_PRESC_DIV12_gc; // 30 MHz /12 = 2.50 MHz
    #elif F_CPU  >= 24000000            // 25 MHz /10 = 2.50 MHz
      ADC0.CTRLB  = ADC_PRESC_DIV10_gc; // 24 MHz /10 = 2.40 MHz
    #elif F_CPU  >= 20000000
      ADC0.CTRLB  = ADC_PRESC_DIV8_gc;  // 20 MHz / 8 = 2.50 MHz
     af0:	83 e0       	ldi	r24, 0x03	; 3
     af2:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <vtable for UartClass+0x7f6737>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:1417
    #elif F_CPU  >=  6000000            // 10 MHz / 4 = 2.50 MHz
      ADC0.CTRLB  = ADC_PRESC_DIV4_gc;  //  8 MHz / 4 = 2.00 MHz
    #else                               //  5 MHz / 2 = 2.50 MHz
      ADC0.CTRLB  = ADC_PRESC_DIV2_gc;  //  4 MHz / 2 = 2.00 MHz
    #endif                              //  1 MHz / 2 =  500 kHz
    ADC0.CTRLE = 15; // 15.5 without PGA, 16 with PGA, corresponding to 7.75 or 8 us.
     af6:	9f e0       	ldi	r25, 0x0F	; 15
     af8:	90 93 08 06 	sts	0x0608, r25	; 0x800608 <vtable for UartClass+0x7f673e>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:1418
    ADC0.CTRLA = ADC_ENABLE_bm | ADC_LOWLAT_bm;
     afc:	91 e2       	ldi	r25, 0x21	; 33
     afe:	90 93 00 06 	sts	0x0600, r25	; 0x800600 <vtable for UartClass+0x7f6736>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:1423
    /* Default low latency mode on
     * Users can turn it off if they care about power consumption while ADC is on
     * and chip is awake, since these parts don't have the perverse ADC-left-on
     * behavior of classic AVRs. */
    ADC0.CTRLC = TIMEBASE_1US; // defined in Arduino.h.
     b02:	90 ea       	ldi	r25, 0xA0	; 160
     b04:	90 93 02 06 	sts	0x0602, r25	; 0x800602 <vtable for UartClass+0x7f6738>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:1424
    ADC0.PGACTRL = ADC_PGABIASSEL_3_4X_gc | ADC_ADCPGASAMPDUR_15CLK_gc;
     b08:	9a e0       	ldi	r25, 0x0A	; 10
     b0a:	90 93 0b 06 	sts	0x060B, r25	; 0x80060b <vtable for UartClass+0x7f6741>
init_TCA0():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:1487
  #ifdef __AVR_ATtinyxy2__
    PORTMUX.CTRLC = 1; // move WO0 output to PA7 so PA3 can be used with WO3
  #endif

  /* Enable Split Mode */
  TCA0.SPLIT.CTRLD = TCA_SPLIT_SPLITM_bm;
     b0e:	91 e0       	ldi	r25, 0x01	; 1
     b10:	90 93 03 0a 	sts	0x0A03, r25	; 0x800a03 <vtable for UartClass+0x7f6b39>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:1492

  // Only 1 WGM so no need to specifically set up.

  /* Period setting, 8-bit register in SPLIT mode */
  TCA0.SPLIT.LPER    = PWM_TIMER_PERIOD;
     b14:	2e ef       	ldi	r18, 0xFE	; 254
     b16:	20 93 26 0a 	sts	0x0A26, r18	; 0x800a26 <vtable for UartClass+0x7f6b5c>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:1493
  TCA0.SPLIT.HPER    = PWM_TIMER_PERIOD;
     b1a:	20 93 27 0a 	sts	0x0A27, r18	; 0x800a27 <vtable for UartClass+0x7f6b5d>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:1511
  /* Use prescale appropriate for system clock speed */

  #if (F_CPU > 25000000) //   use 256 divider when clocked over 25 MHz
    TCA0.SPLIT.CTRLA   = (TCA_SPLIT_CLKSEL_DIV256_gc) | (TCA_SPLIT_ENABLE_bm);
  #elif (F_CPU > 5000000) //  use 64 divider for everything in the middle
    TCA0.SPLIT.CTRLA   =  (TCA_SPLIT_CLKSEL_DIV64_gc) | (TCA_SPLIT_ENABLE_bm);
     b1e:	2b e0       	ldi	r18, 0x0B	; 11
     b20:	20 93 00 0a 	sts	0x0A00, r18	; 0x800a00 <vtable for UartClass+0x7f6b36>
init_millis():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:1204
        // RTC.CLKSEL=0; this is the power on value
      #endif
      RTC.INTCTRL         = 0x01; // enable overflow interrupt
      RTC.CTRLA           = (RTC_RUNSTDBY_bm|RTC_RTCEN_bm|RTC_PRESCALER_DIV32_gc);//fire it up, prescale by 32.
    #else // It's a type b timer - we have already errored out if that wasn't defined
      _timer->CCMP = TIME_TRACKING_TIMER_PERIOD;
     b24:	2f e0       	ldi	r18, 0x0F	; 15
     b26:	37 e2       	ldi	r19, 0x27	; 39
     b28:	20 93 9c 0a 	sts	0x0A9C, r18	; 0x800a9c <vtable for UartClass+0x7f6bd2>
     b2c:	30 93 9d 0a 	sts	0x0A9D, r19	; 0x800a9d <vtable for UartClass+0x7f6bd3>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:1206
      // Enable timer interrupt, but clear the rest of register
      _timer->INTCTRL = TCB_CAPT_bm;
     b30:	90 93 95 0a 	sts	0x0A95, r25	; 0x800a95 <vtable for UartClass+0x7f6bcb>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:1208
      // Clear timer mode (since it will have been set as PWM by init())
      _timer->CTRLB = 0;
     b34:	10 92 91 0a 	sts	0x0A91, r1	; 0x800a91 <vtable for UartClass+0x7f6bc7>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:1210
      // CLK_PER/1 is 0b00,. CLK_PER/2 is 0b01, so bitwise OR of valid divider with enable works
      _timer->CTRLA = TIME_TRACKING_TIMER_DIVIDER|TCB_ENABLE_bm;  // Keep this last before enabling interrupts to ensure tracking as accurate as possible
     b38:	80 93 90 0a 	sts	0x0A90, r24	; 0x800a90 <vtable for UartClass+0x7f6bc6>
init():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:1257
  #ifndef MILLIS_USE_TIMERNONE
    init_millis();
  #endif
  /*************************** ENABLE GLOBAL INTERRUPTS *************************/
  // Finally, after everything is initialized, we go ahead and enable interrupts.
  sei();
     b3c:	78 94       	sei
main():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/main.cpp:53
  onBeforeInit(); // Emnpty callback called before init but after the .init stuff. First normal code executed
  init(); // Interrupts are turned on just prior to init() returning.
  initVariant();
  if (!onAfterInit()) sei();  // enable interrupts.
     b3e:	78 94       	sei
     b40:	10 e0       	ldi	r17, 0x00	; 0
setup():
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:72

void setup()
{
  // put your setup code here, to run once:
  for (int i = 0; i < 11; i++) // For all pins
    pinMode(i, OUTPUT);
     b42:	61 e0       	ldi	r22, 0x01	; 1
     b44:	81 2f       	mov	r24, r17
     b46:	9f dc       	rcall	.-1730   	; 0x486 <pinMode>
     b48:	1f 5f       	subi	r17, 0xFF	; 255
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:71
BMP280_HandleTypedef calibrationData;

void setup()
{
  // put your setup code here, to run once:
  for (int i = 0; i < 11; i++) // For all pins
     b4a:	1b 30       	cpi	r17, 0x0B	; 11
     b4c:	d1 f7       	brne	.-12     	; 0xb42 <main+0x6c>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:73
    pinMode(i, OUTPUT);
  pinMode(SEND_DATA_UART_EN, INPUT_PULLUP);
     b4e:	62 e0       	ldi	r22, 0x02	; 2
     b50:	83 e0       	ldi	r24, 0x03	; 3
     b52:	99 dc       	rcall	.-1742   	; 0x486 <pinMode>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:74
  Serial.begin(115200);
     b54:	40 e0       	ldi	r20, 0x00	; 0
     b56:	52 ec       	ldi	r21, 0xC2	; 194
     b58:	61 e0       	ldi	r22, 0x01	; 1
     b5a:	70 e0       	ldi	r23, 0x00	; 0
     b5c:	84 e2       	ldi	r24, 0x24	; 36
     b5e:	98 e3       	ldi	r25, 0x38	; 56
     b60:	69 dc       	rcall	.-1838   	; 0x434 <UartClass::begin(unsigned long)>
write():
     b62:	85 e0       	ldi	r24, 0x05	; 5
     b64:	9f e9       	ldi	r25, 0x9F	; 159
     b66:	6b dd       	rcall	.-1322   	; 0x63e <Print::write(char const*) [clone .part.2] [clone .constprop.28]>
     b68:	84 ee       	ldi	r24, 0xE4	; 228
     b6a:	9e e9       	ldi	r25, 0x9E	; 158
     b6c:	68 dd       	rcall	.-1328   	; 0x63e <Print::write(char const*) [clone .part.2] [clone .constprop.28]>
init():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\libraries\SPI\src/SPI.cpp:149

  config(DEFAULT_SPI_SETTINGS);
}

void SPIClass::init() {
  if (initialized) {
     b6e:	80 91 be 38 	lds	r24, 0x38BE	; 0x8038be <SPI+0x5>
     b72:	81 11       	cpse	r24, r1
     b74:	17 c0       	rjmp	.+46     	; 0xba4 <main+0xce>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\libraries\SPI\src/SPI.cpp:152
    return;
  }
  interruptMode = SPI_IMODE_NONE;
     b76:	10 92 bf 38 	sts	0x38BF, r1	; 0x8038bf <SPI+0x6>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\libraries\SPI\src/SPI.cpp:153
  interruptSave = 0;
     b7a:	10 92 c0 38 	sts	0x38C0, r1	; 0x8038c0 <SPI+0x7>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\libraries\SPI\src/SPI.cpp:154
  interruptMask_lo = 0;
     b7e:	10 92 c1 38 	sts	0x38C1, r1	; 0x8038c1 <SPI+0x8>
     b82:	10 92 c2 38 	sts	0x38C2, r1	; 0x8038c2 <SPI+0x9>
     b86:	10 92 c3 38 	sts	0x38C3, r1	; 0x8038c3 <SPI+0xa>
     b8a:	10 92 c4 38 	sts	0x38C4, r1	; 0x8038c4 <SPI+0xb>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\libraries\SPI\src/SPI.cpp:155
  interruptMask_hi = 0;
     b8e:	10 92 c5 38 	sts	0x38C5, r1	; 0x8038c5 <SPI+0xc>
     b92:	10 92 c6 38 	sts	0x38C6, r1	; 0x8038c6 <SPI+0xd>
     b96:	10 92 c7 38 	sts	0x38C7, r1	; 0x8038c7 <SPI+0xe>
     b9a:	10 92 c8 38 	sts	0x38C8, r1	; 0x8038c8 <SPI+0xf>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\libraries\SPI\src/SPI.cpp:156
  initialized = true;
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	80 93 be 38 	sts	0x38BE, r24	; 0x8038be <SPI+0x5>
begin():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\libraries\SPI\src/SPI.cpp:111
void SPIClass::begin() {
  init();
  #if defined(PORTMUX_CTRLB)
  PORTMUX.CTRLB = _uc_mux | (PORTMUX.CTRLB & ~PORTMUX_SPI0_bm);
  #elif defined(PORTMUX_SPIROUTEA)
  PORTMUX.SPIROUTEA = _uc_mux | (PORTMUX.SPIROUTEA & ~3);
     ba4:	80 91 e3 05 	lds	r24, 0x05E3	; 0x8005e3 <vtable for UartClass+0x7f6719>
     ba8:	8c 7f       	andi	r24, 0xFC	; 252
     baa:	90 91 bd 38 	lds	r25, 0x38BD	; 0x8038bd <SPI+0x4>
     bae:	89 2b       	or	r24, r25
     bb0:	80 93 e3 05 	sts	0x05E3, r24	; 0x8005e3 <vtable for UartClass+0x7f6719>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\libraries\SPI\src/SPI.cpp:138
    pinMode(PIN_SPI_SCK_PINSWAP_2, OUTPUT);
  }
  #endif
  #else
  // MISO is set to input by the controller
  pinMode(PIN_SPI_MOSI, OUTPUT);
     bb4:	61 e0       	ldi	r22, 0x01	; 1
     bb6:	88 e0       	ldi	r24, 0x08	; 8
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\libraries\SPI\src/SPI.cpp:139
  pinMode(PIN_SPI_SCK, OUTPUT);
     bb8:	66 dc       	rcall	.-1844   	; 0x486 <pinMode>
     bba:	61 e0       	ldi	r22, 0x01	; 1
     bbc:	8a e0       	ldi	r24, 0x0A	; 10
     bbe:	63 dc       	rcall	.-1850   	; 0x486 <pinMode>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\libraries\SPI\src/SPI.cpp:142
  #endif

  SPI0.CTRLB |= (SPI_SSD_bm);
     bc0:	80 91 c1 08 	lds	r24, 0x08C1	; 0x8008c1 <vtable for UartClass+0x7f69f7>
     bc4:	84 60       	ori	r24, 0x04	; 4
     bc6:	80 93 c1 08 	sts	0x08C1, r24	; 0x8008c1 <vtable for UartClass+0x7f69f7>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\libraries\SPI\src/SPI.cpp:143
  SPI0.CTRLA |= (SPI_ENABLE_bm | SPI_MASTER_bm);
     bca:	80 91 c0 08 	lds	r24, 0x08C0	; 0x8008c0 <vtable for UartClass+0x7f69f6>
     bce:	81 62       	ori	r24, 0x21	; 33
     bd0:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <vtable for UartClass+0x7f69f6>
     bd4:	90 91 d5 38 	lds	r25, 0x38D5	; 0x8038d5 <DEFAULT_SPI_SETTINGS>
     bd8:	80 91 d6 38 	lds	r24, 0x38D6	; 0x8038d6 <DEFAULT_SPI_SETTINGS+0x1>
config():
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\libraries\SPI\src/SPI.cpp:161
  initialized = true;
}

void SPIClass::config(SPISettings settings) {
  SPI0.CTRLA = settings.ctrla;
  SPI0.CTRLB = settings.ctrlb;
     bdc:	90 93 c0 08 	sts	0x08C0, r25	; 0x8008c0 <vtable for UartClass+0x7f69f6>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:278
{
  // MSB = 0 -> WRITE
  uint8_t writeRegister = WRITE_REGISTER(thisRegister);

  // take the chip select low to select the device:
  digitalWrite(chipSelectPin, LOW);
     be0:	80 93 c1 08 	sts	0x08C1, r24	; 0x8008c1 <vtable for UartClass+0x7f69f7>
writeRegister():
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:280

  SPI.transfer(writeRegister); // Send register location
     be4:	80 e0       	ldi	r24, 0x00	; 0
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:281
  SPI.transfer(thisValue);     // Send value to record into register
     be6:	2f dc       	rcall	.-1954   	; 0x446 <digitalWrite.constprop.30>
     be8:	84 e7       	ldi	r24, 0x74	; 116
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:284

  // take the chip select high to de-select:
  digitalWrite(chipSelectPin, HIGH);
     bea:	b1 da       	rcall	.-2718   	; 0x14e <SPIClass::transfer(unsigned char) [clone .constprop.29]>
     bec:	8f e2       	ldi	r24, 0x2F	; 47
     bee:	af da       	rcall	.-2722   	; 0x14e <SPIClass::transfer(unsigned char) [clone .constprop.29]>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:278
{
  // MSB = 0 -> WRITE
  uint8_t writeRegister = WRITE_REGISTER(thisRegister);

  // take the chip select low to select the device:
  digitalWrite(chipSelectPin, LOW);
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	29 dc       	rcall	.-1966   	; 0x446 <digitalWrite.constprop.30>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:280

  SPI.transfer(writeRegister); // Send register location
     bf4:	80 e0       	ldi	r24, 0x00	; 0
     bf6:	27 dc       	rcall	.-1970   	; 0x446 <digitalWrite.constprop.30>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:281
  SPI.transfer(thisValue);     // Send value to record into register
     bf8:	85 e7       	ldi	r24, 0x75	; 117
     bfa:	a9 da       	rcall	.-2734   	; 0x14e <SPIClass::transfer(unsigned char) [clone .constprop.29]>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:284

  // take the chip select high to de-select:
  digitalWrite(chipSelectPin, HIGH);
     bfc:	88 e4       	ldi	r24, 0x48	; 72
     bfe:	a7 da       	rcall	.-2738   	; 0x14e <SPIClass::transfer(unsigned char) [clone .constprop.29]>
     c00:	81 e0       	ldi	r24, 0x01	; 1
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:84
  // writeRegister(0x02, 0x2D);
  // writeRegister(0x01, 0x03);
  // writeRegister(0x03, 0x02);
  // give the sensor time to set up:
  BMP280_CONFIG();
  delay(100);
     c02:	21 dc       	rcall	.-1982   	; 0x446 <digitalWrite.constprop.30>
setup():
     c04:	64 e6       	ldi	r22, 0x64	; 100
     c06:	70 e0       	ldi	r23, 0x00	; 0
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	e9 db       	rcall	.-2094   	; 0x3e0 <delay>
write():
     c0e:	8b e0       	ldi	r24, 0x0B	; 11
     c10:	9f e9       	ldi	r25, 0x9F	; 159
     c12:	15 dd       	rcall	.-1494   	; 0x63e <Print::write(char const*) [clone .part.2] [clone .constprop.28]>
     c14:	84 ee       	ldi	r24, 0xE4	; 228
     c16:	9e e9       	ldi	r25, 0x9E	; 158
     c18:	12 dd       	rcall	.-1500   	; 0x63e <Print::write(char const*) [clone .part.2] [clone .constprop.28]>
     c1a:	8e 01       	movw	r16, r28
     c1c:	0f 5f       	subi	r16, 0xFF	; 255
     c1e:	1f 4f       	sbci	r17, 0xFF	; 255
     c20:	58 01       	movw	r10, r16
     c22:	a8 e8       	ldi	r26, 0x88	; 136
     c24:	ca 2e       	mov	r12, r26
     c26:	d1 2c       	mov	r13, r1
     c28:	e1 2c       	mov	r14, r1
     c2a:	f1 2c       	mov	r15, r1
main():
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:290
}
struct BMP280_HandleTypedef calibration()
{
  int32_t data[12];
  Serial.println("CALIBRATION:");
  for (int i = 0; i < 12; i++)
     c2c:	10 e0       	ldi	r17, 0x00	; 0
     c2e:	00 e0       	ldi	r16, 0x00	; 0
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:162

uint16_t ReadTwoRegistersUint(uint8_t thisRegister, uint8_t chipSelectPin, bool lastMSB)
{
  uint8_t inByte = 0;  // incoming byte from the SPI
  uint16_t result = 0; // result to return
  Serial.print("From register:\t");
     c30:	9c 2c       	mov	r9, r12
ReadTwoRegistersUint():
     c32:	87 ee       	ldi	r24, 0xE7	; 231
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:292
{
  int32_t data[12];
  Serial.println("CALIBRATION:");
  for (int i = 0; i < 12; i++)
  {
    if (i == 0 || i == 3)
     c34:	9e e9       	ldi	r25, 0x9E	; 158
calibration():
     c36:	01 15       	cp	r16, r1
     c38:	11 05       	cpc	r17, r1
     c3a:	21 f0       	breq	.+8      	; 0xc44 <main+0x16e>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:162

uint16_t ReadTwoRegistersUint(uint8_t thisRegister, uint8_t chipSelectPin, bool lastMSB)
{
  uint8_t inByte = 0;  // incoming byte from the SPI
  uint16_t result = 0; // result to return
  Serial.print("From register:\t");
     c3c:	03 30       	cpi	r16, 0x03	; 3
     c3e:	11 05       	cpc	r17, r1
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:105

size_t Print::print(unsigned long n, int base) {
  if (base == 0) {
    return write(n);
  } else {
    return printNumber(n, base);
     c40:	09 f0       	breq	.+2      	; 0xc44 <main+0x16e>
     c42:	c7 c3       	rjmp	.+1934   	; 0x13d2 <main+0x8fc>
ReadTwoRegistersUint():
     c44:	56 dd       	rcall	.-1364   	; 0x6f2 <Print::print(char const*) [clone .constprop.20]>
print():
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:164
  Serial.print(thisRegister, HEX);
  Serial.print("\t");
     c46:	40 e1       	ldi	r20, 0x10	; 16
     c48:	c7 01       	movw	r24, r14
     c4a:	b6 01       	movw	r22, r12
     c4c:	04 dd       	rcall	.-1528   	; 0x656 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.25]>
ReadTwoRegistersUint():
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:167

  uint8_t readRegister = READ_REGISTER(thisRegister);
  Serial.println(readRegister, HEX);
     c4e:	89 e4       	ldi	r24, 0x49	; 73
     c50:	9f e9       	ldi	r25, 0x9F	; 159
     c52:	4f dd       	rcall	.-1378   	; 0x6f2 <Print::print(char const*) [clone .constprop.20]>
     c54:	60 e1       	ldi	r22, 0x10	; 16
     c56:	70 e0       	ldi	r23, 0x00	; 0
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:170

  // take the chip select low to select the device:
  digitalWrite(chipSelectPin, LOW);
     c58:	89 2d       	mov	r24, r9
     c5a:	3a dd       	rcall	.-1420   	; 0x6d0 <Print::println(unsigned char, int) [clone .constprop.21]>
     c5c:	80 e0       	ldi	r24, 0x00	; 0
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:172
  // send the device the register you want to read:
  SPI.transfer(readRegister);
     c5e:	f3 db       	rcall	.-2074   	; 0x446 <digitalWrite.constprop.30>
     c60:	89 2d       	mov	r24, r9
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:174
  // send a value of 0 to read the first byte returned:
  result = SPI.transfer(0x00);
     c62:	75 da       	rcall	.-2838   	; 0x14e <SPIClass::transfer(unsigned char) [clone .constprop.29]>
     c64:	80 e0       	ldi	r24, 0x00	; 0
     c66:	73 da       	rcall	.-2842   	; 0x14e <SPIClass::transfer(unsigned char) [clone .constprop.29]>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:175
  inByte = SPI.transfer(0x00);
     c68:	88 2e       	mov	r8, r24
     c6a:	80 e0       	ldi	r24, 0x00	; 0
     c6c:	70 da       	rcall	.-2848   	; 0x14e <SPIClass::transfer(unsigned char) [clone .constprop.29]>
     c6e:	98 2e       	mov	r9, r24
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:177
  // take the chip select high to de-select:
  digitalWrite(chipSelectPin, HIGH);
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	e9 db       	rcall	.-2094   	; 0x446 <digitalWrite.constprop.30>
     c74:	c4 01       	movw	r24, r8
calibration():
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:181
  if (lastMSB)
  {
    // combine the byte you just got with the previous one:
    result = result | (inByte << 8);
     c76:	b0 e0       	ldi	r27, 0x00	; 0
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:293
  int32_t data[12];
  Serial.println("CALIBRATION:");
  for (int i = 0; i < 12; i++)
  {
    if (i == 0 || i == 3)
      data[i] = ReadTwoRegistersUint(REGISTER_DIG_T1 + i * 2, CS_BMP, LAST_MSB);
     c78:	a0 e0       	ldi	r26, 0x00	; 0
     c7a:	f5 01       	movw	r30, r10
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:295
    else
      data[i] = ReadTwoRegistersInt(REGISTER_DIG_T1 + i * 2, CS_BMP, LAST_MSB);
     c7c:	80 83       	st	Z, r24
     c7e:	91 83       	std	Z+1, r25	; 0x01
     c80:	a2 83       	std	Z+2, r26	; 0x02
     c82:	b3 83       	std	Z+3, r27	; 0x03
println():
     c84:	61 91       	ld	r22, Z+
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:164
  n += println();
  return n;
}

size_t Print::println(long num, int base) {
  size_t n = print(num, base);
     c86:	71 91       	ld	r23, Z+
     c88:	81 91       	ld	r24, Z+
     c8a:	91 91       	ld	r25, Z+
     c8c:	5f 01       	movw	r10, r30
     c8e:	63 dd       	rcall	.-1338   	; 0x756 <Print::print(long, int) [clone .constprop.13]>
write():
     c90:	84 ee       	ldi	r24, 0xE4	; 228
     c92:	9e e9       	ldi	r25, 0x9E	; 158
     c94:	d4 dc       	rcall	.-1624   	; 0x63e <Print::write(char const*) [clone .part.2] [clone .constprop.28]>
calibration():
     c96:	0f 5f       	subi	r16, 0xFF	; 255
     c98:	1f 4f       	sbci	r17, 0xFF	; 255
     c9a:	f2 e0       	ldi	r31, 0x02	; 2
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:290
}
struct BMP280_HandleTypedef calibration()
{
  int32_t data[12];
  Serial.println("CALIBRATION:");
  for (int i = 0; i < 12; i++)
     c9c:	cf 0e       	add	r12, r31
     c9e:	d1 1c       	adc	r13, r1
     ca0:	e1 1c       	adc	r14, r1
     ca2:	f1 1c       	adc	r15, r1
     ca4:	0c 30       	cpi	r16, 0x0C	; 12
     ca6:	11 05       	cpc	r17, r1
     ca8:	09 f0       	breq	.+2      	; 0xcac <main+0x1d6>
     caa:	c2 cf       	rjmp	.-124    	; 0xc30 <main+0x15a>
     cac:	c9 80       	ldd	r12, Y+1	; 0x01
     cae:	da 80       	ldd	r13, Y+2	; 0x02
     cb0:	ed 80       	ldd	r14, Y+5	; 0x05
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:299
    else
      data[i] = ReadTwoRegistersInt(REGISTER_DIG_T1 + i * 2, CS_BMP, LAST_MSB);
    Serial.println(data[i]);
  }
  BMP280_HandleTypedef datastruct;
  datastruct.dig_T1 = (uint16_t)data[0];
     cb2:	fe 80       	ldd	r15, Y+6	; 0x06
     cb4:	09 85       	ldd	r16, Y+9	; 0x09
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:300
  datastruct.dig_T2 = (int16_t)data[1];
     cb6:	1a 85       	ldd	r17, Y+10	; 0x0a
     cb8:	ad 85       	ldd	r26, Y+13	; 0x0d
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:301
  datastruct.dig_T3 = (int16_t)data[2];
     cba:	be 85       	ldd	r27, Y+14	; 0x0e
     cbc:	e9 89       	ldd	r30, Y+17	; 0x11
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:302
  datastruct.dig_P1 = (uint16_t)data[3];
     cbe:	fa 89       	ldd	r31, Y+18	; 0x12
     cc0:	6d 89       	ldd	r22, Y+21	; 0x15
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:303
  datastruct.dig_P2 = (int16_t)data[4];
     cc2:	7e 89       	ldd	r23, Y+22	; 0x16
     cc4:	49 8d       	ldd	r20, Y+25	; 0x19
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:304
  datastruct.dig_P3 = (int16_t)data[5];
     cc6:	5a 8d       	ldd	r21, Y+26	; 0x1a
     cc8:	2d 8d       	ldd	r18, Y+29	; 0x1d
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:305
  datastruct.dig_P4 = (int16_t)data[6];
     cca:	3e 8d       	ldd	r19, Y+30	; 0x1e
     ccc:	89 a1       	ldd	r24, Y+33	; 0x21
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:306
  datastruct.dig_P5 = (int16_t)data[7];
     cce:	9a a1       	ldd	r25, Y+34	; 0x22
     cd0:	ad a0       	ldd	r10, Y+37	; 0x25
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:307
  datastruct.dig_P6 = (int16_t)data[8];
     cd2:	be a0       	ldd	r11, Y+38	; 0x26
     cd4:	89 a4       	ldd	r8, Y+41	; 0x29
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:308
  datastruct.dig_P7 = (int16_t)data[9];
     cd6:	9a a4       	ldd	r9, Y+42	; 0x2a
     cd8:	6d a4       	ldd	r6, Y+45	; 0x2d
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:309
  datastruct.dig_P8 = (int16_t)data[10];
     cda:	7e a4       	ldd	r7, Y+46	; 0x2e
setup():
     cdc:	c0 92 04 38 	sts	0x3804, r12	; 0x803804 <calibrationData>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:310
  datastruct.dig_P9 = (int16_t)data[11];
     ce0:	d0 92 05 38 	sts	0x3805, r13	; 0x803805 <calibrationData+0x1>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:85
  // writeRegister(0x01, 0x03);
  // writeRegister(0x03, 0x02);
  // give the sensor time to set up:
  BMP280_CONFIG();
  delay(100);
  calibrationData = calibration();
     ce4:	e0 92 06 38 	sts	0x3806, r14	; 0x803806 <calibrationData+0x2>
     ce8:	f0 92 07 38 	sts	0x3807, r15	; 0x803807 <calibrationData+0x3>
     cec:	00 93 08 38 	sts	0x3808, r16	; 0x803808 <calibrationData+0x4>
     cf0:	10 93 09 38 	sts	0x3809, r17	; 0x803809 <calibrationData+0x5>
     cf4:	a0 93 0a 38 	sts	0x380A, r26	; 0x80380a <calibrationData+0x6>
     cf8:	b0 93 0b 38 	sts	0x380B, r27	; 0x80380b <calibrationData+0x7>
     cfc:	e0 93 0c 38 	sts	0x380C, r30	; 0x80380c <calibrationData+0x8>
     d00:	f0 93 0d 38 	sts	0x380D, r31	; 0x80380d <calibrationData+0x9>
     d04:	60 93 0e 38 	sts	0x380E, r22	; 0x80380e <calibrationData+0xa>
     d08:	70 93 0f 38 	sts	0x380F, r23	; 0x80380f <calibrationData+0xb>
     d0c:	40 93 10 38 	sts	0x3810, r20	; 0x803810 <calibrationData+0xc>
     d10:	50 93 11 38 	sts	0x3811, r21	; 0x803811 <calibrationData+0xd>
     d14:	20 93 12 38 	sts	0x3812, r18	; 0x803812 <calibrationData+0xe>
     d18:	30 93 13 38 	sts	0x3813, r19	; 0x803813 <calibrationData+0xf>
     d1c:	80 93 14 38 	sts	0x3814, r24	; 0x803814 <calibrationData+0x10>
     d20:	90 93 15 38 	sts	0x3815, r25	; 0x803815 <calibrationData+0x11>
     d24:	a0 92 16 38 	sts	0x3816, r10	; 0x803816 <calibrationData+0x12>
     d28:	b0 92 17 38 	sts	0x3817, r11	; 0x803817 <calibrationData+0x13>
     d2c:	80 92 18 38 	sts	0x3818, r8	; 0x803818 <calibrationData+0x14>
     d30:	90 92 19 38 	sts	0x3819, r9	; 0x803819 <calibrationData+0x15>
     d34:	60 92 1a 38 	sts	0x381A, r6	; 0x80381a <calibrationData+0x16>
     d38:	70 92 1b 38 	sts	0x381B, r7	; 0x80381b <calibrationData+0x17>
millis():
     d3c:	8f b7       	in	r24, 0x3f	; 63
     d3e:	f8 94       	cli
     d40:	80 90 00 38 	lds	r8, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:227

unsigned long millis() {
  // return timer_overflow_count; // for debugging timekeeping issues where these variables are out of scope from the sketch
  unsigned long m;
  uint8_t oldSREG = SREG;
  cli();
     d44:	90 90 01 38 	lds	r9, 0x3801	; 0x803801 <__DATA_REGION_ORIGIN__+0x1>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:255

     * Not only that - but a dedicated optimizing assembly programmer could probably ensure that instead of the >> 7 (a little mini loop)
     * that was implemented leftshifting it once, retaining the carried bit, and
     */
  #else
    m = timer_millis;
     d48:	a0 90 02 38 	lds	r10, 0x3802	; 0x803802 <__DATA_REGION_ORIGIN__+0x2>
     d4c:	b0 90 03 38 	lds	r11, 0x3803	; 0x803803 <__DATA_REGION_ORIGIN__+0x3>
     d50:	8f bf       	out	0x3f, r24	; 63
loop():
     d52:	94 01       	movw	r18, r8
     d54:	a5 01       	movw	r20, r10
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:256
    SREG = oldSREG;
     d56:	60 e0       	ldi	r22, 0x00	; 0
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:90
}
uint64_t t = 0;
void loop()
{
  if (millis() - t > 5000)
     d58:	70 e0       	ldi	r23, 0x00	; 0
     d5a:	80 e0       	ldi	r24, 0x00	; 0
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	a0 90 1c 38 	lds	r10, 0x381C	; 0x80381c <t>
     d62:	b0 90 1d 38 	lds	r11, 0x381D	; 0x80381d <t+0x1>
     d66:	c0 90 1e 38 	lds	r12, 0x381E	; 0x80381e <t+0x2>
     d6a:	d0 90 1f 38 	lds	r13, 0x381F	; 0x80381f <t+0x3>
     d6e:	e0 90 20 38 	lds	r14, 0x3820	; 0x803820 <t+0x4>
     d72:	f0 90 21 38 	lds	r15, 0x3821	; 0x803821 <t+0x5>
     d76:	00 91 22 38 	lds	r16, 0x3822	; 0x803822 <t+0x6>
     d7a:	10 91 23 38 	lds	r17, 0x3823	; 0x803823 <t+0x7>
     d7e:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <__subdi3>
     d82:	28 38       	cpi	r18, 0x88	; 136
     d84:	33 41       	sbci	r19, 0x13	; 19
     d86:	41 05       	cpc	r20, r1
     d88:	51 05       	cpc	r21, r1
     d8a:	61 05       	cpc	r22, r1
     d8c:	71 05       	cpc	r23, r1
     d8e:	81 05       	cpc	r24, r1
     d90:	91 05       	cpc	r25, r1
     d92:	09 f0       	breq	.+2      	; 0xd96 <main+0x2c0>
     d94:	08 f4       	brcc	.+2      	; 0xd98 <main+0x2c2>
     d96:	f2 c2       	rjmp	.+1508   	; 0x137c <main+0x8a6>
     d98:	ae 01       	movw	r20, r28
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:94
  {
    uint8_t values[6];
    int32_t t_fine = 0;
    ReadRegisterToUintArray(PREASSURE_REGISTER, 6, CS_BMP, values);
     d9a:	4f 5f       	subi	r20, 0xFF	; 255
     d9c:	5f 4f       	sbci	r21, 0xFF	; 255
     d9e:	66 e0       	ldi	r22, 0x06	; 6
     da0:	87 ef       	ldi	r24, 0xF7	; 247
     da2:	a8 dc       	rcall	.-1712   	; 0x6f4 <ReadRegisterToUintArray(unsigned char, unsigned char, unsigned char, unsigned char*) [clone .constprop.17]>
     da4:	88 e1       	ldi	r24, 0x18	; 24
     da6:	9f e9       	ldi	r25, 0x9F	; 159
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:95
    Serial.print("Temperature:\t");
     da8:	a4 dc       	rcall	.-1720   	; 0x6f2 <Print::print(char const*) [clone .constprop.20]>
ReadTemperature():
     daa:	2c 81       	ldd	r18, Y+4	; 0x04
     dac:	4d 81       	ldd	r20, Y+5	; 0x05
     dae:	8e 81       	ldd	r24, Y+6	; 0x06
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:351

//---------Calculationg Temperature and preassure------------------------

float ReadTemperature(volatile uint8_t *values, int32_t *t_fine, struct BMP280_HandleTypedef _bmp280_calib)
{
  int32_t adc_T = values[3];
     db0:	90 e0       	ldi	r25, 0x00	; 0
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:353
  adc_T <<= 16;
  adc_T |= ((values[4]) << 8);
     db2:	b0 e0       	ldi	r27, 0x00	; 0
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:354
  adc_T |= ((values[5]));
     db4:	a2 2f       	mov	r26, r18
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:352
//---------Calculationg Temperature and preassure------------------------

float ReadTemperature(volatile uint8_t *values, int32_t *t_fine, struct BMP280_HandleTypedef _bmp280_calib)
{
  int32_t adc_T = values[3];
  adc_T <<= 16;
     db6:	50 e0       	ldi	r21, 0x00	; 0
     db8:	54 2f       	mov	r21, r20
     dba:	44 27       	eor	r20, r20
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:353
  adc_T |= ((values[4]) << 8);
     dbc:	05 2e       	mov	r0, r21
     dbe:	00 0c       	add	r0, r0
     dc0:	66 0b       	sbc	r22, r22
     dc2:	77 0b       	sbc	r23, r23
     dc4:	84 2b       	or	r24, r20
     dc6:	95 2b       	or	r25, r21
     dc8:	a6 2b       	or	r26, r22
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:354
  adc_T |= ((values[5]));
     dca:	b7 2b       	or	r27, r23
     dcc:	40 91 04 38 	lds	r20, 0x3804	; 0x803804 <calibrationData>
     dd0:	50 91 05 38 	lds	r21, 0x3805	; 0x803805 <calibrationData+0x1>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:358
  adc_T >>= 4;

  int32_t var1, var2;
  var1 = ((((adc_T >> 3) - ((int32_t)_bmp280_calib.dig_T1 << 1))) *
     dd4:	70 e0       	ldi	r23, 0x00	; 0
     dd6:	60 e0       	ldi	r22, 0x00	; 0
     dd8:	c9 2e       	mov	r12, r25
     dda:	da 2e       	mov	r13, r26
     ddc:	eb 2e       	mov	r14, r27
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:362
          ((int32_t)_bmp280_calib.dig_T2)) >>
         11;

  var2 = (((((adc_T >> 4) - ((int32_t)_bmp280_calib.dig_T1)) *
     dde:	ff 24       	eor	r15, r15
     de0:	e7 fc       	sbrc	r14, 7
     de2:	fa 94       	dec	r15
     de4:	c4 1a       	sub	r12, r20
     de6:	d5 0a       	sbc	r13, r21
     de8:	e6 0a       	sbc	r14, r22
     dea:	f7 0a       	sbc	r15, r23
     dec:	27 e0       	ldi	r18, 0x07	; 7
     dee:	b5 95       	asr	r27
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:358
  adc_T |= ((values[4]) << 8);
  adc_T |= ((values[5]));
  adc_T >>= 4;

  int32_t var1, var2;
  var1 = ((((adc_T >> 3) - ((int32_t)_bmp280_calib.dig_T1 << 1))) *
     df0:	a7 95       	ror	r26
     df2:	97 95       	ror	r25
     df4:	87 95       	ror	r24
     df6:	2a 95       	dec	r18
     df8:	d1 f7       	brne	.-12     	; 0xdee <main+0x318>
     dfa:	44 0f       	add	r20, r20
     dfc:	55 1f       	adc	r21, r21
     dfe:	66 1f       	adc	r22, r22
     e00:	77 1f       	adc	r23, r23
     e02:	4c 01       	movw	r8, r24
     e04:	5d 01       	movw	r10, r26
     e06:	84 1a       	sub	r8, r20
     e08:	95 0a       	sbc	r9, r21
     e0a:	a6 0a       	sbc	r10, r22
     e0c:	b7 0a       	sbc	r11, r23
     e0e:	a5 01       	movw	r20, r10
     e10:	94 01       	movw	r18, r8
     e12:	a0 91 06 38 	lds	r26, 0x3806	; 0x803806 <calibrationData+0x2>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:359
          ((int32_t)_bmp280_calib.dig_T2)) >>
     e16:	b0 91 07 38 	lds	r27, 0x3807	; 0x803807 <calibrationData+0x3>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:358
  adc_T |= ((values[4]) << 8);
  adc_T |= ((values[5]));
  adc_T >>= 4;

  int32_t var1, var2;
  var1 = ((((adc_T >> 3) - ((int32_t)_bmp280_calib.dig_T1 << 1))) *
     e1a:	e7 d6       	rcall	.+3534   	; 0x1bea <__mulshisi3>
     e1c:	4b 01       	movw	r8, r22
     e1e:	5c 01       	movw	r10, r24
     e20:	4b e0       	ldi	r20, 0x0B	; 11
     e22:	b5 94       	asr	r11
     e24:	a7 94       	ror	r10
     e26:	97 94       	ror	r9
     e28:	87 94       	ror	r8
     e2a:	4a 95       	dec	r20
     e2c:	d1 f7       	brne	.-12     	; 0xe22 <main+0x34c>
     e2e:	a7 01       	movw	r20, r14
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:362
          ((int32_t)_bmp280_calib.dig_T2)) >>
         11;

  var2 = (((((adc_T >> 4) - ((int32_t)_bmp280_calib.dig_T1)) *
     e30:	96 01       	movw	r18, r12
     e32:	c7 01       	movw	r24, r14
     e34:	b6 01       	movw	r22, r12
     e36:	9e d6       	rcall	.+3388   	; 0x1b74 <__mulsi3>
     e38:	9b 01       	movw	r18, r22
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:363
            ((adc_T >> 4) - ((int32_t)_bmp280_calib.dig_T1))) >>
     e3a:	ac 01       	movw	r20, r24
     e3c:	6c e0       	ldi	r22, 0x0C	; 12
     e3e:	55 95       	asr	r21
     e40:	47 95       	ror	r20
     e42:	37 95       	ror	r19
     e44:	27 95       	ror	r18
     e46:	6a 95       	dec	r22
     e48:	d1 f7       	brne	.-12     	; 0xe3e <main+0x368>
     e4a:	a0 91 08 38 	lds	r26, 0x3808	; 0x803808 <calibrationData+0x4>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:365
           12) *
          ((int32_t)_bmp280_calib.dig_T3)) >>
     e4e:	b0 91 09 38 	lds	r27, 0x3809	; 0x803809 <calibrationData+0x5>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:364
          ((int32_t)_bmp280_calib.dig_T2)) >>
         11;

  var2 = (((((adc_T >> 4) - ((int32_t)_bmp280_calib.dig_T1)) *
            ((adc_T >> 4) - ((int32_t)_bmp280_calib.dig_T1))) >>
           12) *
     e52:	cb d6       	rcall	.+3478   	; 0x1bea <__mulshisi3>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:362
  int32_t var1, var2;
  var1 = ((((adc_T >> 3) - ((int32_t)_bmp280_calib.dig_T1 << 1))) *
          ((int32_t)_bmp280_calib.dig_T2)) >>
         11;

  var2 = (((((adc_T >> 4) - ((int32_t)_bmp280_calib.dig_T1)) *
     e54:	6b 01       	movw	r12, r22
     e56:	7c 01       	movw	r14, r24
     e58:	7e e0       	ldi	r23, 0x0E	; 14
     e5a:	f5 94       	asr	r15
     e5c:	e7 94       	ror	r14
     e5e:	d7 94       	ror	r13
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:367
            ((adc_T >> 4) - ((int32_t)_bmp280_calib.dig_T1))) >>
           12) *
          ((int32_t)_bmp280_calib.dig_T3)) >>
         14;
  int32_t sum = var1 + var2;
     e60:	c7 94       	ror	r12
     e62:	7a 95       	dec	r23
     e64:	d1 f7       	brne	.-12     	; 0xe5a <main+0x384>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:369
  *t_fine = sum;
  int32_t T = (sum * 5 + 128) >> 8;
     e66:	c8 0c       	add	r12, r8
     e68:	d9 1c       	adc	r13, r9
     e6a:	ea 1c       	adc	r14, r10
     e6c:	fb 1c       	adc	r15, r11
     e6e:	a5 e0       	ldi	r26, 0x05	; 5
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	a7 01       	movw	r20, r14
     e74:	96 01       	movw	r18, r12
     e76:	af d6       	rcall	.+3422   	; 0x1bd6 <__muluhisi3>
     e78:	60 58       	subi	r22, 0x80	; 128
     e7a:	7f 4f       	sbci	r23, 0xFF	; 255
     e7c:	8f 4f       	sbci	r24, 0xFF	; 255
     e7e:	9f 4f       	sbci	r25, 0xFF	; 255
     e80:	67 2f       	mov	r22, r23
     e82:	78 2f       	mov	r23, r24
     e84:	89 2f       	mov	r24, r25
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:370
  return (float)T / 100;
     e86:	99 27       	eor	r25, r25
     e88:	87 fd       	sbrc	r24, 7
     e8a:	9a 95       	dec	r25
     e8c:	f3 d3       	rcall	.+2022   	; 0x1674 <__floatsisf>
     e8e:	20 e0       	ldi	r18, 0x00	; 0
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	48 ec       	ldi	r20, 0xC8	; 200
     e94:	52 e4       	ldi	r21, 0x42	; 66
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:96
  {
    uint8_t values[6];
    int32_t t_fine = 0;
    ReadRegisterToUintArray(PREASSURE_REGISTER, 6, CS_BMP, values);
    Serial.print("Temperature:\t");
    Serial.println(ReadTemperature(values, &t_fine, calibrationData));
     e96:	58 d3       	rcall	.+1712   	; 0x1548 <__divsf3>
loop():
     e98:	87 dc       	rcall	.-1778   	; 0x7a8 <Print::println(double, int) [clone .constprop.2]>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:97
    Serial.print("t_fie:\t");
     e9a:	86 e2       	ldi	r24, 0x26	; 38
     e9c:	9f e9       	ldi	r25, 0x9F	; 159
     e9e:	29 dc       	rcall	.-1966   	; 0x6f2 <Print::print(char const*) [clone .constprop.20]>
println():
     ea0:	c7 01       	movw	r24, r14
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:164
     ea2:	b6 01       	movw	r22, r12
     ea4:	58 dc       	rcall	.-1872   	; 0x756 <Print::print(long, int) [clone .constprop.13]>
write():
     ea6:	84 ee       	ldi	r24, 0xE4	; 228
     ea8:	9e e9       	ldi	r25, 0x9E	; 158
     eaa:	c9 db       	rcall	.-2158   	; 0x63e <Print::write(char const*) [clone .part.2] [clone .constprop.28]>
     eac:	90 90 10 38 	lds	r9, 0x3810	; 0x803810 <calibrationData+0xc>
     eb0:	63 96       	adiw	r28, 0x13	; 19
     eb2:	9f ae       	std	Y+63, r9	; 0x3f
     eb4:	63 97       	sbiw	r28, 0x13	; 19
     eb6:	80 90 11 38 	lds	r8, 0x3811	; 0x803811 <calibrationData+0xd>
     eba:	21 96       	adiw	r28, 0x01	; 1
     ebc:	8f ae       	std	Y+63, r8	; 0x3f
     ebe:	21 97       	sbiw	r28, 0x01	; 1
     ec0:	90 90 12 38 	lds	r9, 0x3812	; 0x803812 <calibrationData+0xe>
     ec4:	66 96       	adiw	r28, 0x16	; 22
     ec6:	9f ae       	std	Y+63, r9	; 0x3f
     ec8:	66 97       	sbiw	r28, 0x16	; 22
     eca:	80 90 13 38 	lds	r8, 0x3813	; 0x803813 <calibrationData+0xf>
     ece:	29 96       	adiw	r28, 0x09	; 9
     ed0:	8f ae       	std	Y+63, r8	; 0x3f
     ed2:	29 97       	sbiw	r28, 0x09	; 9
     ed4:	90 90 14 38 	lds	r9, 0x3814	; 0x803814 <calibrationData+0x10>
     ed8:	67 96       	adiw	r28, 0x17	; 23
     eda:	9f ae       	std	Y+63, r9	; 0x3f
     edc:	67 97       	sbiw	r28, 0x17	; 23
     ede:	80 90 15 38 	lds	r8, 0x3815	; 0x803815 <calibrationData+0x11>
     ee2:	89 ae       	std	Y+57, r8	; 0x39
     ee4:	90 90 16 38 	lds	r9, 0x3816	; 0x803816 <calibrationData+0x12>
     ee8:	65 96       	adiw	r28, 0x15	; 21
     eea:	9f ae       	std	Y+63, r9	; 0x3f
     eec:	65 97       	sbiw	r28, 0x15	; 21
     eee:	80 90 17 38 	lds	r8, 0x3817	; 0x803817 <calibrationData+0x13>
     ef2:	28 96       	adiw	r28, 0x08	; 8
     ef4:	8f ae       	std	Y+63, r8	; 0x3f
     ef6:	28 97       	sbiw	r28, 0x08	; 8
     ef8:	90 90 18 38 	lds	r9, 0x3818	; 0x803818 <calibrationData+0x14>
     efc:	68 96       	adiw	r28, 0x18	; 24
     efe:	9f ae       	std	Y+63, r9	; 0x3f
     f00:	68 97       	sbiw	r28, 0x18	; 24
     f02:	80 90 19 38 	lds	r8, 0x3819	; 0x803819 <calibrationData+0x15>
     f06:	2a 96       	adiw	r28, 0x0a	; 10
     f08:	8f ae       	std	Y+63, r8	; 0x3f
     f0a:	2a 97       	sbiw	r28, 0x0a	; 10
     f0c:	90 90 1a 38 	lds	r9, 0x381A	; 0x80381a <calibrationData+0x16>
     f10:	64 96       	adiw	r28, 0x14	; 20
     f12:	9f ae       	std	Y+63, r9	; 0x3f
     f14:	64 97       	sbiw	r28, 0x14	; 20
     f16:	80 90 1b 38 	lds	r8, 0x381B	; 0x80381b <calibrationData+0x17>
     f1a:	22 96       	adiw	r28, 0x02	; 2
     f1c:	8f ae       	std	Y+63, r8	; 0x3f
     f1e:	22 97       	sbiw	r28, 0x02	; 2
ReadPreassure():
     f20:	99 80       	ldd	r9, Y+1	; 0x01
     f22:	9c ae       	std	Y+60, r9	; 0x3c
     f24:	8a 80       	ldd	r8, Y+2	; 0x02
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:377

float ReadPreassure(volatile uint8_t values[6], int32_t t_fine, BMP280_HandleTypedef _bmp280_calib)
{
  int64_t p, var1, var2;
  // pressure
  int32_t adc_P = values[0];
     f26:	61 96       	adiw	r28, 0x11	; 17
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:379
  adc_P <<= 16;
  adc_P |= (values[1] << 8);
     f28:	8f ae       	std	Y+63, r8	; 0x3f
     f2a:	61 97       	sbiw	r28, 0x11	; 17
     f2c:	9b 80       	ldd	r9, Y+3	; 0x03
     f2e:	62 96       	adiw	r28, 0x12	; 18
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:380
  adc_P |= values[2];
     f30:	9f ae       	std	Y+63, r9	; 0x3f
     f32:	62 97       	sbiw	r28, 0x12	; 18
     f34:	46 01       	movw	r8, r12
     f36:	57 01       	movw	r10, r14
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:383
  adc_P >>= 4;

  var1 = ((int64_t)t_fine) - 128000;
     f38:	bb 0c       	add	r11, r11
     f3a:	88 08       	sbc	r8, r8
     f3c:	98 2c       	mov	r9, r8
     f3e:	54 01       	movw	r10, r8
     f40:	96 01       	movw	r18, r12
     f42:	a7 01       	movw	r20, r14
     f44:	68 2d       	mov	r22, r8
     f46:	78 2d       	mov	r23, r8
     f48:	88 2d       	mov	r24, r8
     f4a:	98 2d       	mov	r25, r8
     f4c:	34 5f       	subi	r19, 0xF4	; 244
     f4e:	41 40       	sbci	r20, 0x01	; 1
     f50:	51 09       	sbc	r21, r1
     f52:	61 09       	sbc	r22, r1
     f54:	71 09       	sbc	r23, r1
     f56:	81 09       	sbc	r24, r1
     f58:	91 09       	sbc	r25, r1
     f5a:	29 ab       	std	Y+49, r18	; 0x31
     f5c:	3a ab       	std	Y+50, r19	; 0x32
     f5e:	4b ab       	std	Y+51, r20	; 0x33
     f60:	5c ab       	std	Y+52, r21	; 0x34
     f62:	6d ab       	std	Y+53, r22	; 0x35
     f64:	7e ab       	std	Y+54, r23	; 0x36
     f66:	8f ab       	std	Y+55, r24	; 0x37
     f68:	98 af       	std	Y+56, r25	; 0x38
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:384
  var2 = var1 * var1 * (int64_t)_bmp280_calib.dig_P6;
     f6a:	59 01       	movw	r10, r18
     f6c:	6a 01       	movw	r12, r20
     f6e:	7b 01       	movw	r14, r22
     f70:	8c 01       	movw	r16, r24
     f72:	41 d6       	rcall	.+3202   	; 0x1bf6 <__muldi3>
     f74:	2a af       	std	Y+58, r18	; 0x3a
     f76:	3b af       	std	Y+59, r19	; 0x3b
     f78:	2b 96       	adiw	r28, 0x0b	; 11
     f7a:	4f af       	std	Y+63, r20	; 0x3f
     f7c:	2b 97       	sbiw	r28, 0x0b	; 11
     f7e:	2c 96       	adiw	r28, 0x0c	; 12
     f80:	5f af       	std	Y+63, r21	; 0x3f
     f82:	2c 97       	sbiw	r28, 0x0c	; 12
     f84:	2d 96       	adiw	r28, 0x0d	; 13
     f86:	6f af       	std	Y+63, r22	; 0x3f
     f88:	2d 97       	sbiw	r28, 0x0d	; 13
     f8a:	2e 96       	adiw	r28, 0x0e	; 14
     f8c:	7f af       	std	Y+63, r23	; 0x3f
     f8e:	2e 97       	sbiw	r28, 0x0e	; 14
     f90:	2f 96       	adiw	r28, 0x0f	; 15
     f92:	8f af       	std	Y+63, r24	; 0x3f
     f94:	2f 97       	sbiw	r28, 0x0f	; 15
     f96:	60 96       	adiw	r28, 0x10	; 16
     f98:	9f af       	std	Y+63, r25	; 0x3f
     f9a:	60 97       	sbiw	r28, 0x10	; 16
     f9c:	30 91 0d 38 	lds	r19, 0x380D	; 0x80380d <calibrationData+0x9>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:388
  var2 = var2 + ((var1 * (int64_t)_bmp280_calib.dig_P5) << 17);
  var2 = var2 + (((int64_t)_bmp280_calib.dig_P4) << 35);
  var1 = ((var1 * var1 * (int64_t)_bmp280_calib.dig_P3) >> 8) +
         ((var1 * (int64_t)_bmp280_calib.dig_P2) << 12);
     fa0:	20 91 0c 38 	lds	r18, 0x380C	; 0x80380c <calibrationData+0x8>
     fa4:	93 2f       	mov	r25, r19
     fa6:	99 0f       	add	r25, r25
     fa8:	99 0b       	sbc	r25, r25
     faa:	49 2f       	mov	r20, r25
     fac:	59 2f       	mov	r21, r25
     fae:	69 2f       	mov	r22, r25
     fb0:	79 2f       	mov	r23, r25
     fb2:	89 2f       	mov	r24, r25
     fb4:	20 d6       	rcall	.+3136   	; 0x1bf6 <__muldi3>
     fb6:	0c e0       	ldi	r16, 0x0C	; 12
     fb8:	07 d7       	rcall	.+3598   	; 0x1dc8 <__ashldi3>
     fba:	19 01       	movw	r2, r18
     fbc:	2a 01       	movw	r4, r20
     fbe:	3b 01       	movw	r6, r22
     fc0:	4c 01       	movw	r8, r24
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:387

  var1 = ((int64_t)t_fine) - 128000;
  var2 = var1 * var1 * (int64_t)_bmp280_calib.dig_P6;
  var2 = var2 + ((var1 * (int64_t)_bmp280_calib.dig_P5) << 17);
  var2 = var2 + (((int64_t)_bmp280_calib.dig_P4) << 35);
  var1 = ((var1 * var1 * (int64_t)_bmp280_calib.dig_P3) >> 8) +
     fc2:	30 91 0f 38 	lds	r19, 0x380F	; 0x80380f <calibrationData+0xb>
     fc6:	20 91 0e 38 	lds	r18, 0x380E	; 0x80380e <calibrationData+0xa>
     fca:	93 2f       	mov	r25, r19
     fcc:	99 0f       	add	r25, r25
     fce:	99 0b       	sbc	r25, r25
     fd0:	aa ac       	ldd	r10, Y+58	; 0x3a
     fd2:	bb ac       	ldd	r11, Y+59	; 0x3b
     fd4:	2b 96       	adiw	r28, 0x0b	; 11
     fd6:	cf ac       	ldd	r12, Y+63	; 0x3f
     fd8:	2b 97       	sbiw	r28, 0x0b	; 11
     fda:	2c 96       	adiw	r28, 0x0c	; 12
     fdc:	df ac       	ldd	r13, Y+63	; 0x3f
     fde:	2c 97       	sbiw	r28, 0x0c	; 12
     fe0:	2d 96       	adiw	r28, 0x0d	; 13
     fe2:	ef ac       	ldd	r14, Y+63	; 0x3f
     fe4:	2d 97       	sbiw	r28, 0x0d	; 13
     fe6:	2e 96       	adiw	r28, 0x0e	; 14
     fe8:	ff ac       	ldd	r15, Y+63	; 0x3f
     fea:	2e 97       	sbiw	r28, 0x0e	; 14
     fec:	2f 96       	adiw	r28, 0x0f	; 15
     fee:	0f ad       	ldd	r16, Y+63	; 0x3f
     ff0:	2f 97       	sbiw	r28, 0x0f	; 15
     ff2:	60 96       	adiw	r28, 0x10	; 16
     ff4:	1f ad       	ldd	r17, Y+63	; 0x3f
     ff6:	60 97       	sbiw	r28, 0x10	; 16
     ff8:	49 2f       	mov	r20, r25
     ffa:	59 2f       	mov	r21, r25
     ffc:	69 2f       	mov	r22, r25
     ffe:	79 2f       	mov	r23, r25
    1000:	89 2f       	mov	r24, r25
    1002:	f9 d5       	rcall	.+3058   	; 0x1bf6 <__muldi3>
    1004:	08 e0       	ldi	r16, 0x08	; 8
    1006:	f9 d6       	rcall	.+3570   	; 0x1dfa <__ashrdi3>
    1008:	51 01       	movw	r10, r2
    100a:	62 01       	movw	r12, r4
    100c:	73 01       	movw	r14, r6
    100e:	84 01       	movw	r16, r8
    1010:	11 d7       	rcall	.+3618   	; 0x1e34 <__adddi3>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:390
         ((var1 * (int64_t)_bmp280_calib.dig_P2) << 12);
  var1 =
      (((((int64_t)1) << 47) + var1)) * ((int64_t)_bmp280_calib.dig_P1) >> 33;
    1012:	70 58       	subi	r23, 0x80	; 128
    1014:	8f 4f       	sbci	r24, 0xFF	; 255
    1016:	9f 4f       	sbci	r25, 0xFF	; 255
    1018:	20 90 0a 38 	lds	r2, 0x380A	; 0x80380a <calibrationData+0x6>
    101c:	30 90 0b 38 	lds	r3, 0x380B	; 0x80380b <calibrationData+0x7>
    1020:	51 01       	movw	r10, r2
    1022:	c1 2c       	mov	r12, r1
    1024:	d1 2c       	mov	r13, r1
    1026:	e1 2c       	mov	r14, r1
    1028:	f1 2c       	mov	r15, r1
    102a:	00 e0       	ldi	r16, 0x00	; 0
    102c:	10 e0       	ldi	r17, 0x00	; 0
    102e:	e3 d5       	rcall	.+3014   	; 0x1bf6 <__muldi3>
    1030:	01 e2       	ldi	r16, 0x21	; 33
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:389
  var2 = var1 * var1 * (int64_t)_bmp280_calib.dig_P6;
  var2 = var2 + ((var1 * (int64_t)_bmp280_calib.dig_P5) << 17);
  var2 = var2 + (((int64_t)_bmp280_calib.dig_P4) << 35);
  var1 = ((var1 * var1 * (int64_t)_bmp280_calib.dig_P3) >> 8) +
         ((var1 * (int64_t)_bmp280_calib.dig_P2) << 12);
  var1 =
    1032:	e3 d6       	rcall	.+3526   	; 0x1dfa <__ashrdi3>
    1034:	23 96       	adiw	r28, 0x03	; 3
    1036:	2f af       	std	Y+63, r18	; 0x3f
    1038:	23 97       	sbiw	r28, 0x03	; 3
    103a:	24 96       	adiw	r28, 0x04	; 4
    103c:	3f af       	std	Y+63, r19	; 0x3f
    103e:	24 97       	sbiw	r28, 0x04	; 4
    1040:	25 96       	adiw	r28, 0x05	; 5
    1042:	4f af       	std	Y+63, r20	; 0x3f
    1044:	25 97       	sbiw	r28, 0x05	; 5
    1046:	26 96       	adiw	r28, 0x06	; 6
    1048:	5f af       	std	Y+63, r21	; 0x3f
    104a:	26 97       	sbiw	r28, 0x06	; 6
    104c:	27 96       	adiw	r28, 0x07	; 7
    104e:	6f af       	std	Y+63, r22	; 0x3f
    1050:	27 97       	sbiw	r28, 0x07	; 7
    1052:	27 2e       	mov	r2, r23
    1054:	38 2e       	mov	r3, r24
    1056:	49 2e       	mov	r4, r25
    1058:	a0 e0       	ldi	r26, 0x00	; 0
main():
    105a:	c1 2c       	mov	r12, r1
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:392
      (((((int64_t)1) << 47) + var1)) * ((int64_t)_bmp280_calib.dig_P1) >> 33;

  if (var1 == 0)
    105c:	d1 2c       	mov	r13, r1
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:394
  {
    return 0; // avoid exception caused by division by zero
    105e:	76 01       	movw	r14, r12
ReadPreassure():
    1060:	fb d6       	rcall	.+3574   	; 0x1e58 <__cmpdi2_s8>
    1062:	09 f4       	brne	.+2      	; 0x1066 <main+0x590>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:392
  var1 = ((var1 * var1 * (int64_t)_bmp280_calib.dig_P3) >> 8) +
         ((var1 * (int64_t)_bmp280_calib.dig_P2) << 12);
  var1 =
      (((((int64_t)1) << 47) + var1)) * ((int64_t)_bmp280_calib.dig_P1) >> 33;

  if (var1 == 0)
    1064:	49 c1       	rjmp	.+658    	; 0x12f8 <main+0x822>
    1066:	62 96       	adiw	r28, 0x12	; 18
    1068:	8f ac       	ldd	r8, Y+63	; 0x3f
    106a:	62 97       	sbiw	r28, 0x12	; 18
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:378
float ReadPreassure(volatile uint8_t values[6], int32_t t_fine, BMP280_HandleTypedef _bmp280_calib)
{
  int64_t p, var1, var2;
  // pressure
  int32_t adc_P = values[0];
  adc_P <<= 16;
    106c:	48 2d       	mov	r20, r8
    106e:	50 e0       	ldi	r21, 0x00	; 0
    1070:	70 e0       	ldi	r23, 0x00	; 0
    1072:	60 e0       	ldi	r22, 0x00	; 0
    1074:	9c ac       	ldd	r9, Y+60	; 0x3c
    1076:	69 29       	or	r22, r9
    1078:	61 96       	adiw	r28, 0x11	; 17
    107a:	8f ac       	ldd	r8, Y+63	; 0x3f
    107c:	61 97       	sbiw	r28, 0x11	; 17
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:379
  adc_P |= (values[1] << 8);
    107e:	88 2d       	mov	r24, r8
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	98 2f       	mov	r25, r24
    1084:	88 27       	eor	r24, r24
    1086:	09 2e       	mov	r0, r25
    1088:	00 0c       	add	r0, r0
    108a:	aa 0b       	sbc	r26, r26
    108c:	bb 0b       	sbc	r27, r27
    108e:	4c 01       	movw	r8, r24
    1090:	5d 01       	movw	r10, r26
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:380
  adc_P |= values[2];
    1092:	84 2a       	or	r8, r20
    1094:	95 2a       	or	r9, r21
    1096:	a6 2a       	or	r10, r22
    1098:	b7 2a       	or	r11, r23
    109a:	8c ae       	std	Y+60, r8	; 0x3c
    109c:	9d ae       	std	Y+61, r9	; 0x3d
    109e:	ae ae       	std	Y+62, r10	; 0x3e
    10a0:	bf ae       	std	Y+63, r11	; 0x3f
    10a2:	67 96       	adiw	r28, 0x17	; 23
    10a4:	2f ad       	ldd	r18, Y+63	; 0x3f
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:384
  adc_P >>= 4;

  var1 = ((int64_t)t_fine) - 128000;
  var2 = var1 * var1 * (int64_t)_bmp280_calib.dig_P6;
    10a6:	67 97       	sbiw	r28, 0x17	; 23
    10a8:	99 ad       	ldd	r25, Y+57	; 0x39
    10aa:	99 0f       	add	r25, r25
    10ac:	99 0b       	sbc	r25, r25
    10ae:	aa ac       	ldd	r10, Y+58	; 0x3a
    10b0:	bb ac       	ldd	r11, Y+59	; 0x3b
    10b2:	2b 96       	adiw	r28, 0x0b	; 11
    10b4:	cf ac       	ldd	r12, Y+63	; 0x3f
    10b6:	2b 97       	sbiw	r28, 0x0b	; 11
    10b8:	2c 96       	adiw	r28, 0x0c	; 12
    10ba:	df ac       	ldd	r13, Y+63	; 0x3f
    10bc:	2c 97       	sbiw	r28, 0x0c	; 12
    10be:	2d 96       	adiw	r28, 0x0d	; 13
    10c0:	ef ac       	ldd	r14, Y+63	; 0x3f
    10c2:	2d 97       	sbiw	r28, 0x0d	; 13
    10c4:	2e 96       	adiw	r28, 0x0e	; 14
    10c6:	ff ac       	ldd	r15, Y+63	; 0x3f
    10c8:	2e 97       	sbiw	r28, 0x0e	; 14
    10ca:	2f 96       	adiw	r28, 0x0f	; 15
    10cc:	0f ad       	ldd	r16, Y+63	; 0x3f
    10ce:	2f 97       	sbiw	r28, 0x0f	; 15
    10d0:	60 96       	adiw	r28, 0x10	; 16
    10d2:	1f ad       	ldd	r17, Y+63	; 0x3f
    10d4:	60 97       	sbiw	r28, 0x10	; 16
    10d6:	39 ad       	ldd	r19, Y+57	; 0x39
    10d8:	49 2f       	mov	r20, r25
    10da:	59 2f       	mov	r21, r25
    10dc:	69 2f       	mov	r22, r25
    10de:	79 2f       	mov	r23, r25
    10e0:	89 2f       	mov	r24, r25
    10e2:	89 d5       	rcall	.+2834   	; 0x1bf6 <__muldi3>
    10e4:	29 af       	std	Y+57, r18	; 0x39
    10e6:	3a af       	std	Y+58, r19	; 0x3a
    10e8:	4b af       	std	Y+59, r20	; 0x3b
    10ea:	55 2e       	mov	r5, r21
    10ec:	3b 01       	movw	r6, r22
    10ee:	4c 01       	movw	r8, r24
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:385
  var2 = var2 + ((var1 * (int64_t)_bmp280_calib.dig_P5) << 17);
    10f0:	66 96       	adiw	r28, 0x16	; 22
    10f2:	2f ad       	ldd	r18, Y+63	; 0x3f
    10f4:	66 97       	sbiw	r28, 0x16	; 22
    10f6:	29 96       	adiw	r28, 0x09	; 9
    10f8:	9f ad       	ldd	r25, Y+63	; 0x3f
    10fa:	29 97       	sbiw	r28, 0x09	; 9
    10fc:	99 0f       	add	r25, r25
    10fe:	99 0b       	sbc	r25, r25
    1100:	a9 a8       	ldd	r10, Y+49	; 0x31
    1102:	ba a8       	ldd	r11, Y+50	; 0x32
    1104:	cb a8       	ldd	r12, Y+51	; 0x33
    1106:	dc a8       	ldd	r13, Y+52	; 0x34
    1108:	ed a8       	ldd	r14, Y+53	; 0x35
    110a:	fe a8       	ldd	r15, Y+54	; 0x36
    110c:	0f a9       	ldd	r16, Y+55	; 0x37
    110e:	18 ad       	ldd	r17, Y+56	; 0x38
    1110:	29 96       	adiw	r28, 0x09	; 9
    1112:	3f ad       	ldd	r19, Y+63	; 0x3f
    1114:	29 97       	sbiw	r28, 0x09	; 9
    1116:	49 2f       	mov	r20, r25
    1118:	59 2f       	mov	r21, r25
    111a:	69 2f       	mov	r22, r25
    111c:	79 2f       	mov	r23, r25
    111e:	89 2f       	mov	r24, r25
    1120:	6a d5       	rcall	.+2772   	; 0x1bf6 <__muldi3>
    1122:	01 e1       	ldi	r16, 0x11	; 17
    1124:	51 d6       	rcall	.+3234   	; 0x1dc8 <__ashldi3>
    1126:	a9 ac       	ldd	r10, Y+57	; 0x39
    1128:	ba ac       	ldd	r11, Y+58	; 0x3a
    112a:	cb ac       	ldd	r12, Y+59	; 0x3b
    112c:	d5 2c       	mov	r13, r5
    112e:	73 01       	movw	r14, r6
    1130:	84 01       	movw	r16, r8
    1132:	80 d6       	rcall	.+3328   	; 0x1e34 <__adddi3>
    1134:	59 01       	movw	r10, r18
    1136:	6a 01       	movw	r12, r20
    1138:	7b 01       	movw	r14, r22
    113a:	18 2f       	mov	r17, r24
    113c:	59 2e       	mov	r5, r25
    113e:	8c ad       	ldd	r24, Y+60	; 0x3c
    1140:	9d ad       	ldd	r25, Y+61	; 0x3d
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:381
  // pressure
  int32_t adc_P = values[0];
  adc_P <<= 16;
  adc_P |= (values[1] << 8);
  adc_P |= values[2];
  adc_P >>= 4;
    1142:	ae ad       	ldd	r26, Y+62	; 0x3e
    1144:	bf ad       	ldd	r27, Y+63	; 0x3f
    1146:	34 e0       	ldi	r19, 0x04	; 4
    1148:	b5 95       	asr	r27
    114a:	a7 95       	ror	r26
    114c:	97 95       	ror	r25
    114e:	87 95       	ror	r24
    1150:	3a 95       	dec	r19
    1152:	d1 f7       	brne	.-12     	; 0x1148 <main+0x672>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:396

  if (var1 == 0)
  {
    return 0; // avoid exception caused by division by zero
  }
  p = 1048576 - adc_P;
    1154:	20 e0       	ldi	r18, 0x00	; 0
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	40 e1       	ldi	r20, 0x10	; 16
    115a:	50 e0       	ldi	r21, 0x00	; 0
    115c:	28 1b       	sub	r18, r24
    115e:	39 0b       	sbc	r19, r25
    1160:	4a 0b       	sbc	r20, r26
    1162:	5b 0b       	sbc	r21, r27
    1164:	da 01       	movw	r26, r20
    1166:	c9 01       	movw	r24, r18
    1168:	39 01       	movw	r6, r18
    116a:	4a 01       	movw	r8, r20
    116c:	99 0c       	add	r9, r9
    116e:	66 08       	sbc	r6, r6
    1170:	76 2c       	mov	r7, r6
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:397
  p = (((p << 31) - var2) * 3125) / var1;
    1172:	43 01       	movw	r8, r6
    1174:	9c 01       	movw	r18, r24
    1176:	ad 01       	movw	r20, r26
    1178:	66 2d       	mov	r22, r6
    117a:	76 2d       	mov	r23, r6
    117c:	86 2d       	mov	r24, r6
    117e:	96 2d       	mov	r25, r6
    1180:	0f e1       	ldi	r16, 0x1F	; 31
    1182:	22 d6       	rcall	.+3140   	; 0x1dc8 <__ashldi3>
    1184:	39 01       	movw	r6, r18
    1186:	4a 01       	movw	r8, r20
    1188:	b6 2f       	mov	r27, r22
    118a:	a7 2f       	mov	r26, r23
    118c:	f8 2f       	mov	r31, r24
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:386
  adc_P >>= 4;

  var1 = ((int64_t)t_fine) - 128000;
  var2 = var1 * var1 * (int64_t)_bmp280_calib.dig_P6;
  var2 = var2 + ((var1 * (int64_t)_bmp280_calib.dig_P5) << 17);
  var2 = var2 + (((int64_t)_bmp280_calib.dig_P4) << 35);
    118e:	e9 2f       	mov	r30, r25
    1190:	63 96       	adiw	r28, 0x13	; 19
    1192:	2f ad       	ldd	r18, Y+63	; 0x3f
    1194:	63 97       	sbiw	r28, 0x13	; 19
    1196:	21 96       	adiw	r28, 0x01	; 1
    1198:	9f ad       	ldd	r25, Y+63	; 0x3f
    119a:	21 97       	sbiw	r28, 0x01	; 1
    119c:	99 0f       	add	r25, r25
    119e:	99 0b       	sbc	r25, r25
    11a0:	21 96       	adiw	r28, 0x01	; 1
    11a2:	3f ad       	ldd	r19, Y+63	; 0x3f
    11a4:	21 97       	sbiw	r28, 0x01	; 1
    11a6:	49 2f       	mov	r20, r25
    11a8:	59 2f       	mov	r21, r25
    11aa:	69 2f       	mov	r22, r25
    11ac:	79 2f       	mov	r23, r25
    11ae:	89 2f       	mov	r24, r25
    11b0:	03 e2       	ldi	r16, 0x23	; 35
    11b2:	0a d6       	rcall	.+3092   	; 0x1dc8 <__ashldi3>
    11b4:	01 2f       	mov	r16, r17
    11b6:	15 2d       	mov	r17, r5
    11b8:	3d d6       	rcall	.+3194   	; 0x1e34 <__adddi3>
    11ba:	59 01       	movw	r10, r18
    11bc:	6a 01       	movw	r12, r20
    11be:	7b 01       	movw	r14, r22
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:397
  if (var1 == 0)
  {
    return 0; // avoid exception caused by division by zero
  }
  p = 1048576 - adc_P;
  p = (((p << 31) - var2) * 3125) / var1;
    11c0:	8c 01       	movw	r16, r24
    11c2:	93 01       	movw	r18, r6
    11c4:	a4 01       	movw	r20, r8
    11c6:	6b 2f       	mov	r22, r27
    11c8:	7a 2f       	mov	r23, r26
    11ca:	8f 2f       	mov	r24, r31
    11cc:	9e 2f       	mov	r25, r30
    11ce:	3b d6       	rcall	.+3190   	; 0x1e46 <__subdi3>
    11d0:	e5 e3       	ldi	r30, 0x35	; 53
    11d2:	ae 2e       	mov	r10, r30
    11d4:	fc e0       	ldi	r31, 0x0C	; 12
    11d6:	bf 2e       	mov	r11, r31
    11d8:	c1 2c       	mov	r12, r1
    11da:	d1 2c       	mov	r13, r1
    11dc:	e1 2c       	mov	r14, r1
    11de:	f1 2c       	mov	r15, r1
    11e0:	00 e0       	ldi	r16, 0x00	; 0
    11e2:	10 e0       	ldi	r17, 0x00	; 0
    11e4:	08 d5       	rcall	.+2576   	; 0x1bf6 <__muldi3>
    11e6:	23 96       	adiw	r28, 0x03	; 3
    11e8:	af ac       	ldd	r10, Y+63	; 0x3f
    11ea:	23 97       	sbiw	r28, 0x03	; 3
    11ec:	24 96       	adiw	r28, 0x04	; 4
    11ee:	bf ac       	ldd	r11, Y+63	; 0x3f
    11f0:	24 97       	sbiw	r28, 0x04	; 4
    11f2:	25 96       	adiw	r28, 0x05	; 5
    11f4:	cf ac       	ldd	r12, Y+63	; 0x3f
    11f6:	25 97       	sbiw	r28, 0x05	; 5
    11f8:	26 96       	adiw	r28, 0x06	; 6
    11fa:	df ac       	ldd	r13, Y+63	; 0x3f
    11fc:	26 97       	sbiw	r28, 0x06	; 6
    11fe:	27 96       	adiw	r28, 0x07	; 7
    1200:	ef ac       	ldd	r14, Y+63	; 0x3f
    1202:	27 97       	sbiw	r28, 0x07	; 7
    1204:	f2 2c       	mov	r15, r2
    1206:	03 2d       	mov	r16, r3
    1208:	14 2d       	mov	r17, r4
    120a:	47 d5       	rcall	.+2702   	; 0x1c9a <__divdi3>
    120c:	29 ab       	std	Y+49, r18	; 0x31
    120e:	3a ab       	std	Y+50, r19	; 0x32
    1210:	4b ab       	std	Y+51, r20	; 0x33
    1212:	5c ab       	std	Y+52, r21	; 0x34
    1214:	6d ab       	std	Y+53, r22	; 0x35
    1216:	7e ab       	std	Y+54, r23	; 0x36
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:398
  var1 = (((int64_t)_bmp280_calib.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
    1218:	8f ab       	std	Y+55, r24	; 0x37
    121a:	98 af       	std	Y+56, r25	; 0x38
    121c:	0d e0       	ldi	r16, 0x0D	; 13
    121e:	ed d5       	rcall	.+3034   	; 0x1dfa <__ashrdi3>
    1220:	32 2e       	mov	r3, r18
    1222:	29 2e       	mov	r2, r25
    1224:	64 96       	adiw	r28, 0x14	; 20
    1226:	2f ad       	ldd	r18, Y+63	; 0x3f
    1228:	64 97       	sbiw	r28, 0x14	; 20
    122a:	22 96       	adiw	r28, 0x02	; 2
    122c:	9f ad       	ldd	r25, Y+63	; 0x3f
    122e:	22 97       	sbiw	r28, 0x02	; 2
    1230:	99 0f       	add	r25, r25
    1232:	99 0b       	sbc	r25, r25
    1234:	a3 2c       	mov	r10, r3
    1236:	b3 2e       	mov	r11, r19
    1238:	c4 2e       	mov	r12, r20
    123a:	d5 2e       	mov	r13, r21
    123c:	e6 2e       	mov	r14, r22
    123e:	f7 2e       	mov	r15, r23
    1240:	08 2f       	mov	r16, r24
    1242:	12 2d       	mov	r17, r2
    1244:	22 96       	adiw	r28, 0x02	; 2
    1246:	3f ad       	ldd	r19, Y+63	; 0x3f
    1248:	22 97       	sbiw	r28, 0x02	; 2
    124a:	49 2f       	mov	r20, r25
    124c:	59 2f       	mov	r21, r25
    124e:	69 2f       	mov	r22, r25
    1250:	79 2f       	mov	r23, r25
    1252:	89 2f       	mov	r24, r25
    1254:	d0 d4       	rcall	.+2464   	; 0x1bf6 <__muldi3>
    1256:	cf d4       	rcall	.+2462   	; 0x1bf6 <__muldi3>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:401
  var2 = (((int64_t)_bmp280_calib.dig_P8) * p) >> 19;

  p = ((p + var1 + var2) >> 8) + (((int64_t)_bmp280_calib.dig_P7) << 4);
    1258:	09 e1       	ldi	r16, 0x19	; 25
    125a:	cf d5       	rcall	.+2974   	; 0x1dfa <__ashrdi3>
    125c:	a9 a8       	ldd	r10, Y+49	; 0x31
    125e:	ba a8       	ldd	r11, Y+50	; 0x32
    1260:	cb a8       	ldd	r12, Y+51	; 0x33
    1262:	dc a8       	ldd	r13, Y+52	; 0x34
    1264:	ed a8       	ldd	r14, Y+53	; 0x35
    1266:	fe a8       	ldd	r15, Y+54	; 0x36
    1268:	0f a9       	ldd	r16, Y+55	; 0x37
    126a:	18 ad       	ldd	r17, Y+56	; 0x38
    126c:	e3 d5       	rcall	.+3014   	; 0x1e34 <__adddi3>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:399
    return 0; // avoid exception caused by division by zero
  }
  p = 1048576 - adc_P;
  p = (((p << 31) - var2) * 3125) / var1;
  var1 = (((int64_t)_bmp280_calib.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
  var2 = (((int64_t)_bmp280_calib.dig_P8) * p) >> 19;
    126e:	19 01       	movw	r2, r18
    1270:	2a 01       	movw	r4, r20
    1272:	3b 01       	movw	r6, r22
    1274:	4c 01       	movw	r8, r24
    1276:	68 96       	adiw	r28, 0x18	; 24
    1278:	2f ad       	ldd	r18, Y+63	; 0x3f
    127a:	68 97       	sbiw	r28, 0x18	; 24
    127c:	2a 96       	adiw	r28, 0x0a	; 10
    127e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1280:	2a 97       	sbiw	r28, 0x0a	; 10
    1282:	99 0f       	add	r25, r25
    1284:	99 0b       	sbc	r25, r25
    1286:	2a 96       	adiw	r28, 0x0a	; 10
    1288:	3f ad       	ldd	r19, Y+63	; 0x3f
    128a:	2a 97       	sbiw	r28, 0x0a	; 10
    128c:	49 2f       	mov	r20, r25
    128e:	59 2f       	mov	r21, r25
    1290:	69 2f       	mov	r22, r25
    1292:	79 2f       	mov	r23, r25
    1294:	89 2f       	mov	r24, r25
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:401

  p = ((p + var1 + var2) >> 8) + (((int64_t)_bmp280_calib.dig_P7) << 4);
    1296:	af d4       	rcall	.+2398   	; 0x1bf6 <__muldi3>
    1298:	03 e1       	ldi	r16, 0x13	; 19
    129a:	af d5       	rcall	.+2910   	; 0x1dfa <__ashrdi3>
    129c:	59 01       	movw	r10, r18
    129e:	6a 01       	movw	r12, r20
    12a0:	7b 01       	movw	r14, r22
    12a2:	8c 01       	movw	r16, r24
    12a4:	91 01       	movw	r18, r2
    12a6:	a2 01       	movw	r20, r4
    12a8:	b3 01       	movw	r22, r6
    12aa:	c4 01       	movw	r24, r8
    12ac:	c3 d5       	rcall	.+2950   	; 0x1e34 <__adddi3>
    12ae:	08 e0       	ldi	r16, 0x08	; 8
    12b0:	a4 d5       	rcall	.+2888   	; 0x1dfa <__ashrdi3>
    12b2:	59 01       	movw	r10, r18
    12b4:	6a 01       	movw	r12, r20
    12b6:	7b 01       	movw	r14, r22
    12b8:	e8 2f       	mov	r30, r24
    12ba:	19 2f       	mov	r17, r25
    12bc:	65 96       	adiw	r28, 0x15	; 21
    12be:	2f ad       	ldd	r18, Y+63	; 0x3f
    12c0:	65 97       	sbiw	r28, 0x15	; 21
    12c2:	28 96       	adiw	r28, 0x08	; 8
    12c4:	9f ad       	ldd	r25, Y+63	; 0x3f
    12c6:	28 97       	sbiw	r28, 0x08	; 8
    12c8:	99 0f       	add	r25, r25
    12ca:	99 0b       	sbc	r25, r25
    12cc:	28 96       	adiw	r28, 0x08	; 8
    12ce:	3f ad       	ldd	r19, Y+63	; 0x3f
    12d0:	28 97       	sbiw	r28, 0x08	; 8
    12d2:	49 2f       	mov	r20, r25
    12d4:	59 2f       	mov	r21, r25
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:402
  return ((uint32_t)p / 256.0);
    12d6:	69 2f       	mov	r22, r25
    12d8:	79 2f       	mov	r23, r25
    12da:	89 2f       	mov	r24, r25
    12dc:	04 e0       	ldi	r16, 0x04	; 4
    12de:	74 d5       	rcall	.+2792   	; 0x1dc8 <__ashldi3>
    12e0:	0e 2f       	mov	r16, r30
    12e2:	a8 d5       	rcall	.+2896   	; 0x1e34 <__adddi3>
    12e4:	b9 01       	movw	r22, r18
    12e6:	ca 01       	movw	r24, r20
    12e8:	c3 d1       	rcall	.+902    	; 0x1670 <__floatunsisf>
    12ea:	20 e0       	ldi	r18, 0x00	; 0
    12ec:	30 e0       	ldi	r19, 0x00	; 0
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:100
    Serial.print("Temperature:\t");
    Serial.println(ReadTemperature(values, &t_fine, calibrationData));
    Serial.print("t_fie:\t");
    Serial.println(t_fine);
    float pressure = ReadPreassure(values, t_fine, calibrationData);
    Serial.print("Pressure:\t");
    12ee:	40 e8       	ldi	r20, 0x80	; 128
    12f0:	5b e3       	ldi	r21, 0x3B	; 59
    12f2:	74 d2       	rcall	.+1256   	; 0x17dc <__mulsf3>
    12f4:	6b 01       	movw	r12, r22
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:101
    Serial.println(pressure);
    12f6:	7c 01       	movw	r14, r24
loop():
    12f8:	8e e2       	ldi	r24, 0x2E	; 46
    12fa:	9f e9       	ldi	r25, 0x9F	; 159
    12fc:	fa d9       	rcall	.-3084   	; 0x6f2 <Print::print(char const*) [clone .constprop.20]>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:102
    Serial.print("Hight:\t");
    12fe:	c7 01       	movw	r24, r14
    1300:	b6 01       	movw	r22, r12
    1302:	52 da       	rcall	.-2908   	; 0x7a8 <Print::println(double, int) [clone .constprop.2]>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:407
  return ((uint32_t)p / 256.0);
}

float ReadHight(float preassure)
{
  preassure /= (float)100.0;
    1304:	89 e3       	ldi	r24, 0x39	; 57
    1306:	9f e9       	ldi	r25, 0x9F	; 159
    1308:	f4 d9       	rcall	.-3096   	; 0x6f2 <Print::print(char const*) [clone .constprop.20]>
ReadHight():
    130a:	20 e0       	ldi	r18, 0x00	; 0
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	48 ec       	ldi	r20, 0xC8	; 200
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:409

  float altitude = 44330.0 * (1.0 - pow(preassure / seaLevelhPa, 0.1903));
    1310:	52 e4       	ldi	r21, 0x42	; 66
    1312:	c7 01       	movw	r24, r14
    1314:	b6 01       	movw	r22, r12
    1316:	18 d1       	rcall	.+560    	; 0x1548 <__divsf3>
    1318:	20 e0       	ldi	r18, 0x00	; 0
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	4f e7       	ldi	r20, 0x7F	; 127
    131e:	54 e4       	ldi	r21, 0x44	; 68
    1320:	13 d1       	rcall	.+550    	; 0x1548 <__divsf3>
    1322:	21 e0       	ldi	r18, 0x01	; 1
    1324:	3e ed       	ldi	r19, 0xDE	; 222
    1326:	42 e4       	ldi	r20, 0x42	; 66
    1328:	5e e3       	ldi	r21, 0x3E	; 62
    132a:	bb d2       	rcall	.+1398   	; 0x18a2 <pow>
    132c:	9b 01       	movw	r18, r22
    132e:	ac 01       	movw	r20, r24
    1330:	60 e0       	ldi	r22, 0x00	; 0
    1332:	70 e0       	ldi	r23, 0x00	; 0
    1334:	80 e8       	ldi	r24, 0x80	; 128
    1336:	9f e3       	ldi	r25, 0x3F	; 63
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:103
    Serial.println(t_fine);
    float pressure = ReadPreassure(values, t_fine, calibrationData);
    Serial.print("Pressure:\t");
    Serial.println(pressure);
    Serial.print("Hight:\t");
    Serial.println(ReadHight(pressure));
    1338:	9e d0       	rcall	.+316    	; 0x1476 <__subsf3>
    133a:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:226


unsigned long millis() {
  // return timer_overflow_count; // for debugging timekeeping issues where these variables are out of scope from the sketch
  unsigned long m;
  uint8_t oldSREG = SREG;
    133c:	3a e2       	ldi	r19, 0x2A	; 42
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:255

     * Not only that - but a dedicated optimizing assembly programmer could probably ensure that instead of the >> 7 (a little mini loop)
     * that was implemented leftshifting it once, retaining the carried bit, and
     */
  #else
    m = timer_millis;
    133e:	4d e2       	ldi	r20, 0x2D	; 45
    1340:	57 e4       	ldi	r21, 0x47	; 71
    1342:	4c d2       	rcall	.+1176   	; 0x17dc <__mulsf3>
loop():
    1344:	31 da       	rcall	.-2974   	; 0x7a8 <Print::println(double, int) [clone .constprop.2]>
millis():
    1346:	8f b7       	in	r24, 0x3f	; 63
    1348:	f8 94       	cli
    134a:	00 91 00 38 	lds	r16, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring.c:256
    SREG = oldSREG;
    134e:	10 91 01 38 	lds	r17, 0x3801	; 0x803801 <__DATA_REGION_ORIGIN__+0x1>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:104
    t = millis();
    1352:	20 91 02 38 	lds	r18, 0x3802	; 0x803802 <__DATA_REGION_ORIGIN__+0x2>
    1356:	30 91 03 38 	lds	r19, 0x3803	; 0x803803 <__DATA_REGION_ORIGIN__+0x3>
    135a:	8f bf       	out	0x3f, r24	; 63
loop():
    135c:	00 93 1c 38 	sts	0x381C, r16	; 0x80381c <t>
    1360:	10 93 1d 38 	sts	0x381D, r17	; 0x80381d <t+0x1>
    1364:	20 93 1e 38 	sts	0x381E, r18	; 0x80381e <t+0x2>
    1368:	30 93 1f 38 	sts	0x381F, r19	; 0x80381f <t+0x3>
    136c:	10 92 20 38 	sts	0x3820, r1	; 0x803820 <t+0x4>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:106
  }
  if (Serial.available() && !digitalRead(SEND_DATA_UART_EN))
    1370:	10 92 21 38 	sts	0x3821, r1	; 0x803821 <t+0x5>
    1374:	10 92 22 38 	sts	0x3822, r1	; 0x803822 <t+0x6>
    1378:	10 92 23 38 	sts	0x3823, r1	; 0x803823 <t+0x7>
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore/wiring_digital.c:385

  /* Get port and check valid port */
  PORT_t *port = digitalPinToPortStruct(pin);

  /* Read pin value from PORTx.IN register */
  if (port->IN & bit_mask) {
    137c:	84 e2       	ldi	r24, 0x24	; 36
    137e:	98 e3       	ldi	r25, 0x38	; 56
    1380:	0e 94 0f 01 	call	0x21e	; 0x21e <UartClass::available()>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:109
  {
    uint8_t result = 0;
    ReadRegisterToUintArray(CHIP_ID_REGISTER, 1, CS_BMP, &result);
    1384:	89 2b       	or	r24, r25
    1386:	f9 f0       	breq	.+62     	; 0x13c6 <main+0x8f0>
digitalRead():
    1388:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <vtable for UartClass+0x7f653e>
    138c:	87 fd       	sbrc	r24, 7
    138e:	1b c0       	rjmp	.+54     	; 0x13c6 <main+0x8f0>
loop():
    1390:	19 82       	std	Y+1, r1	; 0x01
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:110
    Serial.print("Chip ID:\t");
    1392:	ae 01       	movw	r20, r28
    1394:	4f 5f       	subi	r20, 0xFF	; 255
    1396:	5f 4f       	sbci	r21, 0xFF	; 255
    1398:	61 e0       	ldi	r22, 0x01	; 1
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:79
size_t Print::print(unsigned char b, int base) {
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base) {
  return print((long) n, base);
    139a:	80 ed       	ldi	r24, 0xD0	; 208
    139c:	ab d9       	rcall	.-3242   	; 0x6f4 <ReadRegisterToUintArray(unsigned char, unsigned char, unsigned char, unsigned char*) [clone .constprop.17]>
    139e:	81 e4       	ldi	r24, 0x41	; 65
    13a0:	9f e9       	ldi	r25, 0x9F	; 159
    13a2:	a7 d9       	rcall	.-3250   	; 0x6f2 <Print::print(char const*) [clone .constprop.20]>
print():
    13a4:	68 e5       	ldi	r22, 0x58	; 88
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:112
    Serial.print(CHIP_ID);
    Serial.print("\tResult:\t");
    13a6:	70 e0       	ldi	r23, 0x00	; 0
    13a8:	80 e0       	ldi	r24, 0x00	; 0
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	d4 d9       	rcall	.-3160   	; 0x756 <Print::print(long, int) [clone .constprop.13]>
loop():
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:113
    Serial.println(result);
    13ae:	8b e4       	ldi	r24, 0x4B	; 75
    13b0:	9f e9       	ldi	r25, 0x9F	; 159
    13b2:	9f d9       	rcall	.-3266   	; 0x6f2 <Print::print(char const*) [clone .constprop.20]>
    13b4:	6a e0       	ldi	r22, 0x0A	; 10
    13b6:	70 e0       	ldi	r23, 0x00	; 0
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:114
    delay(500);
    13b8:	89 81       	ldd	r24, Y+1	; 0x01
    13ba:	8a d9       	rcall	.-3308   	; 0x6d0 <Print::println(unsigned char, int) [clone .constprop.21]>
    13bc:	64 ef       	ldi	r22, 0xF4	; 244
    13be:	71 e0       	ldi	r23, 0x01	; 1
    13c0:	80 e0       	ldi	r24, 0x00	; 0
    13c2:	90 e0       	ldi	r25, 0x00	; 0
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:117
  }

  delay(100);
    13c4:	0d d8       	rcall	.-4070   	; 0x3e0 <delay>
    13c6:	64 e6       	ldi	r22, 0x64	; 100
    13c8:	70 e0       	ldi	r23, 0x00	; 0
    13ca:	80 e0       	ldi	r24, 0x00	; 0
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	08 d8       	rcall	.-4080   	; 0x3e0 <delay>
    13d0:	b5 cc       	rjmp	.-1686   	; 0xd3c <main+0x266>
ReadTwoRegistersInt():
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:198

int16_t ReadTwoRegistersInt(uint8_t thisRegister, uint8_t chipSelectPin, bool lastMSB)
{
  int8_t inByte = 0;  // incoming byte from the SPI
  int16_t result = 0; // result to return
  Serial.print("From register:\t");
    13d2:	8f d9       	rcall	.-3298   	; 0x6f2 <Print::print(char const*) [clone .constprop.20]>
print():
    13d4:	40 e1       	ldi	r20, 0x10	; 16
C:\Users\krzys\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.5.10\cores\megatinycore\api/Print.cpp:105

size_t Print::print(unsigned long n, int base) {
  if (base == 0) {
    return write(n);
  } else {
    return printNumber(n, base);
    13d6:	c7 01       	movw	r24, r14
    13d8:	b6 01       	movw	r22, r12
    13da:	3d d9       	rcall	.-3462   	; 0x656 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.25]>
ReadTwoRegistersInt():
    13dc:	89 e4       	ldi	r24, 0x49	; 73
    13de:	9f e9       	ldi	r25, 0x9F	; 159
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:200
  Serial.print(thisRegister, HEX);
  Serial.print("\t");
    13e0:	88 d9       	rcall	.-3312   	; 0x6f2 <Print::print(char const*) [clone .constprop.20]>
    13e2:	60 e1       	ldi	r22, 0x10	; 16
    13e4:	70 e0       	ldi	r23, 0x00	; 0
    13e6:	8c 2d       	mov	r24, r12
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:203

  uint8_t readRegister = READ_REGISTER(thisRegister);
  Serial.println(readRegister, HEX);
    13e8:	73 d9       	rcall	.-3354   	; 0x6d0 <Print::println(unsigned char, int) [clone .constprop.21]>
    13ea:	80 e0       	ldi	r24, 0x00	; 0
    13ec:	2c d8       	rcall	.-4008   	; 0x446 <digitalWrite.constprop.30>
    13ee:	8c 2d       	mov	r24, r12
    13f0:	0e 94 a7 00 	call	0x14e	; 0x14e <SPIClass::transfer(unsigned char) [clone .constprop.29]>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:206

  // take the chip select low to select the device:
  digitalWrite(chipSelectPin, LOW);
    13f4:	80 e0       	ldi	r24, 0x00	; 0
    13f6:	0e 94 a7 00 	call	0x14e	; 0x14e <SPIClass::transfer(unsigned char) [clone .constprop.29]>
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:208
  // send the device the register you want to read:
  SPI.transfer(readRegister);
    13fa:	88 2e       	mov	r8, r24
    13fc:	80 e0       	ldi	r24, 0x00	; 0
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:210
  // send a value of 0 to read the first byte returned:
  result = SPI.transfer(0x00);
    13fe:	0e 94 a7 00 	call	0x14e	; 0x14e <SPIClass::transfer(unsigned char) [clone .constprop.29]>
    1402:	98 2e       	mov	r9, r24
    1404:	81 e0       	ldi	r24, 0x01	; 1
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:211
  inByte = SPI.transfer(0x00);
    1406:	1f d8       	rcall	.-4034   	; 0x446 <digitalWrite.constprop.30>
    1408:	c4 01       	movw	r24, r8
calibration():
    140a:	09 2e       	mov	r0, r25
    140c:	00 0c       	add	r0, r0
g:\Studia\PUT Rocket LAB\altimetr\Altimetr_SPI/Altimetr_SPI.ino:213
  // take the chip select high to de-select:
  digitalWrite(chipSelectPin, HIGH);
    140e:	aa 0b       	sbc	r26, r26
    1410:	bb 0b       	sbc	r27, r27
    1412:	33 cc       	rjmp	.-1946   	; 0xc7a <main+0x1a4>

00001414 <__prologue_saves__>:
__prologue_saves__():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2169
    1414:	2f 92       	push	r2
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2170
    1416:	3f 92       	push	r3
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2171
    1418:	4f 92       	push	r4
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2172
    141a:	5f 92       	push	r5
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2173
    141c:	6f 92       	push	r6
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2174
    141e:	7f 92       	push	r7
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2175
    1420:	8f 92       	push	r8
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2176
    1422:	9f 92       	push	r9
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2177
    1424:	af 92       	push	r10
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2178
    1426:	bf 92       	push	r11
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2179
    1428:	cf 92       	push	r12
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2180
    142a:	df 92       	push	r13
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2181
    142c:	ef 92       	push	r14
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2182
    142e:	ff 92       	push	r15
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2183
    1430:	0f 93       	push	r16
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2184
    1432:	1f 93       	push	r17
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2185
    1434:	cf 93       	push	r28
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2186
    1436:	df 93       	push	r29
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2193
    1438:	cd b7       	in	r28, 0x3d	; 61
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2194
    143a:	de b7       	in	r29, 0x3e	; 62
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2195
    143c:	ca 1b       	sub	r28, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2196
    143e:	db 0b       	sbc	r29, r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2197
    1440:	cd bf       	out	0x3d, r28	; 61
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2198
    1442:	de bf       	out	0x3e, r29	; 62
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2211
    1444:	09 94       	ijmp

00001446 <__epilogue_restores__>:
__epilogue_restores__():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2222
    1446:	2a 88       	ldd	r2, Y+18	; 0x12
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2223
    1448:	39 88       	ldd	r3, Y+17	; 0x11
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2224
    144a:	48 88       	ldd	r4, Y+16	; 0x10
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2225
    144c:	5f 84       	ldd	r5, Y+15	; 0x0f
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2226
    144e:	6e 84       	ldd	r6, Y+14	; 0x0e
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2227
    1450:	7d 84       	ldd	r7, Y+13	; 0x0d
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2228
    1452:	8c 84       	ldd	r8, Y+12	; 0x0c
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2229
    1454:	9b 84       	ldd	r9, Y+11	; 0x0b
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2230
    1456:	aa 84       	ldd	r10, Y+10	; 0x0a
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2231
    1458:	b9 84       	ldd	r11, Y+9	; 0x09
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2232
    145a:	c8 84       	ldd	r12, Y+8	; 0x08
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2233
    145c:	df 80       	ldd	r13, Y+7	; 0x07
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2234
    145e:	ee 80       	ldd	r14, Y+6	; 0x06
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2235
    1460:	fd 80       	ldd	r15, Y+5	; 0x05
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2236
    1462:	0c 81       	ldd	r16, Y+4	; 0x04
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2237
    1464:	1b 81       	ldd	r17, Y+3	; 0x03
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2238
    1466:	aa 81       	ldd	r26, Y+2	; 0x02
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2245
    1468:	b9 81       	ldd	r27, Y+1	; 0x01
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2246
    146a:	ce 0f       	add	r28, r30
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2247
    146c:	d1 1d       	adc	r29, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2248
    146e:	cd bf       	out	0x3d, r28	; 61
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2249
    1470:	de bf       	out	0x3e, r29	; 62
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2250
    1472:	ed 01       	movw	r28, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2263
    1474:	08 95       	ret

00001476 <__subsf3>:
__subsf3():
    1476:	50 58       	subi	r21, 0x80	; 128

00001478 <__addsf3>:
    1478:	bb 27       	eor	r27, r27
    147a:	aa 27       	eor	r26, r26
    147c:	0e d0       	rcall	.+28     	; 0x149a <__addsf3x>
    147e:	70 c1       	rjmp	.+736    	; 0x1760 <__fp_round>
__addsf3():
    1480:	61 d1       	rcall	.+706    	; 0x1744 <__fp_pscA>
    1482:	30 f0       	brcs	.+12     	; 0x1490 <__addsf3+0x18>
    1484:	66 d1       	rcall	.+716    	; 0x1752 <__fp_pscB>
    1486:	20 f0       	brcs	.+8      	; 0x1490 <__addsf3+0x18>
    1488:	31 f4       	brne	.+12     	; 0x1496 <__addsf3+0x1e>
    148a:	9f 3f       	cpi	r25, 0xFF	; 255
    148c:	11 f4       	brne	.+4      	; 0x1492 <__addsf3+0x1a>
    148e:	1e f4       	brtc	.+6      	; 0x1496 <__addsf3+0x1e>
    1490:	56 c1       	rjmp	.+684    	; 0x173e <__fp_nan>
    1492:	0e f4       	brtc	.+2      	; 0x1496 <__addsf3+0x1e>
    1494:	e0 95       	com	r30
    1496:	e7 fb       	bst	r30, 7
    1498:	4c c1       	rjmp	.+664    	; 0x1732 <__fp_inf>

0000149a <__addsf3x>:
__addsf3x():
    149a:	e9 2f       	mov	r30, r25
    149c:	72 d1       	rcall	.+740    	; 0x1782 <__fp_split3>
    149e:	80 f3       	brcs	.-32     	; 0x1480 <__addsf3+0x8>
    14a0:	ba 17       	cp	r27, r26
    14a2:	62 07       	cpc	r22, r18
    14a4:	73 07       	cpc	r23, r19
    14a6:	84 07       	cpc	r24, r20
    14a8:	95 07       	cpc	r25, r21
    14aa:	18 f0       	brcs	.+6      	; 0x14b2 <__addsf3x+0x18>
    14ac:	71 f4       	brne	.+28     	; 0x14ca <__addsf3x+0x30>
    14ae:	9e f5       	brtc	.+102    	; 0x1516 <__addsf3x+0x7c>
    14b0:	8a c1       	rjmp	.+788    	; 0x17c6 <__fp_zero>
    14b2:	0e f4       	brtc	.+2      	; 0x14b6 <__addsf3x+0x1c>
    14b4:	e0 95       	com	r30
    14b6:	0b 2e       	mov	r0, r27
    14b8:	ba 2f       	mov	r27, r26
    14ba:	a0 2d       	mov	r26, r0
    14bc:	0b 01       	movw	r0, r22
    14be:	b9 01       	movw	r22, r18
    14c0:	90 01       	movw	r18, r0
    14c2:	0c 01       	movw	r0, r24
    14c4:	ca 01       	movw	r24, r20
    14c6:	a0 01       	movw	r20, r0
    14c8:	11 24       	eor	r1, r1
    14ca:	ff 27       	eor	r31, r31
    14cc:	59 1b       	sub	r21, r25
    14ce:	99 f0       	breq	.+38     	; 0x14f6 <__addsf3x+0x5c>
    14d0:	59 3f       	cpi	r21, 0xF9	; 249
    14d2:	50 f4       	brcc	.+20     	; 0x14e8 <__addsf3x+0x4e>
    14d4:	50 3e       	cpi	r21, 0xE0	; 224
    14d6:	68 f1       	brcs	.+90     	; 0x1532 <__addsf3x+0x98>
    14d8:	1a 16       	cp	r1, r26
    14da:	f0 40       	sbci	r31, 0x00	; 0
    14dc:	a2 2f       	mov	r26, r18
    14de:	23 2f       	mov	r18, r19
    14e0:	34 2f       	mov	r19, r20
    14e2:	44 27       	eor	r20, r20
    14e4:	58 5f       	subi	r21, 0xF8	; 248
    14e6:	f3 cf       	rjmp	.-26     	; 0x14ce <__addsf3x+0x34>
    14e8:	46 95       	lsr	r20
    14ea:	37 95       	ror	r19
    14ec:	27 95       	ror	r18
    14ee:	a7 95       	ror	r26
    14f0:	f0 40       	sbci	r31, 0x00	; 0
    14f2:	53 95       	inc	r21
    14f4:	c9 f7       	brne	.-14     	; 0x14e8 <__addsf3x+0x4e>
    14f6:	7e f4       	brtc	.+30     	; 0x1516 <__addsf3x+0x7c>
    14f8:	1f 16       	cp	r1, r31
    14fa:	ba 0b       	sbc	r27, r26
    14fc:	62 0b       	sbc	r22, r18
    14fe:	73 0b       	sbc	r23, r19
    1500:	84 0b       	sbc	r24, r20
    1502:	ba f0       	brmi	.+46     	; 0x1532 <__addsf3x+0x98>
    1504:	91 50       	subi	r25, 0x01	; 1
    1506:	a1 f0       	breq	.+40     	; 0x1530 <__addsf3x+0x96>
    1508:	ff 0f       	add	r31, r31
    150a:	bb 1f       	adc	r27, r27
    150c:	66 1f       	adc	r22, r22
    150e:	77 1f       	adc	r23, r23
    1510:	88 1f       	adc	r24, r24
    1512:	c2 f7       	brpl	.-16     	; 0x1504 <__addsf3x+0x6a>
    1514:	0e c0       	rjmp	.+28     	; 0x1532 <__addsf3x+0x98>
    1516:	ba 0f       	add	r27, r26
    1518:	62 1f       	adc	r22, r18
    151a:	73 1f       	adc	r23, r19
    151c:	84 1f       	adc	r24, r20
    151e:	48 f4       	brcc	.+18     	; 0x1532 <__addsf3x+0x98>
    1520:	87 95       	ror	r24
    1522:	77 95       	ror	r23
    1524:	67 95       	ror	r22
    1526:	b7 95       	ror	r27
    1528:	f7 95       	ror	r31
    152a:	9e 3f       	cpi	r25, 0xFE	; 254
    152c:	08 f0       	brcs	.+2      	; 0x1530 <__addsf3x+0x96>
    152e:	b3 cf       	rjmp	.-154    	; 0x1496 <__addsf3+0x1e>
    1530:	93 95       	inc	r25
    1532:	88 0f       	add	r24, r24
    1534:	08 f0       	brcs	.+2      	; 0x1538 <__addsf3x+0x9e>
    1536:	99 27       	eor	r25, r25
    1538:	ee 0f       	add	r30, r30
    153a:	97 95       	ror	r25
    153c:	87 95       	ror	r24
    153e:	08 95       	ret

00001540 <__cmpsf2>:
    1540:	d4 d0       	rcall	.+424    	; 0x16ea <__fp_cmp>
    1542:	08 f4       	brcc	.+2      	; 0x1546 <__cmpsf2+0x6>
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	08 95       	ret

00001548 <__divsf3>:
    1548:	0c d0       	rcall	.+24     	; 0x1562 <__divsf3x>
    154a:	0a c1       	rjmp	.+532    	; 0x1760 <__fp_round>
    154c:	02 d1       	rcall	.+516    	; 0x1752 <__fp_pscB>
    154e:	40 f0       	brcs	.+16     	; 0x1560 <__divsf3+0x18>
    1550:	f9 d0       	rcall	.+498    	; 0x1744 <__fp_pscA>
    1552:	30 f0       	brcs	.+12     	; 0x1560 <__divsf3+0x18>
    1554:	21 f4       	brne	.+8      	; 0x155e <__divsf3+0x16>
    1556:	5f 3f       	cpi	r21, 0xFF	; 255
    1558:	19 f0       	breq	.+6      	; 0x1560 <__divsf3+0x18>
    155a:	eb c0       	rjmp	.+470    	; 0x1732 <__fp_inf>
    155c:	51 11       	cpse	r21, r1
    155e:	34 c1       	rjmp	.+616    	; 0x17c8 <__fp_szero>
    1560:	ee c0       	rjmp	.+476    	; 0x173e <__fp_nan>

00001562 <__divsf3x>:
    1562:	0f d1       	rcall	.+542    	; 0x1782 <__fp_split3>
    1564:	98 f3       	brcs	.-26     	; 0x154c <__divsf3+0x4>

00001566 <__divsf3_pse>:
__divsf3_pse():
    1566:	99 23       	and	r25, r25
    1568:	c9 f3       	breq	.-14     	; 0x155c <__divsf3+0x14>
    156a:	55 23       	and	r21, r21
    156c:	b1 f3       	breq	.-20     	; 0x155a <__divsf3+0x12>
    156e:	95 1b       	sub	r25, r21
    1570:	55 0b       	sbc	r21, r21
    1572:	bb 27       	eor	r27, r27
    1574:	aa 27       	eor	r26, r26
    1576:	62 17       	cp	r22, r18
    1578:	73 07       	cpc	r23, r19
    157a:	84 07       	cpc	r24, r20
    157c:	38 f0       	brcs	.+14     	; 0x158c <__divsf3_pse+0x26>
    157e:	9f 5f       	subi	r25, 0xFF	; 255
    1580:	5f 4f       	sbci	r21, 0xFF	; 255
    1582:	22 0f       	add	r18, r18
    1584:	33 1f       	adc	r19, r19
    1586:	44 1f       	adc	r20, r20
    1588:	aa 1f       	adc	r26, r26
    158a:	a9 f3       	breq	.-22     	; 0x1576 <__divsf3_pse+0x10>
    158c:	33 d0       	rcall	.+102    	; 0x15f4 <__divsf3_pse+0x8e>
    158e:	0e 2e       	mov	r0, r30
    1590:	3a f0       	brmi	.+14     	; 0x15a0 <__divsf3_pse+0x3a>
    1592:	e0 e8       	ldi	r30, 0x80	; 128
    1594:	30 d0       	rcall	.+96     	; 0x15f6 <__divsf3_pse+0x90>
    1596:	91 50       	subi	r25, 0x01	; 1
    1598:	50 40       	sbci	r21, 0x00	; 0
    159a:	e6 95       	lsr	r30
    159c:	00 1c       	adc	r0, r0
    159e:	ca f7       	brpl	.-14     	; 0x1592 <__divsf3_pse+0x2c>
    15a0:	29 d0       	rcall	.+82     	; 0x15f4 <__divsf3_pse+0x8e>
    15a2:	fe 2f       	mov	r31, r30
    15a4:	27 d0       	rcall	.+78     	; 0x15f4 <__divsf3_pse+0x8e>
    15a6:	66 0f       	add	r22, r22
    15a8:	77 1f       	adc	r23, r23
    15aa:	88 1f       	adc	r24, r24
    15ac:	bb 1f       	adc	r27, r27
    15ae:	26 17       	cp	r18, r22
    15b0:	37 07       	cpc	r19, r23
    15b2:	48 07       	cpc	r20, r24
    15b4:	ab 07       	cpc	r26, r27
    15b6:	b0 e8       	ldi	r27, 0x80	; 128
    15b8:	09 f0       	breq	.+2      	; 0x15bc <__divsf3_pse+0x56>
    15ba:	bb 0b       	sbc	r27, r27
    15bc:	80 2d       	mov	r24, r0
    15be:	bf 01       	movw	r22, r30
    15c0:	ff 27       	eor	r31, r31
    15c2:	93 58       	subi	r25, 0x83	; 131
    15c4:	5f 4f       	sbci	r21, 0xFF	; 255
    15c6:	2a f0       	brmi	.+10     	; 0x15d2 <__divsf3_pse+0x6c>
    15c8:	9e 3f       	cpi	r25, 0xFE	; 254
    15ca:	51 05       	cpc	r21, r1
    15cc:	68 f0       	brcs	.+26     	; 0x15e8 <__divsf3_pse+0x82>
    15ce:	b1 c0       	rjmp	.+354    	; 0x1732 <__fp_inf>
    15d0:	fb c0       	rjmp	.+502    	; 0x17c8 <__fp_szero>
    15d2:	5f 3f       	cpi	r21, 0xFF	; 255
    15d4:	ec f3       	brlt	.-6      	; 0x15d0 <__divsf3_pse+0x6a>
    15d6:	98 3e       	cpi	r25, 0xE8	; 232
    15d8:	dc f3       	brlt	.-10     	; 0x15d0 <__divsf3_pse+0x6a>
    15da:	86 95       	lsr	r24
    15dc:	77 95       	ror	r23
    15de:	67 95       	ror	r22
    15e0:	b7 95       	ror	r27
    15e2:	f7 95       	ror	r31
    15e4:	9f 5f       	subi	r25, 0xFF	; 255
    15e6:	c9 f7       	brne	.-14     	; 0x15da <__divsf3_pse+0x74>
    15e8:	88 0f       	add	r24, r24
    15ea:	91 1d       	adc	r25, r1
    15ec:	96 95       	lsr	r25
    15ee:	87 95       	ror	r24
    15f0:	97 f9       	bld	r25, 7
    15f2:	08 95       	ret
    15f4:	e1 e0       	ldi	r30, 0x01	; 1
    15f6:	66 0f       	add	r22, r22
    15f8:	77 1f       	adc	r23, r23
    15fa:	88 1f       	adc	r24, r24
    15fc:	bb 1f       	adc	r27, r27
    15fe:	62 17       	cp	r22, r18
    1600:	73 07       	cpc	r23, r19
    1602:	84 07       	cpc	r24, r20
    1604:	ba 07       	cpc	r27, r26
    1606:	20 f0       	brcs	.+8      	; 0x1610 <__divsf3_pse+0xaa>
    1608:	62 1b       	sub	r22, r18
    160a:	73 0b       	sbc	r23, r19
    160c:	84 0b       	sbc	r24, r20
    160e:	ba 0b       	sbc	r27, r26
    1610:	ee 1f       	adc	r30, r30
    1612:	88 f7       	brcc	.-30     	; 0x15f6 <__divsf3_pse+0x90>
    1614:	e0 95       	com	r30
    1616:	08 95       	ret

00001618 <__fixunssfsi>:
__fixunssfsi():
    1618:	bc d0       	rcall	.+376    	; 0x1792 <__fp_splitA>
    161a:	88 f0       	brcs	.+34     	; 0x163e <__fixunssfsi+0x26>
    161c:	9f 57       	subi	r25, 0x7F	; 127
    161e:	90 f0       	brcs	.+36     	; 0x1644 <__fixunssfsi+0x2c>
    1620:	b9 2f       	mov	r27, r25
    1622:	99 27       	eor	r25, r25
    1624:	b7 51       	subi	r27, 0x17	; 23
    1626:	a0 f0       	brcs	.+40     	; 0x1650 <__fixunssfsi+0x38>
    1628:	d1 f0       	breq	.+52     	; 0x165e <__fixunssfsi+0x46>
    162a:	66 0f       	add	r22, r22
    162c:	77 1f       	adc	r23, r23
    162e:	88 1f       	adc	r24, r24
    1630:	99 1f       	adc	r25, r25
    1632:	1a f0       	brmi	.+6      	; 0x163a <__fixunssfsi+0x22>
    1634:	ba 95       	dec	r27
    1636:	c9 f7       	brne	.-14     	; 0x162a <__fixunssfsi+0x12>
    1638:	12 c0       	rjmp	.+36     	; 0x165e <__fixunssfsi+0x46>
    163a:	b1 30       	cpi	r27, 0x01	; 1
    163c:	81 f0       	breq	.+32     	; 0x165e <__fixunssfsi+0x46>
    163e:	c3 d0       	rcall	.+390    	; 0x17c6 <__fp_zero>
    1640:	b1 e0       	ldi	r27, 0x01	; 1
    1642:	08 95       	ret
    1644:	c0 c0       	rjmp	.+384    	; 0x17c6 <__fp_zero>
    1646:	67 2f       	mov	r22, r23
    1648:	78 2f       	mov	r23, r24
    164a:	88 27       	eor	r24, r24
    164c:	b8 5f       	subi	r27, 0xF8	; 248
    164e:	39 f0       	breq	.+14     	; 0x165e <__fixunssfsi+0x46>
    1650:	b9 3f       	cpi	r27, 0xF9	; 249
    1652:	cc f3       	brlt	.-14     	; 0x1646 <__fixunssfsi+0x2e>
    1654:	86 95       	lsr	r24
    1656:	77 95       	ror	r23
    1658:	67 95       	ror	r22
    165a:	b3 95       	inc	r27
    165c:	d9 f7       	brne	.-10     	; 0x1654 <__fixunssfsi+0x3c>
    165e:	3e f4       	brtc	.+14     	; 0x166e <__fixunssfsi+0x56>
    1660:	90 95       	com	r25
    1662:	80 95       	com	r24
    1664:	70 95       	com	r23
    1666:	61 95       	neg	r22
    1668:	7f 4f       	sbci	r23, 0xFF	; 255
    166a:	8f 4f       	sbci	r24, 0xFF	; 255
    166c:	9f 4f       	sbci	r25, 0xFF	; 255
    166e:	08 95       	ret

00001670 <__floatunsisf>:
__floatunsisf():
    1670:	e8 94       	clt
    1672:	09 c0       	rjmp	.+18     	; 0x1686 <__floatsisf+0x12>

00001674 <__floatsisf>:
    1674:	97 fb       	bst	r25, 7
    1676:	3e f4       	brtc	.+14     	; 0x1686 <__floatsisf+0x12>
    1678:	90 95       	com	r25
    167a:	80 95       	com	r24
    167c:	70 95       	com	r23
    167e:	61 95       	neg	r22
    1680:	7f 4f       	sbci	r23, 0xFF	; 255
    1682:	8f 4f       	sbci	r24, 0xFF	; 255
    1684:	9f 4f       	sbci	r25, 0xFF	; 255
    1686:	99 23       	and	r25, r25
    1688:	a9 f0       	breq	.+42     	; 0x16b4 <__floatsisf+0x40>
    168a:	f9 2f       	mov	r31, r25
    168c:	96 e9       	ldi	r25, 0x96	; 150
    168e:	bb 27       	eor	r27, r27
    1690:	93 95       	inc	r25
    1692:	f6 95       	lsr	r31
    1694:	87 95       	ror	r24
    1696:	77 95       	ror	r23
    1698:	67 95       	ror	r22
    169a:	b7 95       	ror	r27
    169c:	f1 11       	cpse	r31, r1
    169e:	f8 cf       	rjmp	.-16     	; 0x1690 <__floatsisf+0x1c>
    16a0:	fa f4       	brpl	.+62     	; 0x16e0 <__floatsisf+0x6c>
    16a2:	bb 0f       	add	r27, r27
    16a4:	11 f4       	brne	.+4      	; 0x16aa <__floatsisf+0x36>
    16a6:	60 ff       	sbrs	r22, 0
    16a8:	1b c0       	rjmp	.+54     	; 0x16e0 <__floatsisf+0x6c>
    16aa:	6f 5f       	subi	r22, 0xFF	; 255
    16ac:	7f 4f       	sbci	r23, 0xFF	; 255
    16ae:	8f 4f       	sbci	r24, 0xFF	; 255
    16b0:	9f 4f       	sbci	r25, 0xFF	; 255
    16b2:	16 c0       	rjmp	.+44     	; 0x16e0 <__floatsisf+0x6c>
    16b4:	88 23       	and	r24, r24
    16b6:	11 f0       	breq	.+4      	; 0x16bc <__floatsisf+0x48>
    16b8:	96 e9       	ldi	r25, 0x96	; 150
    16ba:	11 c0       	rjmp	.+34     	; 0x16de <__floatsisf+0x6a>
    16bc:	77 23       	and	r23, r23
    16be:	21 f0       	breq	.+8      	; 0x16c8 <__floatsisf+0x54>
    16c0:	9e e8       	ldi	r25, 0x8E	; 142
    16c2:	87 2f       	mov	r24, r23
    16c4:	76 2f       	mov	r23, r22
    16c6:	05 c0       	rjmp	.+10     	; 0x16d2 <__floatsisf+0x5e>
    16c8:	66 23       	and	r22, r22
    16ca:	71 f0       	breq	.+28     	; 0x16e8 <__floatsisf+0x74>
    16cc:	96 e8       	ldi	r25, 0x86	; 134
    16ce:	86 2f       	mov	r24, r22
    16d0:	70 e0       	ldi	r23, 0x00	; 0
    16d2:	60 e0       	ldi	r22, 0x00	; 0
    16d4:	2a f0       	brmi	.+10     	; 0x16e0 <__floatsisf+0x6c>
    16d6:	9a 95       	dec	r25
    16d8:	66 0f       	add	r22, r22
    16da:	77 1f       	adc	r23, r23
    16dc:	88 1f       	adc	r24, r24
    16de:	da f7       	brpl	.-10     	; 0x16d6 <__floatsisf+0x62>
    16e0:	88 0f       	add	r24, r24
    16e2:	96 95       	lsr	r25
    16e4:	87 95       	ror	r24
    16e6:	97 f9       	bld	r25, 7
    16e8:	08 95       	ret

000016ea <__fp_cmp>:
__fp_cmp():
    16ea:	99 0f       	add	r25, r25
    16ec:	00 08       	sbc	r0, r0
    16ee:	55 0f       	add	r21, r21
    16f0:	aa 0b       	sbc	r26, r26
    16f2:	e0 e8       	ldi	r30, 0x80	; 128
    16f4:	fe ef       	ldi	r31, 0xFE	; 254
    16f6:	16 16       	cp	r1, r22
    16f8:	17 06       	cpc	r1, r23
    16fa:	e8 07       	cpc	r30, r24
    16fc:	f9 07       	cpc	r31, r25
    16fe:	c0 f0       	brcs	.+48     	; 0x1730 <__fp_cmp+0x46>
    1700:	12 16       	cp	r1, r18
    1702:	13 06       	cpc	r1, r19
    1704:	e4 07       	cpc	r30, r20
    1706:	f5 07       	cpc	r31, r21
    1708:	98 f0       	brcs	.+38     	; 0x1730 <__fp_cmp+0x46>
    170a:	62 1b       	sub	r22, r18
    170c:	73 0b       	sbc	r23, r19
    170e:	84 0b       	sbc	r24, r20
    1710:	95 0b       	sbc	r25, r21
    1712:	39 f4       	brne	.+14     	; 0x1722 <__fp_cmp+0x38>
    1714:	0a 26       	eor	r0, r26
    1716:	61 f0       	breq	.+24     	; 0x1730 <__fp_cmp+0x46>
    1718:	23 2b       	or	r18, r19
    171a:	24 2b       	or	r18, r20
    171c:	25 2b       	or	r18, r21
    171e:	21 f4       	brne	.+8      	; 0x1728 <__fp_cmp+0x3e>
    1720:	08 95       	ret
    1722:	0a 26       	eor	r0, r26
    1724:	09 f4       	brne	.+2      	; 0x1728 <__fp_cmp+0x3e>
    1726:	a1 40       	sbci	r26, 0x01	; 1
    1728:	a6 95       	lsr	r26
    172a:	8f ef       	ldi	r24, 0xFF	; 255
    172c:	81 1d       	adc	r24, r1
    172e:	81 1d       	adc	r24, r1
    1730:	08 95       	ret

00001732 <__fp_inf>:
__fp_inf():
    1732:	97 f9       	bld	r25, 7
    1734:	9f 67       	ori	r25, 0x7F	; 127
    1736:	80 e8       	ldi	r24, 0x80	; 128
    1738:	70 e0       	ldi	r23, 0x00	; 0
    173a:	60 e0       	ldi	r22, 0x00	; 0
    173c:	08 95       	ret

0000173e <__fp_nan>:
__fp_nan():
    173e:	9f ef       	ldi	r25, 0xFF	; 255
    1740:	80 ec       	ldi	r24, 0xC0	; 192
    1742:	08 95       	ret

00001744 <__fp_pscA>:
__fp_pscA():
    1744:	00 24       	eor	r0, r0
    1746:	0a 94       	dec	r0
    1748:	16 16       	cp	r1, r22
    174a:	17 06       	cpc	r1, r23
    174c:	18 06       	cpc	r1, r24
    174e:	09 06       	cpc	r0, r25
    1750:	08 95       	ret

00001752 <__fp_pscB>:
__fp_pscB():
    1752:	00 24       	eor	r0, r0
    1754:	0a 94       	dec	r0
    1756:	12 16       	cp	r1, r18
    1758:	13 06       	cpc	r1, r19
    175a:	14 06       	cpc	r1, r20
    175c:	05 06       	cpc	r0, r21
    175e:	08 95       	ret

00001760 <__fp_round>:
__fp_round():
    1760:	09 2e       	mov	r0, r25
    1762:	03 94       	inc	r0
    1764:	00 0c       	add	r0, r0
    1766:	11 f4       	brne	.+4      	; 0x176c <__fp_round+0xc>
    1768:	88 23       	and	r24, r24
    176a:	52 f0       	brmi	.+20     	; 0x1780 <__fp_round+0x20>
    176c:	bb 0f       	add	r27, r27
    176e:	40 f4       	brcc	.+16     	; 0x1780 <__fp_round+0x20>
    1770:	bf 2b       	or	r27, r31
    1772:	11 f4       	brne	.+4      	; 0x1778 <__fp_round+0x18>
    1774:	60 ff       	sbrs	r22, 0
    1776:	04 c0       	rjmp	.+8      	; 0x1780 <__fp_round+0x20>
    1778:	6f 5f       	subi	r22, 0xFF	; 255
    177a:	7f 4f       	sbci	r23, 0xFF	; 255
    177c:	8f 4f       	sbci	r24, 0xFF	; 255
    177e:	9f 4f       	sbci	r25, 0xFF	; 255
    1780:	08 95       	ret

00001782 <__fp_split3>:
__fp_split3():
    1782:	57 fd       	sbrc	r21, 7
    1784:	90 58       	subi	r25, 0x80	; 128
    1786:	44 0f       	add	r20, r20
    1788:	55 1f       	adc	r21, r21
    178a:	59 f0       	breq	.+22     	; 0x17a2 <__fp_splitA+0x10>
    178c:	5f 3f       	cpi	r21, 0xFF	; 255
    178e:	71 f0       	breq	.+28     	; 0x17ac <__fp_splitA+0x1a>
    1790:	47 95       	ror	r20

00001792 <__fp_splitA>:
    1792:	88 0f       	add	r24, r24
    1794:	97 fb       	bst	r25, 7
    1796:	99 1f       	adc	r25, r25
    1798:	61 f0       	breq	.+24     	; 0x17b2 <__fp_splitA+0x20>
    179a:	9f 3f       	cpi	r25, 0xFF	; 255
    179c:	79 f0       	breq	.+30     	; 0x17bc <__fp_splitA+0x2a>
    179e:	87 95       	ror	r24
    17a0:	08 95       	ret
    17a2:	12 16       	cp	r1, r18
    17a4:	13 06       	cpc	r1, r19
    17a6:	14 06       	cpc	r1, r20
    17a8:	55 1f       	adc	r21, r21
    17aa:	f2 cf       	rjmp	.-28     	; 0x1790 <__fp_split3+0xe>
    17ac:	46 95       	lsr	r20
    17ae:	f1 df       	rcall	.-30     	; 0x1792 <__fp_splitA>
    17b0:	08 c0       	rjmp	.+16     	; 0x17c2 <__fp_splitA+0x30>
    17b2:	16 16       	cp	r1, r22
    17b4:	17 06       	cpc	r1, r23
    17b6:	18 06       	cpc	r1, r24
    17b8:	99 1f       	adc	r25, r25
    17ba:	f1 cf       	rjmp	.-30     	; 0x179e <__fp_splitA+0xc>
    17bc:	86 95       	lsr	r24
    17be:	71 05       	cpc	r23, r1
    17c0:	61 05       	cpc	r22, r1
    17c2:	08 94       	sec
    17c4:	08 95       	ret

000017c6 <__fp_zero>:
__fp_zero():
    17c6:	e8 94       	clt

000017c8 <__fp_szero>:
    17c8:	bb 27       	eor	r27, r27
    17ca:	66 27       	eor	r22, r22
    17cc:	77 27       	eor	r23, r23
    17ce:	cb 01       	movw	r24, r22
    17d0:	97 f9       	bld	r25, 7
    17d2:	08 95       	ret

000017d4 <__gesf2>:
__gesf2():
    17d4:	8a df       	rcall	.-236    	; 0x16ea <__fp_cmp>
    17d6:	08 f4       	brcc	.+2      	; 0x17da <__gesf2+0x6>
    17d8:	8f ef       	ldi	r24, 0xFF	; 255
    17da:	08 95       	ret

000017dc <__mulsf3>:
__mulsf3():
    17dc:	0b d0       	rcall	.+22     	; 0x17f4 <__mulsf3x>
    17de:	c0 cf       	rjmp	.-128    	; 0x1760 <__fp_round>
    17e0:	b1 df       	rcall	.-158    	; 0x1744 <__fp_pscA>
    17e2:	28 f0       	brcs	.+10     	; 0x17ee <__mulsf3+0x12>
    17e4:	b6 df       	rcall	.-148    	; 0x1752 <__fp_pscB>
    17e6:	18 f0       	brcs	.+6      	; 0x17ee <__mulsf3+0x12>
    17e8:	95 23       	and	r25, r21
    17ea:	09 f0       	breq	.+2      	; 0x17ee <__mulsf3+0x12>
    17ec:	a2 cf       	rjmp	.-188    	; 0x1732 <__fp_inf>
    17ee:	a7 cf       	rjmp	.-178    	; 0x173e <__fp_nan>
    17f0:	11 24       	eor	r1, r1
    17f2:	ea cf       	rjmp	.-44     	; 0x17c8 <__fp_szero>

000017f4 <__mulsf3x>:
__mulsf3x():
    17f4:	c6 df       	rcall	.-116    	; 0x1782 <__fp_split3>
    17f6:	a0 f3       	brcs	.-24     	; 0x17e0 <__mulsf3+0x4>

000017f8 <__mulsf3_pse>:
    17f8:	95 9f       	mul	r25, r21
    17fa:	d1 f3       	breq	.-12     	; 0x17f0 <__mulsf3+0x14>
    17fc:	95 0f       	add	r25, r21
    17fe:	50 e0       	ldi	r21, 0x00	; 0
    1800:	55 1f       	adc	r21, r21
    1802:	62 9f       	mul	r22, r18
    1804:	f0 01       	movw	r30, r0
    1806:	72 9f       	mul	r23, r18
    1808:	bb 27       	eor	r27, r27
    180a:	f0 0d       	add	r31, r0
    180c:	b1 1d       	adc	r27, r1
    180e:	63 9f       	mul	r22, r19
    1810:	aa 27       	eor	r26, r26
    1812:	f0 0d       	add	r31, r0
    1814:	b1 1d       	adc	r27, r1
    1816:	aa 1f       	adc	r26, r26
    1818:	64 9f       	mul	r22, r20
    181a:	66 27       	eor	r22, r22
    181c:	b0 0d       	add	r27, r0
    181e:	a1 1d       	adc	r26, r1
    1820:	66 1f       	adc	r22, r22
    1822:	82 9f       	mul	r24, r18
    1824:	22 27       	eor	r18, r18
    1826:	b0 0d       	add	r27, r0
    1828:	a1 1d       	adc	r26, r1
    182a:	62 1f       	adc	r22, r18
    182c:	73 9f       	mul	r23, r19
    182e:	b0 0d       	add	r27, r0
    1830:	a1 1d       	adc	r26, r1
    1832:	62 1f       	adc	r22, r18
    1834:	83 9f       	mul	r24, r19
    1836:	a0 0d       	add	r26, r0
    1838:	61 1d       	adc	r22, r1
    183a:	22 1f       	adc	r18, r18
    183c:	74 9f       	mul	r23, r20
    183e:	33 27       	eor	r19, r19
    1840:	a0 0d       	add	r26, r0
    1842:	61 1d       	adc	r22, r1
    1844:	23 1f       	adc	r18, r19
    1846:	84 9f       	mul	r24, r20
    1848:	60 0d       	add	r22, r0
    184a:	21 1d       	adc	r18, r1
    184c:	82 2f       	mov	r24, r18
    184e:	76 2f       	mov	r23, r22
    1850:	6a 2f       	mov	r22, r26
    1852:	11 24       	eor	r1, r1
    1854:	9f 57       	subi	r25, 0x7F	; 127
    1856:	50 40       	sbci	r21, 0x00	; 0
    1858:	8a f0       	brmi	.+34     	; 0x187c <__mulsf3_pse+0x84>
    185a:	e1 f0       	breq	.+56     	; 0x1894 <__mulsf3_pse+0x9c>
    185c:	88 23       	and	r24, r24
    185e:	4a f0       	brmi	.+18     	; 0x1872 <__mulsf3_pse+0x7a>
    1860:	ee 0f       	add	r30, r30
    1862:	ff 1f       	adc	r31, r31
    1864:	bb 1f       	adc	r27, r27
    1866:	66 1f       	adc	r22, r22
    1868:	77 1f       	adc	r23, r23
    186a:	88 1f       	adc	r24, r24
    186c:	91 50       	subi	r25, 0x01	; 1
    186e:	50 40       	sbci	r21, 0x00	; 0
    1870:	a9 f7       	brne	.-22     	; 0x185c <__mulsf3_pse+0x64>
    1872:	9e 3f       	cpi	r25, 0xFE	; 254
    1874:	51 05       	cpc	r21, r1
    1876:	70 f0       	brcs	.+28     	; 0x1894 <__mulsf3_pse+0x9c>
    1878:	5c cf       	rjmp	.-328    	; 0x1732 <__fp_inf>
    187a:	a6 cf       	rjmp	.-180    	; 0x17c8 <__fp_szero>
    187c:	5f 3f       	cpi	r21, 0xFF	; 255
    187e:	ec f3       	brlt	.-6      	; 0x187a <__mulsf3_pse+0x82>
    1880:	98 3e       	cpi	r25, 0xE8	; 232
    1882:	dc f3       	brlt	.-10     	; 0x187a <__mulsf3_pse+0x82>
    1884:	86 95       	lsr	r24
    1886:	77 95       	ror	r23
    1888:	67 95       	ror	r22
    188a:	b7 95       	ror	r27
    188c:	f7 95       	ror	r31
    188e:	e7 95       	ror	r30
    1890:	9f 5f       	subi	r25, 0xFF	; 255
    1892:	c1 f7       	brne	.-16     	; 0x1884 <__mulsf3_pse+0x8c>
    1894:	fe 2b       	or	r31, r30
    1896:	88 0f       	add	r24, r24
    1898:	91 1d       	adc	r25, r1
    189a:	96 95       	lsr	r25
    189c:	87 95       	ror	r24
    189e:	97 f9       	bld	r25, 7
    18a0:	08 95       	ret

000018a2 <pow>:
    18a2:	fa 01       	movw	r30, r20
    18a4:	ee 0f       	add	r30, r30
    18a6:	ff 1f       	adc	r31, r31
    18a8:	30 96       	adiw	r30, 0x00	; 0
    18aa:	21 05       	cpc	r18, r1
    18ac:	31 05       	cpc	r19, r1
    18ae:	99 f1       	breq	.+102    	; 0x1916 <pow+0x74>
    18b0:	61 15       	cp	r22, r1
    18b2:	71 05       	cpc	r23, r1
    18b4:	61 f4       	brne	.+24     	; 0x18ce <pow+0x2c>
    18b6:	80 38       	cpi	r24, 0x80	; 128
    18b8:	bf e3       	ldi	r27, 0x3F	; 63
    18ba:	9b 07       	cpc	r25, r27
    18bc:	49 f1       	breq	.+82     	; 0x1910 <pow+0x6e>
    18be:	68 94       	set
    18c0:	90 38       	cpi	r25, 0x80	; 128
    18c2:	81 05       	cpc	r24, r1
    18c4:	61 f0       	breq	.+24     	; 0x18de <pow+0x3c>
pow():
    18c6:	80 38       	cpi	r24, 0x80	; 128
    18c8:	bf ef       	ldi	r27, 0xFF	; 255
    18ca:	9b 07       	cpc	r25, r27
    18cc:	41 f0       	breq	.+16     	; 0x18de <pow+0x3c>
    18ce:	99 23       	and	r25, r25
    18d0:	42 f5       	brpl	.+80     	; 0x1922 <pow+0x80>
    18d2:	ff 3f       	cpi	r31, 0xFF	; 255
    18d4:	e1 05       	cpc	r30, r1
    18d6:	31 05       	cpc	r19, r1
    18d8:	21 05       	cpc	r18, r1
    18da:	11 f1       	breq	.+68     	; 0x1920 <pow+0x7e>
    18dc:	e8 94       	clt
    18de:	08 94       	sec
    18e0:	e7 95       	ror	r30
    18e2:	d9 01       	movw	r26, r18
    18e4:	aa 23       	and	r26, r26
    18e6:	29 f4       	brne	.+10     	; 0x18f2 <pow+0x50>
    18e8:	ab 2f       	mov	r26, r27
    18ea:	be 2f       	mov	r27, r30
    18ec:	f8 5f       	subi	r31, 0xF8	; 248
    18ee:	d0 f3       	brcs	.-12     	; 0x18e4 <pow+0x42>
    18f0:	10 c0       	rjmp	.+32     	; 0x1912 <pow+0x70>
    18f2:	ff 5f       	subi	r31, 0xFF	; 255
    18f4:	70 f4       	brcc	.+28     	; 0x1912 <pow+0x70>
    18f6:	a6 95       	lsr	r26
    18f8:	e0 f7       	brcc	.-8      	; 0x18f2 <pow+0x50>
    18fa:	f7 39       	cpi	r31, 0x97	; 151
    18fc:	50 f0       	brcs	.+20     	; 0x1912 <pow+0x70>
    18fe:	19 f0       	breq	.+6      	; 0x1906 <pow+0x64>
    1900:	ff 3a       	cpi	r31, 0xAF	; 175
    1902:	38 f4       	brcc	.+14     	; 0x1912 <pow+0x70>
    1904:	9f 77       	andi	r25, 0x7F	; 127
    1906:	9f 93       	push	r25
    1908:	0c d0       	rcall	.+24     	; 0x1922 <pow+0x80>
    190a:	0f 90       	pop	r0
    190c:	07 fc       	sbrc	r0, 7
    190e:	90 58       	subi	r25, 0x80	; 128
    1910:	08 95       	ret
    1912:	3e f0       	brts	.+14     	; 0x1922 <pow+0x80>
    1914:	14 cf       	rjmp	.-472    	; 0x173e <__fp_nan>
    1916:	60 e0       	ldi	r22, 0x00	; 0
    1918:	70 e0       	ldi	r23, 0x00	; 0
    191a:	80 e8       	ldi	r24, 0x80	; 128
    191c:	9f e3       	ldi	r25, 0x3F	; 63
    191e:	08 95       	ret
    1920:	4f e7       	ldi	r20, 0x7F	; 127
    1922:	9f 77       	andi	r25, 0x7F	; 127
    1924:	5f 93       	push	r21
    1926:	4f 93       	push	r20
    1928:	3f 93       	push	r19
    192a:	2f 93       	push	r18
    192c:	a2 d0       	rcall	.+324    	; 0x1a72 <log>
    192e:	2f 91       	pop	r18
    1930:	3f 91       	pop	r19
    1932:	4f 91       	pop	r20
    1934:	5f 91       	pop	r21
    1936:	52 df       	rcall	.-348    	; 0x17dc <__mulsf3>
    1938:	09 c0       	rjmp	.+18     	; 0x194c <exp>

0000193a <__unordsf2>:
__unordsf2():
    193a:	d7 de       	rcall	.-594    	; 0x16ea <__fp_cmp>
    193c:	88 0b       	sbc	r24, r24
    193e:	99 0b       	sbc	r25, r25
    1940:	08 95       	ret
    1942:	19 f4       	brne	.+6      	; 0x194a <__unordsf2+0x10>
    1944:	0e f0       	brts	.+2      	; 0x1948 <__unordsf2+0xe>
    1946:	f5 ce       	rjmp	.-534    	; 0x1732 <__fp_inf>
    1948:	3e cf       	rjmp	.-388    	; 0x17c6 <__fp_zero>
    194a:	f9 ce       	rjmp	.-526    	; 0x173e <__fp_nan>

0000194c <exp>:
exp():
    194c:	22 df       	rcall	.-444    	; 0x1792 <__fp_splitA>
    194e:	c8 f3       	brcs	.-14     	; 0x1942 <__unordsf2+0x8>
    1950:	96 38       	cpi	r25, 0x86	; 134
    1952:	c0 f7       	brcc	.-16     	; 0x1944 <__unordsf2+0xa>
    1954:	07 f8       	bld	r0, 7
    1956:	0f 92       	push	r0
    1958:	e8 94       	clt
    195a:	2b e3       	ldi	r18, 0x3B	; 59
    195c:	3a ea       	ldi	r19, 0xAA	; 170
    195e:	48 eb       	ldi	r20, 0xB8	; 184
    1960:	5f e7       	ldi	r21, 0x7F	; 127
    1962:	4a df       	rcall	.-364    	; 0x17f8 <__mulsf3_pse>
    1964:	0f 92       	push	r0
    1966:	0f 92       	push	r0
    1968:	0f 92       	push	r0
    196a:	4d b7       	in	r20, 0x3d	; 61
    196c:	5e b7       	in	r21, 0x3e	; 62
    196e:	0f 92       	push	r0
    1970:	c0 d0       	rcall	.+384    	; 0x1af2 <modf>
    1972:	e8 e7       	ldi	r30, 0x78	; 120
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	16 d0       	rcall	.+44     	; 0x19a4 <__fp_powser>
    1978:	4f 91       	pop	r20
    197a:	5f 91       	pop	r21
    197c:	ef 91       	pop	r30
    197e:	ff 91       	pop	r31
    1980:	e5 95       	asr	r30
    1982:	ee 1f       	adc	r30, r30
    1984:	ff 1f       	adc	r31, r31
    1986:	49 f0       	breq	.+18     	; 0x199a <exp+0x4e>
    1988:	fe 57       	subi	r31, 0x7E	; 126
    198a:	e0 68       	ori	r30, 0x80	; 128
    198c:	44 27       	eor	r20, r20
    198e:	ee 0f       	add	r30, r30
    1990:	44 1f       	adc	r20, r20
    1992:	fa 95       	dec	r31
    1994:	e1 f7       	brne	.-8      	; 0x198e <exp+0x42>
    1996:	41 95       	neg	r20
    1998:	55 0b       	sbc	r21, r21
    199a:	32 d0       	rcall	.+100    	; 0x1a00 <ldexp>
    199c:	0f 90       	pop	r0
    199e:	07 fe       	sbrs	r0, 7
    19a0:	26 c0       	rjmp	.+76     	; 0x19ee <inverse>
    19a2:	08 95       	ret

000019a4 <__fp_powser>:
    19a4:	df 93       	push	r29
    19a6:	cf 93       	push	r28
    19a8:	1f 93       	push	r17
    19aa:	0f 93       	push	r16
    19ac:	ff 92       	push	r15
    19ae:	ef 92       	push	r14
    19b0:	df 92       	push	r13
    19b2:	7b 01       	movw	r14, r22
    19b4:	8c 01       	movw	r16, r24
    19b6:	68 94       	set
    19b8:	05 c0       	rjmp	.+10     	; 0x19c4 <__fp_powser+0x20>
    19ba:	da 2e       	mov	r13, r26
    19bc:	ef 01       	movw	r28, r30
    19be:	1a df       	rcall	.-460    	; 0x17f4 <__mulsf3x>
__fp_powser():
    19c0:	fe 01       	movw	r30, r28
    19c2:	e8 94       	clt
    19c4:	a5 91       	lpm	r26, Z+
    19c6:	25 91       	lpm	r18, Z+
    19c8:	35 91       	lpm	r19, Z+
    19ca:	45 91       	lpm	r20, Z+
    19cc:	55 91       	lpm	r21, Z+
    19ce:	ae f3       	brts	.-22     	; 0x19ba <__fp_powser+0x16>
    19d0:	ef 01       	movw	r28, r30
    19d2:	63 dd       	rcall	.-1338   	; 0x149a <__addsf3x>
    19d4:	fe 01       	movw	r30, r28
    19d6:	97 01       	movw	r18, r14
    19d8:	a8 01       	movw	r20, r16
    19da:	da 94       	dec	r13
    19dc:	79 f7       	brne	.-34     	; 0x19bc <__fp_powser+0x18>
    19de:	df 90       	pop	r13
    19e0:	ef 90       	pop	r14
    19e2:	ff 90       	pop	r15
    19e4:	0f 91       	pop	r16
    19e6:	1f 91       	pop	r17
    19e8:	cf 91       	pop	r28
    19ea:	df 91       	pop	r29
    19ec:	08 95       	ret

000019ee <inverse>:
inverse():
    19ee:	9b 01       	movw	r18, r22
    19f0:	ac 01       	movw	r20, r24
    19f2:	60 e0       	ldi	r22, 0x00	; 0
    19f4:	70 e0       	ldi	r23, 0x00	; 0
    19f6:	80 e8       	ldi	r24, 0x80	; 128
    19f8:	9f e3       	ldi	r25, 0x3F	; 63
    19fa:	a6 cd       	rjmp	.-1204   	; 0x1548 <__divsf3>
    19fc:	9a ce       	rjmp	.-716    	; 0x1732 <__fp_inf>
    19fe:	ac c0       	rjmp	.+344    	; 0x1b58 <__fp_mpack>

00001a00 <ldexp>:
ldexp():
    1a00:	c8 de       	rcall	.-624    	; 0x1792 <__fp_splitA>
    1a02:	e8 f3       	brcs	.-6      	; 0x19fe <inverse+0x10>
    1a04:	99 23       	and	r25, r25
    1a06:	d9 f3       	breq	.-10     	; 0x19fe <inverse+0x10>
    1a08:	94 0f       	add	r25, r20
    1a0a:	51 1d       	adc	r21, r1
    1a0c:	bb f3       	brvs	.-18     	; 0x19fc <inverse+0xe>
    1a0e:	91 50       	subi	r25, 0x01	; 1
    1a10:	50 40       	sbci	r21, 0x00	; 0
    1a12:	94 f0       	brlt	.+36     	; 0x1a38 <ldexp+0x38>
    1a14:	59 f0       	breq	.+22     	; 0x1a2c <ldexp+0x2c>
    1a16:	88 23       	and	r24, r24
    1a18:	32 f0       	brmi	.+12     	; 0x1a26 <ldexp+0x26>
    1a1a:	66 0f       	add	r22, r22
    1a1c:	77 1f       	adc	r23, r23
    1a1e:	88 1f       	adc	r24, r24
    1a20:	91 50       	subi	r25, 0x01	; 1
    1a22:	50 40       	sbci	r21, 0x00	; 0
    1a24:	c1 f7       	brne	.-16     	; 0x1a16 <ldexp+0x16>
    1a26:	9e 3f       	cpi	r25, 0xFE	; 254
    1a28:	51 05       	cpc	r21, r1
    1a2a:	44 f7       	brge	.-48     	; 0x19fc <inverse+0xe>
    1a2c:	88 0f       	add	r24, r24
    1a2e:	91 1d       	adc	r25, r1
    1a30:	96 95       	lsr	r25
    1a32:	87 95       	ror	r24
    1a34:	97 f9       	bld	r25, 7
    1a36:	08 95       	ret
    1a38:	5f 3f       	cpi	r21, 0xFF	; 255
    1a3a:	ac f0       	brlt	.+42     	; 0x1a66 <ldexp+0x66>
    1a3c:	98 3e       	cpi	r25, 0xE8	; 232
    1a3e:	9c f0       	brlt	.+38     	; 0x1a66 <ldexp+0x66>
    1a40:	bb 27       	eor	r27, r27
    1a42:	86 95       	lsr	r24
    1a44:	77 95       	ror	r23
    1a46:	67 95       	ror	r22
    1a48:	b7 95       	ror	r27
    1a4a:	08 f4       	brcc	.+2      	; 0x1a4e <ldexp+0x4e>
    1a4c:	b1 60       	ori	r27, 0x01	; 1
    1a4e:	93 95       	inc	r25
    1a50:	c1 f7       	brne	.-16     	; 0x1a42 <ldexp+0x42>
    1a52:	bb 0f       	add	r27, r27
    1a54:	58 f7       	brcc	.-42     	; 0x1a2c <ldexp+0x2c>
    1a56:	11 f4       	brne	.+4      	; 0x1a5c <ldexp+0x5c>
    1a58:	60 ff       	sbrs	r22, 0
    1a5a:	e8 cf       	rjmp	.-48     	; 0x1a2c <ldexp+0x2c>
    1a5c:	6f 5f       	subi	r22, 0xFF	; 255
    1a5e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a60:	8f 4f       	sbci	r24, 0xFF	; 255
    1a62:	9f 4f       	sbci	r25, 0xFF	; 255
    1a64:	e3 cf       	rjmp	.-58     	; 0x1a2c <ldexp+0x2c>
    1a66:	b0 ce       	rjmp	.-672    	; 0x17c8 <__fp_szero>
    1a68:	0e f0       	brts	.+2      	; 0x1a6c <ldexp+0x6c>
    1a6a:	76 c0       	rjmp	.+236    	; 0x1b58 <__fp_mpack>
    1a6c:	68 ce       	rjmp	.-816    	; 0x173e <__fp_nan>
    1a6e:	68 94       	set
    1a70:	60 ce       	rjmp	.-832    	; 0x1732 <__fp_inf>

00001a72 <log>:
    1a72:	8f de       	rcall	.-738    	; 0x1792 <__fp_splitA>
log():
    1a74:	c8 f3       	brcs	.-14     	; 0x1a68 <ldexp+0x68>
    1a76:	99 23       	and	r25, r25
    1a78:	d1 f3       	breq	.-12     	; 0x1a6e <ldexp+0x6e>
    1a7a:	c6 f3       	brts	.-16     	; 0x1a6c <ldexp+0x6c>
    1a7c:	df 93       	push	r29
    1a7e:	cf 93       	push	r28
    1a80:	1f 93       	push	r17
    1a82:	0f 93       	push	r16
    1a84:	ff 92       	push	r15
    1a86:	c9 2f       	mov	r28, r25
    1a88:	dd 27       	eor	r29, r29
    1a8a:	88 23       	and	r24, r24
    1a8c:	2a f0       	brmi	.+10     	; 0x1a98 <log+0x26>
    1a8e:	21 97       	sbiw	r28, 0x01	; 1
    1a90:	66 0f       	add	r22, r22
    1a92:	77 1f       	adc	r23, r23
    1a94:	88 1f       	adc	r24, r24
    1a96:	da f7       	brpl	.-10     	; 0x1a8e <log+0x1c>
    1a98:	20 e0       	ldi	r18, 0x00	; 0
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	40 e8       	ldi	r20, 0x80	; 128
    1a9e:	5f eb       	ldi	r21, 0xBF	; 191
    1aa0:	9f e3       	ldi	r25, 0x3F	; 63
    1aa2:	88 39       	cpi	r24, 0x98	; 152
    1aa4:	20 f0       	brcs	.+8      	; 0x1aae <log+0x3c>
    1aa6:	80 3e       	cpi	r24, 0xE0	; 224
    1aa8:	30 f0       	brcs	.+12     	; 0x1ab6 <log+0x44>
    1aaa:	21 96       	adiw	r28, 0x01	; 1
    1aac:	8f 77       	andi	r24, 0x7F	; 127
    1aae:	e4 dc       	rcall	.-1592   	; 0x1478 <__addsf3>
    1ab0:	e0 ea       	ldi	r30, 0xA0	; 160
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	03 c0       	rjmp	.+6      	; 0x1abc <log+0x4a>
    1ab6:	e0 dc       	rcall	.-1600   	; 0x1478 <__addsf3>
    1ab8:	ed ec       	ldi	r30, 0xCD	; 205
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	73 df       	rcall	.-282    	; 0x19a4 <__fp_powser>
    1abe:	8b 01       	movw	r16, r22
    1ac0:	be 01       	movw	r22, r28
    1ac2:	ec 01       	movw	r28, r24
    1ac4:	fb 2e       	mov	r15, r27
    1ac6:	6f 57       	subi	r22, 0x7F	; 127
    1ac8:	71 09       	sbc	r23, r1
    1aca:	75 95       	asr	r23
    1acc:	77 1f       	adc	r23, r23
    1ace:	88 0b       	sbc	r24, r24
    1ad0:	99 0b       	sbc	r25, r25
    1ad2:	d0 dd       	rcall	.-1120   	; 0x1674 <__floatsisf>
    1ad4:	28 e1       	ldi	r18, 0x18	; 24
    1ad6:	32 e7       	ldi	r19, 0x72	; 114
    1ad8:	41 e3       	ldi	r20, 0x31	; 49
    1ada:	5f e3       	ldi	r21, 0x3F	; 63
    1adc:	8b de       	rcall	.-746    	; 0x17f4 <__mulsf3x>
    1ade:	af 2d       	mov	r26, r15
    1ae0:	98 01       	movw	r18, r16
    1ae2:	ae 01       	movw	r20, r28
    1ae4:	ff 90       	pop	r15
    1ae6:	0f 91       	pop	r16
    1ae8:	1f 91       	pop	r17
    1aea:	cf 91       	pop	r28
    1aec:	df 91       	pop	r29
    1aee:	d5 dc       	rcall	.-1622   	; 0x149a <__addsf3x>
    1af0:	37 ce       	rjmp	.-914    	; 0x1760 <__fp_round>

00001af2 <modf>:
    1af2:	fa 01       	movw	r30, r20
    1af4:	dc 01       	movw	r26, r24
    1af6:	aa 0f       	add	r26, r26
    1af8:	bb 1f       	adc	r27, r27
    1afa:	9b 01       	movw	r18, r22
    1afc:	ac 01       	movw	r20, r24
    1afe:	bf 57       	subi	r27, 0x7F	; 127
    1b00:	28 f4       	brcc	.+10     	; 0x1b0c <modf+0x1a>
    1b02:	22 27       	eor	r18, r18
    1b04:	33 27       	eor	r19, r19
    1b06:	44 27       	eor	r20, r20
    1b08:	50 78       	andi	r21, 0x80	; 128
    1b0a:	1f c0       	rjmp	.+62     	; 0x1b4a <modf+0x58>
    1b0c:	b7 51       	subi	r27, 0x17	; 23
    1b0e:	88 f4       	brcc	.+34     	; 0x1b32 <modf+0x40>
    1b10:	ab 2f       	mov	r26, r27
modf():
    1b12:	00 24       	eor	r0, r0
    1b14:	46 95       	lsr	r20
    1b16:	37 95       	ror	r19
    1b18:	27 95       	ror	r18
    1b1a:	01 1c       	adc	r0, r1
    1b1c:	a3 95       	inc	r26
    1b1e:	d2 f3       	brmi	.-12     	; 0x1b14 <modf+0x22>
    1b20:	00 20       	and	r0, r0
    1b22:	69 f0       	breq	.+26     	; 0x1b3e <modf+0x4c>
    1b24:	22 0f       	add	r18, r18
    1b26:	33 1f       	adc	r19, r19
    1b28:	44 1f       	adc	r20, r20
    1b2a:	b3 95       	inc	r27
    1b2c:	da f3       	brmi	.-10     	; 0x1b24 <modf+0x32>
    1b2e:	0d d0       	rcall	.+26     	; 0x1b4a <modf+0x58>
    1b30:	a2 cc       	rjmp	.-1724   	; 0x1476 <__subsf3>
    1b32:	61 30       	cpi	r22, 0x01	; 1
    1b34:	71 05       	cpc	r23, r1
    1b36:	a0 e8       	ldi	r26, 0x80	; 128
    1b38:	8a 07       	cpc	r24, r26
    1b3a:	b9 46       	sbci	r27, 0x69	; 105
    1b3c:	30 f4       	brcc	.+12     	; 0x1b4a <modf+0x58>
    1b3e:	9b 01       	movw	r18, r22
    1b40:	ac 01       	movw	r20, r24
    1b42:	66 27       	eor	r22, r22
    1b44:	77 27       	eor	r23, r23
    1b46:	88 27       	eor	r24, r24
    1b48:	90 78       	andi	r25, 0x80	; 128
    1b4a:	30 96       	adiw	r30, 0x00	; 0
    1b4c:	21 f0       	breq	.+8      	; 0x1b56 <modf+0x64>
    1b4e:	20 83       	st	Z, r18
    1b50:	31 83       	std	Z+1, r19	; 0x01
    1b52:	42 83       	std	Z+2, r20	; 0x02
    1b54:	53 83       	std	Z+3, r21	; 0x03
    1b56:	08 95       	ret

00001b58 <__fp_mpack>:
__fp_mpack():
    1b58:	9f 3f       	cpi	r25, 0xFF	; 255
    1b5a:	31 f0       	breq	.+12     	; 0x1b68 <__fp_mpack_finite+0xc>

00001b5c <__fp_mpack_finite>:
    1b5c:	91 50       	subi	r25, 0x01	; 1
    1b5e:	20 f4       	brcc	.+8      	; 0x1b68 <__fp_mpack_finite+0xc>
    1b60:	87 95       	ror	r24
    1b62:	77 95       	ror	r23
    1b64:	67 95       	ror	r22
    1b66:	b7 95       	ror	r27
    1b68:	88 0f       	add	r24, r24
    1b6a:	91 1d       	adc	r25, r1
    1b6c:	96 95       	lsr	r25
    1b6e:	87 95       	ror	r24
    1b70:	97 f9       	bld	r25, 7
    1b72:	08 95       	ret

00001b74 <__mulsi3>:
__mulsi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:648
    1b74:	db 01       	movw	r26, r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:649
    1b76:	8f 93       	push	r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:650
    1b78:	9f 93       	push	r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:651
    1b7a:	2d d0       	rcall	.+90     	; 0x1bd6 <__muluhisi3>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:652
    1b7c:	bf 91       	pop	r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:653
    1b7e:	af 91       	pop	r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:655
    1b80:	a2 9f       	mul	r26, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:656
    1b82:	80 0d       	add	r24, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:657
    1b84:	91 1d       	adc	r25, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:658
    1b86:	a3 9f       	mul	r26, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:659
    1b88:	90 0d       	add	r25, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:660
    1b8a:	b2 9f       	mul	r27, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:661
    1b8c:	90 0d       	add	r25, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:662
    1b8e:	11 24       	eor	r1, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:663
    1b90:	08 95       	ret

00001b92 <__udivmodsi4>:
__udivmodsi4():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    1b92:	a1 e2       	ldi	r26, 0x21	; 33
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    1b94:	1a 2e       	mov	r1, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    1b96:	aa 1b       	sub	r26, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    1b98:	bb 1b       	sub	r27, r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    1b9a:	fd 01       	movw	r30, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    1b9c:	0d c0       	rjmp	.+26     	; 0x1bb8 <__udivmodsi4_ep>

00001b9e <__udivmodsi4_loop>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    1b9e:	aa 1f       	adc	r26, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    1ba0:	bb 1f       	adc	r27, r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    1ba2:	ee 1f       	adc	r30, r30
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    1ba4:	ff 1f       	adc	r31, r31
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    1ba6:	a2 17       	cp	r26, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    1ba8:	b3 07       	cpc	r27, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    1baa:	e4 07       	cpc	r30, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    1bac:	f5 07       	cpc	r31, r21
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    1bae:	20 f0       	brcs	.+8      	; 0x1bb8 <__udivmodsi4_ep>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    1bb0:	a2 1b       	sub	r26, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    1bb2:	b3 0b       	sbc	r27, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    1bb4:	e4 0b       	sbc	r30, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    1bb6:	f5 0b       	sbc	r31, r21

00001bb8 <__udivmodsi4_ep>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    1bb8:	66 1f       	adc	r22, r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    1bba:	77 1f       	adc	r23, r23
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    1bbc:	88 1f       	adc	r24, r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    1bbe:	99 1f       	adc	r25, r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    1bc0:	1a 94       	dec	r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    1bc2:	69 f7       	brne	.-38     	; 0x1b9e <__udivmodsi4_loop>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    1bc4:	60 95       	com	r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    1bc6:	70 95       	com	r23
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    1bc8:	80 95       	com	r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    1bca:	90 95       	com	r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    1bcc:	9b 01       	movw	r18, r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    1bce:	ac 01       	movw	r20, r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    1bd0:	bd 01       	movw	r22, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    1bd2:	cf 01       	movw	r24, r30
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    1bd4:	08 95       	ret

00001bd6 <__muluhisi3>:
__muluhisi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    1bd6:	52 d1       	rcall	.+676    	; 0x1e7c <__umulhisi3>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    1bd8:	a5 9f       	mul	r26, r21
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    1bda:	90 0d       	add	r25, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    1bdc:	b4 9f       	mul	r27, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    1bde:	90 0d       	add	r25, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    1be0:	a4 9f       	mul	r26, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    1be2:	80 0d       	add	r24, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    1be4:	91 1d       	adc	r25, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    1be6:	11 24       	eor	r1, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    1be8:	08 95       	ret

00001bea <__mulshisi3>:
__mulshisi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:603
    1bea:	b7 ff       	sbrs	r27, 7
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:605
    1bec:	f4 cf       	rjmp	.-24     	; 0x1bd6 <__muluhisi3>

00001bee <__mulohisi3>:
__mulohisi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:613
    1bee:	f3 df       	rcall	.-26     	; 0x1bd6 <__muluhisi3>
    1bf0:	82 1b       	sub	r24, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:615
    1bf2:	93 0b       	sbc	r25, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:616
    1bf4:	08 95       	ret

00001bf6 <__muldi3>:
__muldi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:617
    1bf6:	df 93       	push	r29
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:895
    1bf8:	cf 93       	push	r28
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:896
    1bfa:	1f 93       	push	r17
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:897
    1bfc:	0f 93       	push	r16
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:902
    1bfe:	9a 9d       	mul	r25, r10
    1c00:	f0 2d       	mov	r31, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:903
    1c02:	21 9f       	mul	r18, r17
    1c04:	f0 0d       	add	r31, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:904
    1c06:	8b 9d       	mul	r24, r11
    1c08:	f0 0d       	add	r31, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:905
    1c0a:	8a 9d       	mul	r24, r10
    1c0c:	e0 2d       	mov	r30, r0
    1c0e:	f1 0d       	add	r31, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:906
    1c10:	03 9f       	mul	r16, r19
    1c12:	f0 0d       	add	r31, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:907
    1c14:	02 9f       	mul	r16, r18
    1c16:	e0 0d       	add	r30, r0
    1c18:	f1 1d       	adc	r31, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:910
    1c1a:	4e 9d       	mul	r20, r14
    1c1c:	e0 0d       	add	r30, r0
    1c1e:	f1 1d       	adc	r31, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:911
    1c20:	5e 9d       	mul	r21, r14
    1c22:	f0 0d       	add	r31, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:912
    1c24:	4f 9d       	mul	r20, r15
    1c26:	f0 0d       	add	r31, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:914
    1c28:	7f 93       	push	r23
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:915
    1c2a:	6f 93       	push	r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:916
    1c2c:	bf 92       	push	r11
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:917
    1c2e:	af 92       	push	r10
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:918
    1c30:	5f 93       	push	r21
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:919
    1c32:	4f 93       	push	r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:922
    1c34:	d5 01       	movw	r26, r10
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:923
    1c36:	22 d1       	rcall	.+580    	; 0x1e7c <__umulhisi3>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:924
    1c38:	8b 01       	movw	r16, r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:925
    1c3a:	ac 01       	movw	r20, r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:929
    1c3c:	d7 01       	movw	r26, r14
    1c3e:	1e d1       	rcall	.+572    	; 0x1e7c <__umulhisi3>
    1c40:	eb 01       	movw	r28, r22
    1c42:	e8 0f       	add	r30, r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:931
    1c44:	f9 1f       	adc	r31, r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:933
    1c46:	d6 01       	movw	r26, r12
    1c48:	1e d0       	rcall	.+60     	; 0x1c86 <__muldi3_6>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:936
    1c4a:	2f 91       	pop	r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:938
    1c4c:	3f 91       	pop	r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:939
    1c4e:	d6 01       	movw	r26, r12
    1c50:	15 d1       	rcall	.+554    	; 0x1e7c <__umulhisi3>
    1c52:	c6 0f       	add	r28, r22
    1c54:	d7 1f       	adc	r29, r23
    1c56:	e8 1f       	adc	r30, r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:941
    1c58:	f9 1f       	adc	r31, r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:944
    1c5a:	af 91       	pop	r26
    1c5c:	bf 91       	pop	r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:946
    1c5e:	13 d0       	rcall	.+38     	; 0x1c86 <__muldi3_6>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:947
    1c60:	2f 91       	pop	r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:949
    1c62:	3f 91       	pop	r19
    1c64:	0b d1       	rcall	.+534    	; 0x1e7c <__umulhisi3>
    1c66:	c6 0f       	add	r28, r22
    1c68:	d7 1f       	adc	r29, r23
    1c6a:	e8 1f       	adc	r30, r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:952
    1c6c:	f9 1f       	adc	r31, r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:953
    1c6e:	d6 01       	movw	r26, r12
    1c70:	05 d1       	rcall	.+522    	; 0x1e7c <__umulhisi3>
    1c72:	e6 0f       	add	r30, r22
    1c74:	f7 1f       	adc	r31, r23
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:956
    1c76:	98 01       	movw	r18, r16
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:958
    1c78:	be 01       	movw	r22, r28
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:959
    1c7a:	cf 01       	movw	r24, r30
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:961
    1c7c:	0f 91       	pop	r16
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:962
    1c7e:	1f 91       	pop	r17
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:963
    1c80:	cf 91       	pop	r28
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:964
    1c82:	df 91       	pop	r29
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:965
    1c84:	08 95       	ret

00001c86 <__muldi3_6>:
__muldi3_6():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:973
    1c86:	fa d0       	rcall	.+500    	; 0x1e7c <__umulhisi3>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:974
    1c88:	46 0f       	add	r20, r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:975
    1c8a:	57 1f       	adc	r21, r23
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:976
    1c8c:	c8 1f       	adc	r28, r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:977
    1c8e:	d9 1f       	adc	r29, r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:978
    1c90:	08 f4       	brcc	.+2      	; 0x1c94 <__muldi3_6+0xe>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:979
    1c92:	31 96       	adiw	r30, 0x01	; 1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:980
    1c94:	08 95       	ret

00001c96 <__moddi3>:
__moddi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1964
    1c96:	68 94       	set
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1965
    1c98:	01 c0       	rjmp	.+2      	; 0x1c9c <__divdi3_moddi3>

00001c9a <__divdi3>:
__divdi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1972
    1c9a:	e8 94       	clt

00001c9c <__divdi3_moddi3>:
__divdi3_moddi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1977
    1c9c:	f9 2f       	mov	r31, r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1978
    1c9e:	f1 2b       	or	r31, r17
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1979
    1ca0:	0a f0       	brmi	.+2      	; 0x1ca4 <__divdi3_moddi3+0x8>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1981
    1ca2:	27 c0       	rjmp	.+78     	; 0x1cf2 <__udivdi3_umoddi3>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1987
    1ca4:	a0 e0       	ldi	r26, 0x00	; 0
    1ca6:	b0 e0       	ldi	r27, 0x00	; 0
    1ca8:	e7 e5       	ldi	r30, 0x57	; 87
    1caa:	fe e0       	ldi	r31, 0x0E	; 14
    1cac:	b9 cb       	rjmp	.-2190   	; 0x1420 <__prologue_saves__+0xc>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1991
    1cae:	09 2e       	mov	r0, r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1997
    1cb0:	05 94       	asr	r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2002
    1cb2:	1a f4       	brpl	.+6      	; 0x1cba <__divdi3_moddi3+0x1e>
    1cb4:	79 d0       	rcall	.+242    	; 0x1da8 <__negdi2>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2005
    1cb6:	11 23       	and	r17, r17
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2006
    1cb8:	92 f4       	brpl	.+36     	; 0x1cde <__divdi3_moddi3+0x42>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2007
    1cba:	f0 e8       	ldi	r31, 0x80	; 128
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2008
    1cbc:	0f 26       	eor	r0, r31
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2010
    1cbe:	ff ef       	ldi	r31, 0xFF	; 255
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2011
    1cc0:	e0 94       	com	r14
    1cc2:	f0 94       	com	r15
    1cc4:	00 95       	com	r16
    1cc6:	10 95       	com	r17
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2012
    1cc8:	b0 94       	com	r11
    1cca:	c0 94       	com	r12
    1ccc:	d0 94       	com	r13
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2013
    1cce:	a1 94       	neg	r10
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2014
    1cd0:	bf 0a       	sbc	r11, r31
    1cd2:	cf 0a       	sbc	r12, r31
    1cd4:	df 0a       	sbc	r13, r31
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2015
    1cd6:	ef 0a       	sbc	r14, r31
    1cd8:	ff 0a       	sbc	r15, r31
    1cda:	0f 0b       	sbc	r16, r31
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2018
    1cdc:	1f 0b       	sbc	r17, r31
    1cde:	13 d0       	rcall	.+38     	; 0x1d06 <__udivmod64>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2025
    1ce0:	07 fc       	sbrc	r0, 7
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2027
    1ce2:	62 d0       	rcall	.+196    	; 0x1da8 <__negdi2>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2030
    1ce4:	cd b7       	in	r28, 0x3d	; 61
    1ce6:	de b7       	in	r29, 0x3e	; 62
    1ce8:	ec e0       	ldi	r30, 0x0C	; 12
    1cea:	b3 cb       	rjmp	.-2202   	; 0x1452 <__epilogue_restores__+0xc>

00001cec <__umoddi3>:
__umoddi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1806
    1cec:	68 94       	set
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1807
    1cee:	01 c0       	rjmp	.+2      	; 0x1cf2 <__udivdi3_umoddi3>

00001cf0 <__udivdi3>:
__udivdi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1814
    1cf0:	e8 94       	clt

00001cf2 <__udivdi3_umoddi3>:
__udivdi3_umoddi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1818
    1cf2:	8f 92       	push	r8
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1819
    1cf4:	9f 92       	push	r9
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1820
    1cf6:	cf 93       	push	r28
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1821
    1cf8:	df 93       	push	r29
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1822
    1cfa:	05 d0       	rcall	.+10     	; 0x1d06 <__udivmod64>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1823
    1cfc:	df 91       	pop	r29
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1824
    1cfe:	cf 91       	pop	r28
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1825
    1d00:	9f 90       	pop	r9
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1826
    1d02:	8f 90       	pop	r8
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1827
    1d04:	08 95       	ret

00001d06 <__udivmod64>:
__udivmod64():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1842
    1d06:	88 24       	eor	r8, r8
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1843
    1d08:	99 24       	eor	r9, r9
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1844
    1d0a:	f4 01       	movw	r30, r8
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1845
    1d0c:	e4 01       	movw	r28, r8
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1846
    1d0e:	b0 e4       	ldi	r27, 0x40	; 64
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1856
    1d10:	9f 93       	push	r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1857
    1d12:	aa 27       	eor	r26, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1861
    1d14:	9a 15       	cp	r25, r10
    1d16:	8b 04       	cpc	r8, r11
    1d18:	9c 04       	cpc	r9, r12
    1d1a:	ed 05       	cpc	r30, r13
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1862
    1d1c:	fe 05       	cpc	r31, r14
    1d1e:	cf 05       	cpc	r28, r15
    1d20:	d0 07       	cpc	r29, r16
    1d22:	a1 07       	cpc	r26, r17
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1863
    1d24:	98 f4       	brcc	.+38     	; 0x1d4c <__udivmod64+0x46>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1866
    1d26:	ad 2f       	mov	r26, r29
    1d28:	dc 2f       	mov	r29, r28
    1d2a:	cf 2f       	mov	r28, r31
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1867
    1d2c:	fe 2f       	mov	r31, r30
    1d2e:	e9 2d       	mov	r30, r9
    1d30:	98 2c       	mov	r9, r8
    1d32:	89 2e       	mov	r8, r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1868
    1d34:	98 2f       	mov	r25, r24
    1d36:	87 2f       	mov	r24, r23
    1d38:	76 2f       	mov	r23, r22
    1d3a:	65 2f       	mov	r22, r21
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1869
    1d3c:	54 2f       	mov	r21, r20
    1d3e:	43 2f       	mov	r20, r19
    1d40:	32 2f       	mov	r19, r18
    1d42:	22 27       	eor	r18, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1872
    1d44:	b8 50       	subi	r27, 0x08	; 8
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1873
    1d46:	31 f7       	brne	.-52     	; 0x1d14 <__udivmod64+0xe>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1876
    1d48:	bf 91       	pop	r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1881
    1d4a:	27 c0       	rjmp	.+78     	; 0x1d9a <__udivmod64+0x94>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1884
    1d4c:	1b 2e       	mov	r1, r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1887
    1d4e:	bf 91       	pop	r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1888
    1d50:	bb 27       	eor	r27, r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1916
    1d52:	22 0f       	add	r18, r18
    1d54:	33 1f       	adc	r19, r19
    1d56:	44 1f       	adc	r20, r20
    1d58:	55 1f       	adc	r21, r21
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1917
    1d5a:	66 1f       	adc	r22, r22
    1d5c:	77 1f       	adc	r23, r23
    1d5e:	88 1f       	adc	r24, r24
    1d60:	99 1f       	adc	r25, r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1920
    1d62:	88 1c       	adc	r8, r8
    1d64:	99 1c       	adc	r9, r9
    1d66:	ee 1f       	adc	r30, r30
    1d68:	ff 1f       	adc	r31, r31
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1921
    1d6a:	cc 1f       	adc	r28, r28
    1d6c:	dd 1f       	adc	r29, r29
    1d6e:	aa 1f       	adc	r26, r26
    1d70:	bb 1f       	adc	r27, r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1924
    1d72:	8a 14       	cp	r8, r10
    1d74:	9b 04       	cpc	r9, r11
    1d76:	ec 05       	cpc	r30, r12
    1d78:	fd 05       	cpc	r31, r13
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1925
    1d7a:	ce 05       	cpc	r28, r14
    1d7c:	df 05       	cpc	r29, r15
    1d7e:	a0 07       	cpc	r26, r16
    1d80:	b1 07       	cpc	r27, r17
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1927
    1d82:	48 f0       	brcs	.+18     	; 0x1d96 <__udivmod64+0x90>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1930
    1d84:	8a 18       	sub	r8, r10
    1d86:	9b 08       	sbc	r9, r11
    1d88:	ec 09       	sbc	r30, r12
    1d8a:	fd 09       	sbc	r31, r13
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1931
    1d8c:	ce 09       	sbc	r28, r14
    1d8e:	df 09       	sbc	r29, r15
    1d90:	a0 0b       	sbc	r26, r16
    1d92:	b1 0b       	sbc	r27, r17
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1935
    1d94:	21 60       	ori	r18, 0x01	; 1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1938
    1d96:	1a 94       	dec	r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1939
    1d98:	e1 f6       	brne	.-72     	; 0x1d52 <__udivmod64+0x4c>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1944
    1d9a:	2e f4       	brtc	.+10     	; 0x1da6 <__udivmod64+0xa0>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1945
    1d9c:	94 01       	movw	r18, r8
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1946
    1d9e:	af 01       	movw	r20, r30
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1947
    1da0:	be 01       	movw	r22, r28
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1948
    1da2:	cd 01       	movw	r24, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1950
    1da4:	00 0c       	add	r0, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1952
    1da6:	08 95       	ret

00001da8 <__negdi2>:
__negdi2():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2117
    1da8:	60 95       	com	r22
    1daa:	70 95       	com	r23
    1dac:	80 95       	com	r24
    1dae:	90 95       	com	r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2118
    1db0:	30 95       	com	r19
    1db2:	40 95       	com	r20
    1db4:	50 95       	com	r21
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2119
    1db6:	21 95       	neg	r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2120
    1db8:	3f 4f       	sbci	r19, 0xFF	; 255
    1dba:	4f 4f       	sbci	r20, 0xFF	; 255
    1dbc:	5f 4f       	sbci	r21, 0xFF	; 255
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2121
    1dbe:	6f 4f       	sbci	r22, 0xFF	; 255
    1dc0:	7f 4f       	sbci	r23, 0xFF	; 255
    1dc2:	8f 4f       	sbci	r24, 0xFF	; 255
    1dc4:	9f 4f       	sbci	r25, 0xFF	; 255
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2122
    1dc6:	08 95       	ret

00001dc8 <__ashldi3>:
__ashldi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3169
    1dc8:	00 2e       	mov	r0, r16
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3170
    1dca:	08 30       	cpi	r16, 0x08	; 8
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3171
    1dcc:	90 f0       	brcs	.+36     	; 0x1df2 <__ashldi3+0x2a>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3172
    1dce:	98 2f       	mov	r25, r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3173
    1dd0:	87 2f       	mov	r24, r23
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3174
    1dd2:	76 2f       	mov	r23, r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3175
    1dd4:	65 2f       	mov	r22, r21
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3176
    1dd6:	54 2f       	mov	r21, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3177
    1dd8:	43 2f       	mov	r20, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3178
    1dda:	32 2f       	mov	r19, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3179
    1ddc:	22 27       	eor	r18, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3180
    1dde:	08 50       	subi	r16, 0x08	; 8
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3181
    1de0:	f4 cf       	rjmp	.-24     	; 0x1dca <__ashldi3+0x2>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3182
    1de2:	22 0f       	add	r18, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3183
    1de4:	33 1f       	adc	r19, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3184
    1de6:	44 1f       	adc	r20, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3185
    1de8:	55 1f       	adc	r21, r21
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3186
    1dea:	66 1f       	adc	r22, r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3187
    1dec:	77 1f       	adc	r23, r23
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3188
    1dee:	88 1f       	adc	r24, r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3189
    1df0:	99 1f       	adc	r25, r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3190
    1df2:	0a 95       	dec	r16
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3191
    1df4:	b2 f7       	brpl	.-20     	; 0x1de2 <__ashldi3+0x1a>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3192
    1df6:	00 2d       	mov	r16, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3193
    1df8:	08 95       	ret

00001dfa <__ashrdi3>:
__ashrdi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3122
    1dfa:	97 fd       	sbrc	r25, 7
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3123
    1dfc:	10 94       	com	r1

00001dfe <__lshrdi3>:
__lshrdi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3131
    1dfe:	00 2e       	mov	r0, r16
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3132
    1e00:	08 30       	cpi	r16, 0x08	; 8
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3133
    1e02:	98 f0       	brcs	.+38     	; 0x1e2a <__lshrdi3+0x2c>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3134
    1e04:	08 50       	subi	r16, 0x08	; 8
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3135
    1e06:	23 2f       	mov	r18, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3136
    1e08:	34 2f       	mov	r19, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3137
    1e0a:	45 2f       	mov	r20, r21
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3138
    1e0c:	56 2f       	mov	r21, r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3139
    1e0e:	67 2f       	mov	r22, r23
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3140
    1e10:	78 2f       	mov	r23, r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3141
    1e12:	89 2f       	mov	r24, r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3142
    1e14:	91 2d       	mov	r25, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3143
    1e16:	f4 cf       	rjmp	.-24     	; 0x1e00 <__lshrdi3+0x2>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3144
    1e18:	15 94       	asr	r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3145
    1e1a:	97 95       	ror	r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3146
    1e1c:	87 95       	ror	r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3147
    1e1e:	77 95       	ror	r23
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3148
    1e20:	67 95       	ror	r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3149
    1e22:	57 95       	ror	r21
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3150
    1e24:	47 95       	ror	r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3151
    1e26:	37 95       	ror	r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3152
    1e28:	27 95       	ror	r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3153
    1e2a:	0a 95       	dec	r16
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3154
    1e2c:	aa f7       	brpl	.-22     	; 0x1e18 <__lshrdi3+0x1a>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3155
    1e2e:	11 24       	eor	r1, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3156
    1e30:	00 2d       	mov	r16, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3157
    1e32:	08 95       	ret

00001e34 <__adddi3>:
__adddi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2051
    1e34:	2a 0d       	add	r18, r10
    1e36:	3b 1d       	adc	r19, r11
    1e38:	4c 1d       	adc	r20, r12
    1e3a:	5d 1d       	adc	r21, r13
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2052
    1e3c:	6e 1d       	adc	r22, r14
    1e3e:	7f 1d       	adc	r23, r15
    1e40:	80 1f       	adc	r24, r16
    1e42:	91 1f       	adc	r25, r17
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2053
    1e44:	08 95       	ret

00001e46 <__subdi3>:
__subdi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2080
    1e46:	2a 19       	sub	r18, r10
    1e48:	3b 09       	sbc	r19, r11
    1e4a:	4c 09       	sbc	r20, r12
    1e4c:	5d 09       	sbc	r21, r13
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2081
    1e4e:	6e 09       	sbc	r22, r14
    1e50:	7f 09       	sbc	r23, r15
    1e52:	80 0b       	sbc	r24, r16
    1e54:	91 0b       	sbc	r25, r17
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2082
    1e56:	08 95       	ret

00001e58 <__cmpdi2_s8>:
__cmpdi2_s8():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2102
    1e58:	00 24       	eor	r0, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2103
    1e5a:	a7 fd       	sbrc	r26, 7
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2104
    1e5c:	00 94       	com	r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2105
    1e5e:	2a 17       	cp	r18, r26
    1e60:	30 05       	cpc	r19, r0
    1e62:	40 05       	cpc	r20, r0
    1e64:	50 05       	cpc	r21, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2106
    1e66:	60 05       	cpc	r22, r0
    1e68:	70 05       	cpc	r23, r0
    1e6a:	80 05       	cpc	r24, r0
    1e6c:	90 05       	cpc	r25, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2107
    1e6e:	08 95       	ret

00001e70 <__tablejump2__>:
__tablejump2__():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    1e70:	ee 0f       	add	r30, r30
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    1e72:	ff 1f       	adc	r31, r31
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    1e74:	05 90       	lpm	r0, Z+
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    1e76:	f4 91       	lpm	r31, Z
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    1e78:	e0 2d       	mov	r30, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    1e7a:	09 94       	ijmp

00001e7c <__umulhisi3>:
__umulhisi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    1e7c:	a2 9f       	mul	r26, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    1e7e:	b0 01       	movw	r22, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    1e80:	b3 9f       	mul	r27, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    1e82:	c0 01       	movw	r24, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    1e84:	a3 9f       	mul	r26, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    1e86:	70 0d       	add	r23, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    1e88:	81 1d       	adc	r24, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    1e8a:	11 24       	eor	r1, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    1e8c:	91 1d       	adc	r25, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    1e8e:	b2 9f       	mul	r27, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    1e90:	70 0d       	add	r23, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    1e92:	81 1d       	adc	r24, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    1e94:	11 24       	eor	r1, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    1e96:	91 1d       	adc	r25, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    1e98:	08 95       	ret

00001e9a <_exit>:
exit():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    1e9a:	f8 94       	cli

00001e9c <__stop_program>:
__stop_program():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    1e9c:	ff cf       	rjmp	.-2      	; 0x1e9c <__stop_program>
